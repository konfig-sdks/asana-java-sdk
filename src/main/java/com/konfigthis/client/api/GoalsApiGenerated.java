/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GoalMetricBase;
import com.konfigthis.client.model.GoalMetricCurrentValueRequest;
import com.konfigthis.client.model.GoalRequest;
import com.konfigthis.client.model.GoalUpdateRequest;
import com.konfigthis.client.model.GoalsAddCollaboratorsToGoalRequest;
import com.konfigthis.client.model.GoalsAddCollaboratorsToGoalResponse;
import com.konfigthis.client.model.GoalsCreateMetricRequest;
import com.konfigthis.client.model.GoalsCreateMetricResponse;
import com.konfigthis.client.model.GoalsCreateNewGoalRecordRequest;
import com.konfigthis.client.model.GoalsCreateNewGoalRecordResponse;
import com.konfigthis.client.model.GoalsDeleteRecordResponse;
import com.konfigthis.client.model.GoalsGetCompactRecordsResponse;
import com.konfigthis.client.model.GoalsGetGoalRecordResponse;
import com.konfigthis.client.model.GoalsGetParentGoalsResponse;
import com.konfigthis.client.model.GoalsRemoveFollowersFromGoalRequest;
import com.konfigthis.client.model.GoalsRemoveFollowersFromGoalResponse;
import com.konfigthis.client.model.GoalsUpdateGoalRecordRequest;
import com.konfigthis.client.model.GoalsUpdateGoalRecordResponse;
import com.konfigthis.client.model.GoalsUpdateMetricCurrentValueRequest;
import com.konfigthis.client.model.GoalsUpdateMetricCurrentValueResponse;
import com.konfigthis.client.model.TaskAddFollowersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCollaboratorsToGoalCall(String goalGid, GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsAddCollaboratorsToGoalRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/addFollowers"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollaboratorsToGoalValidateBeforeCall(String goalGid, GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling addCollaboratorsToGoal(Async)");
        }

        // verify the required parameter 'goalsAddCollaboratorsToGoalRequest' is set
        if (goalsAddCollaboratorsToGoalRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsAddCollaboratorsToGoalRequest' when calling addCollaboratorsToGoal(Async)");
        }

        return addCollaboratorsToGoalCall(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsAddCollaboratorsToGoalResponse> addCollaboratorsToGoalWithHttpInfo(String goalGid, GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addCollaboratorsToGoalValidateBeforeCall(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsAddCollaboratorsToGoalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCollaboratorsToGoalAsync(String goalGid, GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsAddCollaboratorsToGoalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollaboratorsToGoalValidateBeforeCall(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsAddCollaboratorsToGoalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCollaboratorsToGoalRequestBuilder {
        private final String goalGid;
        private TaskAddFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddCollaboratorsToGoalRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddCollaboratorsToGoalRequestBuilder
         */
        public AddCollaboratorsToGoalRequestBuilder data(TaskAddFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddCollaboratorsToGoalRequestBuilder
         */
        public AddCollaboratorsToGoalRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddCollaboratorsToGoalRequestBuilder
         */
        public AddCollaboratorsToGoalRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addCollaboratorsToGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest = buildBodyParams();
            return addCollaboratorsToGoalCall(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields, _callback);
        }

        private GoalsAddCollaboratorsToGoalRequest buildBodyParams() {
            GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest = new GoalsAddCollaboratorsToGoalRequest();
            goalsAddCollaboratorsToGoalRequest.data(this.data);
            return goalsAddCollaboratorsToGoalRequest;
        }

        /**
         * Execute addCollaboratorsToGoal request
         * @return GoalsAddCollaboratorsToGoalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsAddCollaboratorsToGoalResponse execute() throws ApiException {
            GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest = buildBodyParams();
            ApiResponse<GoalsAddCollaboratorsToGoalResponse> localVarResp = addCollaboratorsToGoalWithHttpInfo(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCollaboratorsToGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsAddCollaboratorsToGoalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsAddCollaboratorsToGoalResponse> executeWithHttpInfo() throws ApiException {
            GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest = buildBodyParams();
            return addCollaboratorsToGoalWithHttpInfo(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields);
        }

        /**
         * Execute addCollaboratorsToGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsAddCollaboratorsToGoalResponse> _callback) throws ApiException {
            GoalsAddCollaboratorsToGoalRequest goalsAddCollaboratorsToGoalRequest = buildBodyParams();
            return addCollaboratorsToGoalAsync(goalGid, goalsAddCollaboratorsToGoalRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add a collaborator to a goal
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalsAddCollaboratorsToGoalRequest The followers to be added as collaborators (required)
     * @return AddCollaboratorsToGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
     </table>
     */
    public AddCollaboratorsToGoalRequestBuilder addCollaboratorsToGoal(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new AddCollaboratorsToGoalRequestBuilder(goalGid);
    }
    private okhttp3.Call createMetricCall(String goalGid, GoalsCreateMetricRequest goalsCreateMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsCreateMetricRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/setMetric"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMetricValidateBeforeCall(String goalGid, GoalsCreateMetricRequest goalsCreateMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling createMetric(Async)");
        }

        // verify the required parameter 'goalsCreateMetricRequest' is set
        if (goalsCreateMetricRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsCreateMetricRequest' when calling createMetric(Async)");
        }

        return createMetricCall(goalGid, goalsCreateMetricRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsCreateMetricResponse> createMetricWithHttpInfo(String goalGid, GoalsCreateMetricRequest goalsCreateMetricRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createMetricValidateBeforeCall(goalGid, goalsCreateMetricRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsCreateMetricResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMetricAsync(String goalGid, GoalsCreateMetricRequest goalsCreateMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsCreateMetricResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMetricValidateBeforeCall(goalGid, goalsCreateMetricRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsCreateMetricResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMetricRequestBuilder {
        private final String goalGid;
        private GoalMetricBase data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateMetricRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateMetricRequestBuilder
         */
        public CreateMetricRequestBuilder data(GoalMetricBase data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateMetricRequestBuilder
         */
        public CreateMetricRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateMetricRequestBuilder
         */
        public CreateMetricRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsCreateMetricRequest goalsCreateMetricRequest = buildBodyParams();
            return createMetricCall(goalGid, goalsCreateMetricRequest, optPretty, optFields, _callback);
        }

        private GoalsCreateMetricRequest buildBodyParams() {
            GoalsCreateMetricRequest goalsCreateMetricRequest = new GoalsCreateMetricRequest();
            goalsCreateMetricRequest.data(this.data);
            return goalsCreateMetricRequest;
        }

        /**
         * Execute createMetric request
         * @return GoalsCreateMetricResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsCreateMetricResponse execute() throws ApiException {
            GoalsCreateMetricRequest goalsCreateMetricRequest = buildBodyParams();
            ApiResponse<GoalsCreateMetricResponse> localVarResp = createMetricWithHttpInfo(goalGid, goalsCreateMetricRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMetric request with HTTP info returned
         * @return ApiResponse&lt;GoalsCreateMetricResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsCreateMetricResponse> executeWithHttpInfo() throws ApiException {
            GoalsCreateMetricRequest goalsCreateMetricRequest = buildBodyParams();
            return createMetricWithHttpInfo(goalGid, goalsCreateMetricRequest, optPretty, optFields);
        }

        /**
         * Execute createMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsCreateMetricResponse> _callback) throws ApiException {
            GoalsCreateMetricRequest goalsCreateMetricRequest = buildBodyParams();
            return createMetricAsync(goalGid, goalsCreateMetricRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a goal metric
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalsCreateMetricRequest The goal metric to create. (required)
     * @return CreateMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
     </table>
     */
    public CreateMetricRequestBuilder createMetric(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new CreateMetricRequestBuilder(goalGid);
    }
    private okhttp3.Call createNewGoalRecordCall(GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsCreateNewGoalRecordRequest;

        // create path and map variables
        String localVarPath = "/goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGoalRecordValidateBeforeCall(GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalsCreateNewGoalRecordRequest' is set
        if (goalsCreateNewGoalRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsCreateNewGoalRecordRequest' when calling createNewGoalRecord(Async)");
        }

        return createNewGoalRecordCall(goalsCreateNewGoalRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsCreateNewGoalRecordResponse> createNewGoalRecordWithHttpInfo(GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewGoalRecordValidateBeforeCall(goalsCreateNewGoalRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsCreateNewGoalRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewGoalRecordAsync(GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsCreateNewGoalRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGoalRecordValidateBeforeCall(goalsCreateNewGoalRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsCreateNewGoalRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewGoalRecordRequestBuilder {
        private GoalRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewGoalRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewGoalRecordRequestBuilder
         */
        public CreateNewGoalRecordRequestBuilder data(GoalRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewGoalRecordRequestBuilder
         */
        public CreateNewGoalRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewGoalRecordRequestBuilder
         */
        public CreateNewGoalRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewGoalRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest = buildBodyParams();
            return createNewGoalRecordCall(goalsCreateNewGoalRecordRequest, optPretty, optFields, _callback);
        }

        private GoalsCreateNewGoalRecordRequest buildBodyParams() {
            GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest = new GoalsCreateNewGoalRecordRequest();
            goalsCreateNewGoalRecordRequest.data(this.data);
            return goalsCreateNewGoalRecordRequest;
        }

        /**
         * Execute createNewGoalRecord request
         * @return GoalsCreateNewGoalRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsCreateNewGoalRecordResponse execute() throws ApiException {
            GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest = buildBodyParams();
            ApiResponse<GoalsCreateNewGoalRecordResponse> localVarResp = createNewGoalRecordWithHttpInfo(goalsCreateNewGoalRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewGoalRecord request with HTTP info returned
         * @return ApiResponse&lt;GoalsCreateNewGoalRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsCreateNewGoalRecordResponse> executeWithHttpInfo() throws ApiException {
            GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest = buildBodyParams();
            return createNewGoalRecordWithHttpInfo(goalsCreateNewGoalRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewGoalRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsCreateNewGoalRecordResponse> _callback) throws ApiException {
            GoalsCreateNewGoalRecordRequest goalsCreateNewGoalRecordRequest = buildBodyParams();
            return createNewGoalRecordAsync(goalsCreateNewGoalRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a goal
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @param goalsCreateNewGoalRecordRequest The goal to create. (required)
     * @return CreateNewGoalRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGoalRecordRequestBuilder createNewGoalRecord() throws IllegalArgumentException {
        return new CreateNewGoalRecordRequestBuilder();
    }
    private okhttp3.Call deleteRecordCall(String goalGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordValidateBeforeCall(String goalGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling deleteRecord(Async)");
        }

        return deleteRecordCall(goalGid, optPretty, _callback);

    }


    private ApiResponse<GoalsDeleteRecordResponse> deleteRecordWithHttpInfo(String goalGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(goalGid, optPretty, null);
        Type localVarReturnType = new TypeToken<GoalsDeleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRecordAsync(String goalGid, Boolean optPretty, final ApiCallback<GoalsDeleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(goalGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<GoalsDeleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRecordRequestBuilder {
        private final String goalGid;
        private Boolean optPretty;

        private DeleteRecordRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteRecordRequestBuilder
         */
        public DeleteRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRecordCall(goalGid, optPretty, _callback);
        }


        /**
         * Execute deleteRecord request
         * @return GoalsDeleteRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsDeleteRecordResponse execute() throws ApiException {
            ApiResponse<GoalsDeleteRecordResponse> localVarResp = deleteRecordWithHttpInfo(goalGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRecord request with HTTP info returned
         * @return ApiResponse&lt;GoalsDeleteRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsDeleteRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteRecordWithHttpInfo(goalGid, optPretty);
        }

        /**
         * Execute deleteRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsDeleteRecordResponse> _callback) throws ApiException {
            return deleteRecordAsync(goalGid, optPretty, _callback);
        }
    }

    /**
     * Delete a goal
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @return DeleteRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRecordRequestBuilder deleteRecord(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new DeleteRecordRequestBuilder(goalGid);
    }
    private okhttp3.Call getCompactRecordsCall(Boolean optPretty, String portfolio, String project, String task, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (task != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task", task));
        }

        if (isWorkspaceLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_workspace_level", isWorkspaceLevel));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (timePeriods != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time_periods", timePeriods));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactRecordsValidateBeforeCall(Boolean optPretty, String portfolio, String project, String task, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return getCompactRecordsCall(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, _callback);

    }


    private ApiResponse<GoalsGetCompactRecordsResponse> getCompactRecordsWithHttpInfo(Boolean optPretty, String portfolio, String project, String task, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsGetCompactRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactRecordsAsync(Boolean optPretty, String portfolio, String project, String task, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, Integer limit, String offset, List<String> optFields, final ApiCallback<GoalsGetCompactRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetCompactRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRecordsRequestBuilder {
        private Boolean optPretty;
        private String portfolio;
        private String project;
        private String task;
        private Boolean isWorkspaceLevel;
        private String team;
        private String workspace;
        private List<String> timePeriods;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetCompactRecordsRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set portfolio
         * @param portfolio Globally unique identifier for supporting portfolio. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder portfolio(String portfolio) {
            this.portfolio = portfolio;
            return this;
        }
        
        /**
         * Set project
         * @param project Globally unique identifier for supporting project. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set task
         * @param task Globally unique identifier for supporting task. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder task(String task) {
            this.task = task;
            return this;
        }
        
        /**
         * Set isWorkspaceLevel
         * @param isWorkspaceLevel Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder isWorkspaceLevel(Boolean isWorkspaceLevel) {
            this.isWorkspaceLevel = isWorkspaceLevel;
            return this;
        }
        
        /**
         * Set team
         * @param team Globally unique identifier for the team. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace Globally unique identifier for the workspace. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set timePeriods
         * @param timePeriods Globally unique identifiers for the time periods. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder timePeriods(List<String> timePeriods) {
            this.timePeriods = timePeriods;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactRecordsCall(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, _callback);
        }


        /**
         * Execute getCompactRecords request
         * @return GoalsGetCompactRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetCompactRecordsResponse execute() throws ApiException {
            ApiResponse<GoalsGetCompactRecordsResponse> localVarResp = getCompactRecordsWithHttpInfo(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactRecords request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetCompactRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetCompactRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactRecordsWithHttpInfo(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields);
        }

        /**
         * Execute getCompactRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetCompactRecordsResponse> _callback) throws ApiException {
            return getCompactRecordsAsync(optPretty, portfolio, project, task, isWorkspaceLevel, team, workspace, timePeriods, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get goals
     * Returns compact goal records.
     * @return GetCompactRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRecordsRequestBuilder getCompactRecords() throws IllegalArgumentException {
        return new GetCompactRecordsRequestBuilder();
    }
    private okhttp3.Call getGoalRecordCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalRecordValidateBeforeCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling getGoalRecord(Async)");
        }

        return getGoalRecordCall(goalGid, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsGetGoalRecordResponse> getGoalRecordWithHttpInfo(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getGoalRecordValidateBeforeCall(goalGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsGetGoalRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGoalRecordAsync(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsGetGoalRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalRecordValidateBeforeCall(goalGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetGoalRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGoalRecordRequestBuilder {
        private final String goalGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetGoalRecordRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetGoalRecordRequestBuilder
         */
        public GetGoalRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetGoalRecordRequestBuilder
         */
        public GetGoalRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getGoalRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGoalRecordCall(goalGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getGoalRecord request
         * @return GoalsGetGoalRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetGoalRecordResponse execute() throws ApiException {
            ApiResponse<GoalsGetGoalRecordResponse> localVarResp = getGoalRecordWithHttpInfo(goalGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGoalRecord request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetGoalRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetGoalRecordResponse> executeWithHttpInfo() throws ApiException {
            return getGoalRecordWithHttpInfo(goalGid, optPretty, optFields);
        }

        /**
         * Execute getGoalRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetGoalRecordResponse> _callback) throws ApiException {
            return getGoalRecordAsync(goalGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a goal
     * Returns the complete goal record for a single goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @return GetGoalRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRecordRequestBuilder getGoalRecord(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new GetGoalRecordRequestBuilder(goalGid);
    }
    private okhttp3.Call getParentGoalsCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/parentGoals"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParentGoalsValidateBeforeCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling getParentGoals(Async)");
        }

        return getParentGoalsCall(goalGid, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsGetParentGoalsResponse> getParentGoalsWithHttpInfo(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getParentGoalsValidateBeforeCall(goalGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsGetParentGoalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getParentGoalsAsync(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsGetParentGoalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParentGoalsValidateBeforeCall(goalGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsGetParentGoalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetParentGoalsRequestBuilder {
        private final String goalGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetParentGoalsRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetParentGoalsRequestBuilder
         */
        public GetParentGoalsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetParentGoalsRequestBuilder
         */
        public GetParentGoalsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getParentGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getParentGoalsCall(goalGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getParentGoals request
         * @return GoalsGetParentGoalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsGetParentGoalsResponse execute() throws ApiException {
            ApiResponse<GoalsGetParentGoalsResponse> localVarResp = getParentGoalsWithHttpInfo(goalGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getParentGoals request with HTTP info returned
         * @return ApiResponse&lt;GoalsGetParentGoalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsGetParentGoalsResponse> executeWithHttpInfo() throws ApiException {
            return getParentGoalsWithHttpInfo(goalGid, optPretty, optFields);
        }

        /**
         * Execute getParentGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsGetParentGoalsResponse> _callback) throws ApiException {
            return getParentGoalsAsync(goalGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get parent goals from a goal
     * Returns a compact representation of all of the parent goals of a goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @return GetParentGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
     </table>
     */
    public GetParentGoalsRequestBuilder getParentGoals(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new GetParentGoalsRequestBuilder(goalGid);
    }
    private okhttp3.Call removeFollowersFromGoalCall(String goalGid, GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsRemoveFollowersFromGoalRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/removeFollowers"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFollowersFromGoalValidateBeforeCall(String goalGid, GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling removeFollowersFromGoal(Async)");
        }

        // verify the required parameter 'goalsRemoveFollowersFromGoalRequest' is set
        if (goalsRemoveFollowersFromGoalRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsRemoveFollowersFromGoalRequest' when calling removeFollowersFromGoal(Async)");
        }

        return removeFollowersFromGoalCall(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsRemoveFollowersFromGoalResponse> removeFollowersFromGoalWithHttpInfo(String goalGid, GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeFollowersFromGoalValidateBeforeCall(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsRemoveFollowersFromGoalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFollowersFromGoalAsync(String goalGid, GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsRemoveFollowersFromGoalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFollowersFromGoalValidateBeforeCall(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsRemoveFollowersFromGoalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFollowersFromGoalRequestBuilder {
        private final String goalGid;
        private TaskAddFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private RemoveFollowersFromGoalRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveFollowersFromGoalRequestBuilder
         */
        public RemoveFollowersFromGoalRequestBuilder data(TaskAddFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveFollowersFromGoalRequestBuilder
         */
        public RemoveFollowersFromGoalRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return RemoveFollowersFromGoalRequestBuilder
         */
        public RemoveFollowersFromGoalRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for removeFollowersFromGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest = buildBodyParams();
            return removeFollowersFromGoalCall(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields, _callback);
        }

        private GoalsRemoveFollowersFromGoalRequest buildBodyParams() {
            GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest = new GoalsRemoveFollowersFromGoalRequest();
            goalsRemoveFollowersFromGoalRequest.data(this.data);
            return goalsRemoveFollowersFromGoalRequest;
        }

        /**
         * Execute removeFollowersFromGoal request
         * @return GoalsRemoveFollowersFromGoalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsRemoveFollowersFromGoalResponse execute() throws ApiException {
            GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest = buildBodyParams();
            ApiResponse<GoalsRemoveFollowersFromGoalResponse> localVarResp = removeFollowersFromGoalWithHttpInfo(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFollowersFromGoal request with HTTP info returned
         * @return ApiResponse&lt;GoalsRemoveFollowersFromGoalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsRemoveFollowersFromGoalResponse> executeWithHttpInfo() throws ApiException {
            GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest = buildBodyParams();
            return removeFollowersFromGoalWithHttpInfo(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields);
        }

        /**
         * Execute removeFollowersFromGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsRemoveFollowersFromGoalResponse> _callback) throws ApiException {
            GoalsRemoveFollowersFromGoalRequest goalsRemoveFollowersFromGoalRequest = buildBodyParams();
            return removeFollowersFromGoalAsync(goalGid, goalsRemoveFollowersFromGoalRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Remove a collaborator from a goal
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalsRemoveFollowersFromGoalRequest The followers to be removed as collaborators (required)
     * @return RemoveFollowersFromGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFollowersFromGoalRequestBuilder removeFollowersFromGoal(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new RemoveFollowersFromGoalRequestBuilder(goalGid);
    }
    private okhttp3.Call updateGoalRecordCall(String goalGid, GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsUpdateGoalRecordRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalRecordValidateBeforeCall(String goalGid, GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling updateGoalRecord(Async)");
        }

        // verify the required parameter 'goalsUpdateGoalRecordRequest' is set
        if (goalsUpdateGoalRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsUpdateGoalRecordRequest' when calling updateGoalRecord(Async)");
        }

        return updateGoalRecordCall(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsUpdateGoalRecordResponse> updateGoalRecordWithHttpInfo(String goalGid, GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateGoalRecordValidateBeforeCall(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsUpdateGoalRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGoalRecordAsync(String goalGid, GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsUpdateGoalRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalRecordValidateBeforeCall(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsUpdateGoalRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGoalRecordRequestBuilder {
        private final String goalGid;
        private GoalUpdateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateGoalRecordRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateGoalRecordRequestBuilder
         */
        public UpdateGoalRecordRequestBuilder data(GoalUpdateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateGoalRecordRequestBuilder
         */
        public UpdateGoalRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateGoalRecordRequestBuilder
         */
        public UpdateGoalRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateGoalRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest = buildBodyParams();
            return updateGoalRecordCall(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields, _callback);
        }

        private GoalsUpdateGoalRecordRequest buildBodyParams() {
            GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest = new GoalsUpdateGoalRecordRequest();
            goalsUpdateGoalRecordRequest.data(this.data);
            return goalsUpdateGoalRecordRequest;
        }

        /**
         * Execute updateGoalRecord request
         * @return GoalsUpdateGoalRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsUpdateGoalRecordResponse execute() throws ApiException {
            GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest = buildBodyParams();
            ApiResponse<GoalsUpdateGoalRecordResponse> localVarResp = updateGoalRecordWithHttpInfo(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGoalRecord request with HTTP info returned
         * @return ApiResponse&lt;GoalsUpdateGoalRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsUpdateGoalRecordResponse> executeWithHttpInfo() throws ApiException {
            GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest = buildBodyParams();
            return updateGoalRecordWithHttpInfo(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateGoalRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsUpdateGoalRecordResponse> _callback) throws ApiException {
            GoalsUpdateGoalRecordRequest goalsUpdateGoalRecordRequest = buildBodyParams();
            return updateGoalRecordAsync(goalGid, goalsUpdateGoalRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a goal
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalsUpdateGoalRecordRequest The updated fields for the goal. (required)
     * @return UpdateGoalRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGoalRecordRequestBuilder updateGoalRecord(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new UpdateGoalRecordRequestBuilder(goalGid);
    }
    private okhttp3.Call updateMetricCurrentValueCall(String goalGid, GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalsUpdateMetricCurrentValueRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/setMetricCurrentValue"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetricCurrentValueValidateBeforeCall(String goalGid, GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling updateMetricCurrentValue(Async)");
        }

        // verify the required parameter 'goalsUpdateMetricCurrentValueRequest' is set
        if (goalsUpdateMetricCurrentValueRequest == null) {
            throw new ApiException("Missing the required parameter 'goalsUpdateMetricCurrentValueRequest' when calling updateMetricCurrentValue(Async)");
        }

        return updateMetricCurrentValueCall(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalsUpdateMetricCurrentValueResponse> updateMetricCurrentValueWithHttpInfo(String goalGid, GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateMetricCurrentValueValidateBeforeCall(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalsUpdateMetricCurrentValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMetricCurrentValueAsync(String goalGid, GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalsUpdateMetricCurrentValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetricCurrentValueValidateBeforeCall(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalsUpdateMetricCurrentValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMetricCurrentValueRequestBuilder {
        private final String goalGid;
        private GoalMetricCurrentValueRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateMetricCurrentValueRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateMetricCurrentValueRequestBuilder
         */
        public UpdateMetricCurrentValueRequestBuilder data(GoalMetricCurrentValueRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateMetricCurrentValueRequestBuilder
         */
        public UpdateMetricCurrentValueRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateMetricCurrentValueRequestBuilder
         */
        public UpdateMetricCurrentValueRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateMetricCurrentValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest = buildBodyParams();
            return updateMetricCurrentValueCall(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields, _callback);
        }

        private GoalsUpdateMetricCurrentValueRequest buildBodyParams() {
            GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest = new GoalsUpdateMetricCurrentValueRequest();
            goalsUpdateMetricCurrentValueRequest.data(this.data);
            return goalsUpdateMetricCurrentValueRequest;
        }

        /**
         * Execute updateMetricCurrentValue request
         * @return GoalsUpdateMetricCurrentValueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public GoalsUpdateMetricCurrentValueResponse execute() throws ApiException {
            GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest = buildBodyParams();
            ApiResponse<GoalsUpdateMetricCurrentValueResponse> localVarResp = updateMetricCurrentValueWithHttpInfo(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMetricCurrentValue request with HTTP info returned
         * @return ApiResponse&lt;GoalsUpdateMetricCurrentValueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalsUpdateMetricCurrentValueResponse> executeWithHttpInfo() throws ApiException {
            GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest = buildBodyParams();
            return updateMetricCurrentValueWithHttpInfo(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields);
        }

        /**
         * Execute updateMetricCurrentValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalsUpdateMetricCurrentValueResponse> _callback) throws ApiException {
            GoalsUpdateMetricCurrentValueRequest goalsUpdateMetricCurrentValueRequest = buildBodyParams();
            return updateMetricCurrentValueAsync(goalGid, goalsUpdateMetricCurrentValueRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a goal metric
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalsUpdateMetricCurrentValueRequest The updated fields for the goal metric. (required)
     * @return UpdateMetricCurrentValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMetricCurrentValueRequestBuilder updateMetricCurrentValue(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new UpdateMetricCurrentValueRequestBuilder(goalGid);
    }
}
