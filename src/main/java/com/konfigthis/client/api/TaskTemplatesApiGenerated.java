/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TaskTemplateInstantiateTaskRequest;
import com.konfigthis.client.model.TaskTemplatesDeleteTaskTemplateResponse;
import com.konfigthis.client.model.TaskTemplatesGetSingleTemplateResponse;
import com.konfigthis.client.model.TaskTemplatesInstantiateTaskJobRequest;
import com.konfigthis.client.model.TaskTemplatesInstantiateTaskJobResponse;
import com.konfigthis.client.model.TaskTemplatesListMultipleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskTemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskTemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskTemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteTaskTemplateCall(String taskTemplateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_templates/{task_template_gid}"
            .replace("{" + "task_template_gid" + "}", localVarApiClient.escapeString(taskTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskTemplateValidateBeforeCall(String taskTemplateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskTemplateGid' is set
        if (taskTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'taskTemplateGid' when calling deleteTaskTemplate(Async)");
        }

        return deleteTaskTemplateCall(taskTemplateGid, optPretty, _callback);

    }


    private ApiResponse<TaskTemplatesDeleteTaskTemplateResponse> deleteTaskTemplateWithHttpInfo(String taskTemplateGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskTemplateValidateBeforeCall(taskTemplateGid, optPretty, null);
        Type localVarReturnType = new TypeToken<TaskTemplatesDeleteTaskTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTaskTemplateAsync(String taskTemplateGid, Boolean optPretty, final ApiCallback<TaskTemplatesDeleteTaskTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskTemplateValidateBeforeCall(taskTemplateGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TaskTemplatesDeleteTaskTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTaskTemplateRequestBuilder {
        private final String taskTemplateGid;
        private Boolean optPretty;

        private DeleteTaskTemplateRequestBuilder(String taskTemplateGid) {
            this.taskTemplateGid = taskTemplateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteTaskTemplateRequestBuilder
         */
        public DeleteTaskTemplateRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteTaskTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTaskTemplateCall(taskTemplateGid, optPretty, _callback);
        }


        /**
         * Execute deleteTaskTemplate request
         * @return TaskTemplatesDeleteTaskTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task template. </td><td>  -  </td></tr>
         </table>
         */
        public TaskTemplatesDeleteTaskTemplateResponse execute() throws ApiException {
            ApiResponse<TaskTemplatesDeleteTaskTemplateResponse> localVarResp = deleteTaskTemplateWithHttpInfo(taskTemplateGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTaskTemplate request with HTTP info returned
         * @return ApiResponse&lt;TaskTemplatesDeleteTaskTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task template. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskTemplatesDeleteTaskTemplateResponse> executeWithHttpInfo() throws ApiException {
            return deleteTaskTemplateWithHttpInfo(taskTemplateGid, optPretty);
        }

        /**
         * Execute deleteTaskTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskTemplatesDeleteTaskTemplateResponse> _callback) throws ApiException {
            return deleteTaskTemplateAsync(taskTemplateGid, optPretty, _callback);
        }
    }

    /**
     * Delete a task template
     * A specific, existing task template can be deleted by making a DELETE request on the URL for that task template. Returns an empty data record.
     * @param taskTemplateGid Globally unique identifier for the task template. (required)
     * @return DeleteTaskTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task template. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskTemplateRequestBuilder deleteTaskTemplate(String taskTemplateGid) throws IllegalArgumentException {
        if (taskTemplateGid == null) throw new IllegalArgumentException("\"taskTemplateGid\" is required but got null");
            

        return new DeleteTaskTemplateRequestBuilder(taskTemplateGid);
    }
    private okhttp3.Call getSingleTemplateCall(String taskTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_templates/{task_template_gid}"
            .replace("{" + "task_template_gid" + "}", localVarApiClient.escapeString(taskTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTemplateValidateBeforeCall(String taskTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskTemplateGid' is set
        if (taskTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'taskTemplateGid' when calling getSingleTemplate(Async)");
        }

        return getSingleTemplateCall(taskTemplateGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TaskTemplatesGetSingleTemplateResponse> getSingleTemplateWithHttpInfo(String taskTemplateGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getSingleTemplateValidateBeforeCall(taskTemplateGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TaskTemplatesGetSingleTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleTemplateAsync(String taskTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback<TaskTemplatesGetSingleTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTemplateValidateBeforeCall(taskTemplateGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TaskTemplatesGetSingleTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleTemplateRequestBuilder {
        private final String taskTemplateGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetSingleTemplateRequestBuilder(String taskTemplateGid) {
            this.taskTemplateGid = taskTemplateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetSingleTemplateRequestBuilder
         */
        public GetSingleTemplateRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetSingleTemplateRequestBuilder
         */
        public GetSingleTemplateRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getSingleTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleTemplateCall(taskTemplateGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getSingleTemplate request
         * @return TaskTemplatesGetSingleTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task template </td><td>  -  </td></tr>
         </table>
         */
        public TaskTemplatesGetSingleTemplateResponse execute() throws ApiException {
            ApiResponse<TaskTemplatesGetSingleTemplateResponse> localVarResp = getSingleTemplateWithHttpInfo(taskTemplateGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleTemplate request with HTTP info returned
         * @return ApiResponse&lt;TaskTemplatesGetSingleTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskTemplatesGetSingleTemplateResponse> executeWithHttpInfo() throws ApiException {
            return getSingleTemplateWithHttpInfo(taskTemplateGid, optPretty, optFields);
        }

        /**
         * Execute getSingleTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskTemplatesGetSingleTemplateResponse> _callback) throws ApiException {
            return getSingleTemplateAsync(taskTemplateGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a task template
     * Returns the complete task template record for a single task template.
     * @param taskTemplateGid Globally unique identifier for the task template. (required)
     * @return GetSingleTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested task template </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleTemplateRequestBuilder getSingleTemplate(String taskTemplateGid) throws IllegalArgumentException {
        if (taskTemplateGid == null) throw new IllegalArgumentException("\"taskTemplateGid\" is required but got null");
            

        return new GetSingleTemplateRequestBuilder(taskTemplateGid);
    }
    private okhttp3.Call instantiateTaskJobCall(String taskTemplateGid, Boolean optPretty, List<String> optFields, TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskTemplatesInstantiateTaskJobRequest;

        // create path and map variables
        String localVarPath = "/task_templates/{task_template_gid}/instantiateTask"
            .replace("{" + "task_template_gid" + "}", localVarApiClient.escapeString(taskTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instantiateTaskJobValidateBeforeCall(String taskTemplateGid, Boolean optPretty, List<String> optFields, TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskTemplateGid' is set
        if (taskTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'taskTemplateGid' when calling instantiateTaskJob(Async)");
        }

        return instantiateTaskJobCall(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest, _callback);

    }


    private ApiResponse<TaskTemplatesInstantiateTaskJobResponse> instantiateTaskJobWithHttpInfo(String taskTemplateGid, Boolean optPretty, List<String> optFields, TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest) throws ApiException {
        okhttp3.Call localVarCall = instantiateTaskJobValidateBeforeCall(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest, null);
        Type localVarReturnType = new TypeToken<TaskTemplatesInstantiateTaskJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call instantiateTaskJobAsync(String taskTemplateGid, Boolean optPretty, List<String> optFields, TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest, final ApiCallback<TaskTemplatesInstantiateTaskJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instantiateTaskJobValidateBeforeCall(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest, _callback);
        Type localVarReturnType = new TypeToken<TaskTemplatesInstantiateTaskJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InstantiateTaskJobRequestBuilder {
        private final String taskTemplateGid;
        private TaskTemplateInstantiateTaskRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private InstantiateTaskJobRequestBuilder(String taskTemplateGid) {
            this.taskTemplateGid = taskTemplateGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return InstantiateTaskJobRequestBuilder
         */
        public InstantiateTaskJobRequestBuilder data(TaskTemplateInstantiateTaskRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return InstantiateTaskJobRequestBuilder
         */
        public InstantiateTaskJobRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return InstantiateTaskJobRequestBuilder
         */
        public InstantiateTaskJobRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for instantiateTaskJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle task instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest = buildBodyParams();
            return instantiateTaskJobCall(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest, _callback);
        }

        private TaskTemplatesInstantiateTaskJobRequest buildBodyParams() {
            TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest = new TaskTemplatesInstantiateTaskJobRequest();
            taskTemplatesInstantiateTaskJobRequest.data(this.data);
            return taskTemplatesInstantiateTaskJobRequest;
        }

        /**
         * Execute instantiateTaskJob request
         * @return TaskTemplatesInstantiateTaskJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle task instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public TaskTemplatesInstantiateTaskJobResponse execute() throws ApiException {
            TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest = buildBodyParams();
            ApiResponse<TaskTemplatesInstantiateTaskJobResponse> localVarResp = instantiateTaskJobWithHttpInfo(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute instantiateTaskJob request with HTTP info returned
         * @return ApiResponse&lt;TaskTemplatesInstantiateTaskJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle task instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskTemplatesInstantiateTaskJobResponse> executeWithHttpInfo() throws ApiException {
            TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest = buildBodyParams();
            return instantiateTaskJobWithHttpInfo(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest);
        }

        /**
         * Execute instantiateTaskJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle task instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskTemplatesInstantiateTaskJobResponse> _callback) throws ApiException {
            TaskTemplatesInstantiateTaskJobRequest taskTemplatesInstantiateTaskJobRequest = buildBodyParams();
            return instantiateTaskJobAsync(taskTemplateGid, optPretty, optFields, taskTemplatesInstantiateTaskJobRequest, _callback);
        }
    }

    /**
     * Instantiate a task from a task template
     * Creates and returns a job that will asynchronously handle the task instantiation.
     * @param taskTemplateGid Globally unique identifier for the task template. (required)
     * @return InstantiateTaskJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle task instantiation. </td><td>  -  </td></tr>
     </table>
     */
    public InstantiateTaskJobRequestBuilder instantiateTaskJob(String taskTemplateGid) throws IllegalArgumentException {
        if (taskTemplateGid == null) throw new IllegalArgumentException("\"taskTemplateGid\" is required but got null");
            

        return new InstantiateTaskJobRequestBuilder(taskTemplateGid);
    }
    private okhttp3.Call listMultipleCall(Boolean optPretty, Integer limit, String offset, String project, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleValidateBeforeCall(Boolean optPretty, Integer limit, String offset, String project, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleCall(optPretty, limit, offset, project, optFields, _callback);

    }


    private ApiResponse<TaskTemplatesListMultipleResponse> listMultipleWithHttpInfo(Boolean optPretty, Integer limit, String offset, String project, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, project, optFields, null);
        Type localVarReturnType = new TypeToken<TaskTemplatesListMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleAsync(Boolean optPretty, Integer limit, String offset, String project, List<String> optFields, final ApiCallback<TaskTemplatesListMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, project, optFields, _callback);
        Type localVarReturnType = new TypeToken<TaskTemplatesListMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String project;
        private List<String> optFields;

        private ListMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set project
         * @param project The project to filter task templates on. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleCall(optPretty, limit, offset, project, optFields, _callback);
        }


        /**
         * Execute listMultiple request
         * @return TaskTemplatesListMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task templates </td><td>  -  </td></tr>
         </table>
         */
        public TaskTemplatesListMultipleResponse execute() throws ApiException {
            ApiResponse<TaskTemplatesListMultipleResponse> localVarResp = listMultipleWithHttpInfo(optPretty, limit, offset, project, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultiple request with HTTP info returned
         * @return ApiResponse&lt;TaskTemplatesListMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task templates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskTemplatesListMultipleResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleWithHttpInfo(optPretty, limit, offset, project, optFields);
        }

        /**
         * Execute listMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested task templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskTemplatesListMultipleResponse> _callback) throws ApiException {
            return listMultipleAsync(optPretty, limit, offset, project, optFields, _callback);
        }
    }

    /**
     * Get multiple task templates
     * Returns the compact task template records for some filtered set of task templates. You must specify a &#x60;project&#x60;
     * @return ListMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested task templates </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleRequestBuilder listMultiple() throws IllegalArgumentException {
        return new ListMultipleRequestBuilder();
    }
}
