/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddCustomFieldSettingRequest;
import com.konfigthis.client.model.AddMembersRequest;
import com.konfigthis.client.model.PortfolioAddItemRequest;
import com.konfigthis.client.model.PortfolioRemoveItemRequest;
import com.konfigthis.client.model.PortfolioRequest;
import com.konfigthis.client.model.PortfoliosAddCustomFieldSettingRequest;
import com.konfigthis.client.model.PortfoliosAddCustomFieldSettingResponse;
import com.konfigthis.client.model.PortfoliosAddMembersToPortfolioRequest;
import com.konfigthis.client.model.PortfoliosAddMembersToPortfolioResponse;
import com.konfigthis.client.model.PortfoliosAddPortfolioItemRequest;
import com.konfigthis.client.model.PortfoliosAddPortfolioItemResponse;
import com.konfigthis.client.model.PortfoliosCreateNewPortfolioRecordRequest;
import com.konfigthis.client.model.PortfoliosCreateNewPortfolioRecordResponse;
import com.konfigthis.client.model.PortfoliosDeleteRecordResponse;
import com.konfigthis.client.model.PortfoliosGetItemsResponse;
import com.konfigthis.client.model.PortfoliosGetRecordResponse;
import com.konfigthis.client.model.PortfoliosListMultiplePortfoliosResponse;
import com.konfigthis.client.model.PortfoliosRemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.PortfoliosRemoveCustomFieldSettingResponse;
import com.konfigthis.client.model.PortfoliosRemoveItemFromPortfolioRequest;
import com.konfigthis.client.model.PortfoliosRemoveItemFromPortfolioResponse;
import com.konfigthis.client.model.PortfoliosRemoveMembersFromPortfolioRequest;
import com.konfigthis.client.model.PortfoliosRemoveMembersFromPortfolioResponse;
import com.konfigthis.client.model.PortfoliosUpdatePortfolioRecordRequest;
import com.konfigthis.client.model.PortfoliosUpdatePortfolioRecordResponse;
import com.konfigthis.client.model.RemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.RemoveMembersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfoliosApi
 */
@Disabled
public class PortfoliosApiTest {

    private static PortfoliosApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PortfoliosApi(apiClient);
    }

    /**
     * Add a custom field to a portfolio
     *
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCustomFieldSettingTest() throws ApiException {
        String portfolioGid = null;
        AddCustomFieldSettingRequest data = null;
        Boolean optPretty = null;
        PortfoliosAddCustomFieldSettingResponse response = api.addCustomFieldSetting(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Add users to a portfolio
     *
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersToPortfolioTest() throws ApiException {
        String portfolioGid = null;
        AddMembersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        PortfoliosAddMembersToPortfolioResponse response = api.addMembersToPortfolio(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a portfolio item
     *
     * Add an item to a portfolio. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPortfolioItemTest() throws ApiException {
        String portfolioGid = null;
        PortfolioAddItemRequest data = null;
        Boolean optPretty = null;
        PortfoliosAddPortfolioItemResponse response = api.addPortfolioItem(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a portfolio
     *
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPortfolioRecordTest() throws ApiException {
        PortfolioRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        PortfoliosCreateNewPortfolioRecordResponse response = api.createNewPortfolioRecord()
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a portfolio
     *
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        PortfoliosDeleteRecordResponse response = api.deleteRecord(portfolioGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Get portfolio items
     *
     * Get a list of the items in compact form in a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        PortfoliosGetItemsResponse response = api.getItems(portfolioGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a portfolio
     *
     * Returns the complete portfolio record for a single portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        PortfoliosGetRecordResponse response = api.getRecord(portfolioGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple portfolios
     *
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultiplePortfoliosTest() throws ApiException {
        String workspace = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        String owner = null;
        List<String> optFields = null;
        PortfoliosListMultiplePortfoliosResponse response = api.listMultiplePortfolios(workspace)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .owner(owner)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a custom field from a portfolio
     *
     * Removes a custom field setting from a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCustomFieldSettingTest() throws ApiException {
        String portfolioGid = null;
        RemoveCustomFieldSettingRequest data = null;
        Boolean optPretty = null;
        PortfoliosRemoveCustomFieldSettingResponse response = api.removeCustomFieldSetting(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a portfolio item
     *
     * Remove an item from a portfolio. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeItemFromPortfolioTest() throws ApiException {
        String portfolioGid = null;
        PortfolioRemoveItemRequest data = null;
        Boolean optPretty = null;
        PortfoliosRemoveItemFromPortfolioResponse response = api.removeItemFromPortfolio(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove users from a portfolio
     *
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMembersFromPortfolioTest() throws ApiException {
        String portfolioGid = null;
        RemoveMembersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        PortfoliosRemoveMembersFromPortfolioResponse response = api.removeMembersFromPortfolio(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a portfolio
     *
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePortfolioRecordTest() throws ApiException {
        String portfolioGid = null;
        PortfolioRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        PortfoliosUpdatePortfolioRecordResponse response = api.updatePortfolioRecord(portfolioGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
