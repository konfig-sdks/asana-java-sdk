/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchApiSubmitParallelRequestsRequest;
import com.konfigthis.client.model.BatchApiSubmitParallelRequestsResponse;
import com.konfigthis.client.model.BatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call submitParallelRequestsCall(BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchApiSubmitParallelRequestsRequest;

        // create path and map variables
        String localVarPath = "/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitParallelRequestsValidateBeforeCall(BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchApiSubmitParallelRequestsRequest' is set
        if (batchApiSubmitParallelRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchApiSubmitParallelRequestsRequest' when calling submitParallelRequests(Async)");
        }

        return submitParallelRequestsCall(batchApiSubmitParallelRequestsRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<BatchApiSubmitParallelRequestsResponse> submitParallelRequestsWithHttpInfo(BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = submitParallelRequestsValidateBeforeCall(batchApiSubmitParallelRequestsRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<BatchApiSubmitParallelRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitParallelRequestsAsync(BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest, Boolean optPretty, List<String> optFields, final ApiCallback<BatchApiSubmitParallelRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitParallelRequestsValidateBeforeCall(batchApiSubmitParallelRequestsRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<BatchApiSubmitParallelRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitParallelRequestsRequestBuilder {
        private BatchRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private SubmitParallelRequestsRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return SubmitParallelRequestsRequestBuilder
         */
        public SubmitParallelRequestsRequestBuilder data(BatchRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return SubmitParallelRequestsRequestBuilder
         */
        public SubmitParallelRequestsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return SubmitParallelRequestsRequestBuilder
         */
        public SubmitParallelRequestsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for submitParallelRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully completed the requested batch API operations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest = buildBodyParams();
            return submitParallelRequestsCall(batchApiSubmitParallelRequestsRequest, optPretty, optFields, _callback);
        }

        private BatchApiSubmitParallelRequestsRequest buildBodyParams() {
            BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest = new BatchApiSubmitParallelRequestsRequest();
            batchApiSubmitParallelRequestsRequest.data(this.data);
            return batchApiSubmitParallelRequestsRequest;
        }

        /**
         * Execute submitParallelRequests request
         * @return BatchApiSubmitParallelRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully completed the requested batch API operations. </td><td>  -  </td></tr>
         </table>
         */
        public BatchApiSubmitParallelRequestsResponse execute() throws ApiException {
            BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest = buildBodyParams();
            ApiResponse<BatchApiSubmitParallelRequestsResponse> localVarResp = submitParallelRequestsWithHttpInfo(batchApiSubmitParallelRequestsRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitParallelRequests request with HTTP info returned
         * @return ApiResponse&lt;BatchApiSubmitParallelRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully completed the requested batch API operations. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BatchApiSubmitParallelRequestsResponse> executeWithHttpInfo() throws ApiException {
            BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest = buildBodyParams();
            return submitParallelRequestsWithHttpInfo(batchApiSubmitParallelRequestsRequest, optPretty, optFields);
        }

        /**
         * Execute submitParallelRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully completed the requested batch API operations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BatchApiSubmitParallelRequestsResponse> _callback) throws ApiException {
            BatchApiSubmitParallelRequestsRequest batchApiSubmitParallelRequestsRequest = buildBodyParams();
            return submitParallelRequestsAsync(batchApiSubmitParallelRequestsRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Submit parallel requests
     * Make multiple requests in parallel to Asana&#39;s API.
     * @param batchApiSubmitParallelRequestsRequest The requests to batch together via the Batch API. (required)
     * @return SubmitParallelRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully completed the requested batch API operations. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitParallelRequestsRequestBuilder submitParallelRequests() throws IllegalArgumentException {
        return new SubmitParallelRequestsRequestBuilder();
    }
}
