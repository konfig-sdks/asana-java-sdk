/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.StoriesCreateCommentRequest;
import com.konfigthis.client.model.StoriesCreateCommentResponse;
import com.konfigthis.client.model.StoriesDeleteStoryRecordResponse;
import com.konfigthis.client.model.StoriesGetFullRecordResponse;
import com.konfigthis.client.model.StoriesGetTaskStoriesResponse;
import com.konfigthis.client.model.StoriesUpdateFullRecordRequest;
import com.konfigthis.client.model.StoriesUpdateFullRecordResponse;
import com.konfigthis.client.model.StoryBase;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoriesApi
 */
@Disabled
public class StoriesApiTest {

    private static StoriesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new StoriesApi(apiClient);
    }

    /**
     * Create a story on a task
     *
     * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        String taskGid = null;
        StoryBase data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        StoriesCreateCommentResponse response = api.createComment(taskGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a story
     *
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStoryRecordTest() throws ApiException {
        String storyGid = null;
        Boolean optPretty = null;
        StoriesDeleteStoryRecordResponse response = api.deleteStoryRecord(storyGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a story
     *
     * Returns the full record for a single story.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFullRecordTest() throws ApiException {
        String storyGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        StoriesGetFullRecordResponse response = api.getFullRecord(storyGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get stories from a task
     *
     * Returns the compact records for all stories on the task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskStoriesTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        StoriesGetTaskStoriesResponse response = api.getTaskStories(taskGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a story
     *
     * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of &#x60;text&#x60; and &#x60;html_text&#x60; can be specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFullRecordTest() throws ApiException {
        String storyGid = null;
        StoryBase data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        StoriesUpdateFullRecordResponse response = api.updateFullRecord(storyGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
