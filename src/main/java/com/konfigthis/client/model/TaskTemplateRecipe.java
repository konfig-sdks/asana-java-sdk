/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AttachmentCompact;
import com.konfigthis.client.model.CustomFieldCompact;
import com.konfigthis.client.model.ProjectCompact;
import com.konfigthis.client.model.TaskTemplateRecipeCompact;
import com.konfigthis.client.model.UserCompact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TaskTemplateRecipe
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaskTemplateRecipe {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The subtype of the task that will be created from this template.
   */
  @JsonAdapter(TaskResourceSubtypeEnum.Adapter.class)
 public enum TaskResourceSubtypeEnum {
    DEFAULT_TASK("default_task"),
    
    MILESTONE_TASK("milestone_task"),
    
    APPROVAL_TASK("approval_task");

    private String value;

    TaskResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaskResourceSubtypeEnum fromValue(String value) {
      for (TaskResourceSubtypeEnum b : TaskResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaskResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaskResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaskResourceSubtypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TASK_RESOURCE_SUBTYPE = "task_resource_subtype";
  @SerializedName(SERIALIZED_NAME_TASK_RESOURCE_SUBTYPE)
  private TaskResourceSubtypeEnum taskResourceSubtype;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HTML_DESCRIPTION = "html_description";
  @SerializedName(SERIALIZED_NAME_HTML_DESCRIPTION)
  private String htmlDescription;

  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private List<ProjectCompact> memberships = null;

  public static final String SERIALIZED_NAME_RELATIVE_START_ON = "relative_start_on";
  @SerializedName(SERIALIZED_NAME_RELATIVE_START_ON)
  private Integer relativeStartOn;

  public static final String SERIALIZED_NAME_RELATIVE_DUE_ON = "relative_due_on";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DUE_ON)
  private Integer relativeDueOn;

  public static final String SERIALIZED_NAME_DUE_TIME = "due_time";
  @SerializedName(SERIALIZED_NAME_DUE_TIME)
  private String dueTime;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<TaskTemplateRecipeCompact> dependencies = null;

  public static final String SERIALIZED_NAME_DEPENDENTS = "dependents";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS)
  private List<TaskTemplateRecipeCompact> dependents = null;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private List<UserCompact> followers = null;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentCompact> attachments = null;

  public static final String SERIALIZED_NAME_SUBTASKS = "subtasks";
  @SerializedName(SERIALIZED_NAME_SUBTASKS)
  private List<TaskTemplateRecipeCompact> subtasks = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFieldCompact> customFields = null;

  public TaskTemplateRecipe() {
  }

  public TaskTemplateRecipe name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the task that will be created from this template.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bug Report", value = "Name of the task that will be created from this template.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TaskTemplateRecipe taskResourceSubtype(TaskResourceSubtypeEnum taskResourceSubtype) {
    
    
    
    
    this.taskResourceSubtype = taskResourceSubtype;
    return this;
  }

   /**
   * The subtype of the task that will be created from this template.
   * @return taskResourceSubtype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DEFAULT_TASK", value = "The subtype of the task that will be created from this template.")

  public TaskResourceSubtypeEnum getTaskResourceSubtype() {
    return taskResourceSubtype;
  }


  public void setTaskResourceSubtype(TaskResourceSubtypeEnum taskResourceSubtype) {
    
    
    
    this.taskResourceSubtype = taskResourceSubtype;
  }


  public TaskTemplateRecipe description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the task that will be created from this template.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Please describe the bug you found and how to reproduce it.", value = "Description of the task that will be created from this template.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TaskTemplateRecipe htmlDescription(String htmlDescription) {
    
    
    
    
    this.htmlDescription = htmlDescription;
    return this;
  }

   /**
   * HTML description of the task that will be created from this template.
   * @return htmlDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Please describe the bug you found and how to reproduce it.", value = "HTML description of the task that will be created from this template.")

  public String getHtmlDescription() {
    return htmlDescription;
  }


  public void setHtmlDescription(String htmlDescription) {
    
    
    
    this.htmlDescription = htmlDescription;
  }


  public TaskTemplateRecipe memberships(List<ProjectCompact> memberships) {
    
    
    
    
    this.memberships = memberships;
    return this;
  }

  public TaskTemplateRecipe addMembershipsItem(ProjectCompact membershipsItem) {
    if (this.memberships == null) {
      this.memberships = new ArrayList<>();
    }
    this.memberships.add(membershipsItem);
    return this;
  }

   /**
   * Array of projects that the task created from this template will be added to
   * @return memberships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of projects that the task created from this template will be added to")

  public List<ProjectCompact> getMemberships() {
    return memberships;
  }


  public void setMemberships(List<ProjectCompact> memberships) {
    
    
    
    this.memberships = memberships;
  }


  public TaskTemplateRecipe relativeStartOn(Integer relativeStartOn) {
    
    
    
    
    this.relativeStartOn = relativeStartOn;
    return this;
  }

   /**
   * The number of days after the task has been instantiated on which that the task will start
   * @return relativeStartOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The number of days after the task has been instantiated on which that the task will start")

  public Integer getRelativeStartOn() {
    return relativeStartOn;
  }


  public void setRelativeStartOn(Integer relativeStartOn) {
    
    
    
    this.relativeStartOn = relativeStartOn;
  }


  public TaskTemplateRecipe relativeDueOn(Integer relativeDueOn) {
    
    
    
    
    this.relativeDueOn = relativeDueOn;
    return this;
  }

   /**
   * The number of days after the task has been instantiated on which that the task will be due
   * @return relativeDueOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The number of days after the task has been instantiated on which that the task will be due")

  public Integer getRelativeDueOn() {
    return relativeDueOn;
  }


  public void setRelativeDueOn(Integer relativeDueOn) {
    
    
    
    this.relativeDueOn = relativeDueOn;
  }


  public TaskTemplateRecipe dueTime(String dueTime) {
    
    
    
    
    this.dueTime = dueTime;
    return this;
  }

   /**
   * The time of day that the task will be due
   * @return dueTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13:15:00.000Z", value = "The time of day that the task will be due")

  public String getDueTime() {
    return dueTime;
  }


  public void setDueTime(String dueTime) {
    
    
    
    this.dueTime = dueTime;
  }


  public TaskTemplateRecipe dependencies(List<TaskTemplateRecipeCompact> dependencies) {
    
    
    
    
    this.dependencies = dependencies;
    return this;
  }

  public TaskTemplateRecipe addDependenciesItem(TaskTemplateRecipeCompact dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Array of task templates that the task created from this template will depend on
   * @return dependencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of task templates that the task created from this template will depend on")

  public List<TaskTemplateRecipeCompact> getDependencies() {
    return dependencies;
  }


  public void setDependencies(List<TaskTemplateRecipeCompact> dependencies) {
    
    
    
    this.dependencies = dependencies;
  }


  public TaskTemplateRecipe dependents(List<TaskTemplateRecipeCompact> dependents) {
    
    
    
    
    this.dependents = dependents;
    return this;
  }

  public TaskTemplateRecipe addDependentsItem(TaskTemplateRecipeCompact dependentsItem) {
    if (this.dependents == null) {
      this.dependents = new ArrayList<>();
    }
    this.dependents.add(dependentsItem);
    return this;
  }

   /**
   * Array of task templates that will depend on the task created from this template
   * @return dependents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of task templates that will depend on the task created from this template")

  public List<TaskTemplateRecipeCompact> getDependents() {
    return dependents;
  }


  public void setDependents(List<TaskTemplateRecipeCompact> dependents) {
    
    
    
    this.dependents = dependents;
  }


  public TaskTemplateRecipe followers(List<UserCompact> followers) {
    
    
    
    
    this.followers = followers;
    return this;
  }

  public TaskTemplateRecipe addFollowersItem(UserCompact followersItem) {
    if (this.followers == null) {
      this.followers = new ArrayList<>();
    }
    this.followers.add(followersItem);
    return this;
  }

   /**
   * Array of users that will be added as followers to the task created from this template
   * @return followers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of users that will be added as followers to the task created from this template")

  public List<UserCompact> getFollowers() {
    return followers;
  }


  public void setFollowers(List<UserCompact> followers) {
    
    
    
    this.followers = followers;
  }


  public TaskTemplateRecipe attachments(List<AttachmentCompact> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public TaskTemplateRecipe addAttachmentsItem(AttachmentCompact attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Array of attachments that will be added to the task created from this template
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of attachments that will be added to the task created from this template")

  public List<AttachmentCompact> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<AttachmentCompact> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public TaskTemplateRecipe subtasks(List<TaskTemplateRecipeCompact> subtasks) {
    
    
    
    
    this.subtasks = subtasks;
    return this;
  }

  public TaskTemplateRecipe addSubtasksItem(TaskTemplateRecipeCompact subtasksItem) {
    if (this.subtasks == null) {
      this.subtasks = new ArrayList<>();
    }
    this.subtasks.add(subtasksItem);
    return this;
  }

   /**
   * Array of subtasks that will be added to the task created from this template
   * @return subtasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of subtasks that will be added to the task created from this template")

  public List<TaskTemplateRecipeCompact> getSubtasks() {
    return subtasks;
  }


  public void setSubtasks(List<TaskTemplateRecipeCompact> subtasks) {
    
    
    
    this.subtasks = subtasks;
  }


  public TaskTemplateRecipe customFields(List<CustomFieldCompact> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public TaskTemplateRecipe addCustomFieldsItem(CustomFieldCompact customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Array of custom fields that will be added to the task created from this template
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of custom fields that will be added to the task created from this template")

  public List<CustomFieldCompact> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<CustomFieldCompact> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaskTemplateRecipe instance itself
   */
  public TaskTemplateRecipe putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskTemplateRecipe taskTemplateRecipe = (TaskTemplateRecipe) o;
    return Objects.equals(this.name, taskTemplateRecipe.name) &&
        Objects.equals(this.taskResourceSubtype, taskTemplateRecipe.taskResourceSubtype) &&
        Objects.equals(this.description, taskTemplateRecipe.description) &&
        Objects.equals(this.htmlDescription, taskTemplateRecipe.htmlDescription) &&
        Objects.equals(this.memberships, taskTemplateRecipe.memberships) &&
        Objects.equals(this.relativeStartOn, taskTemplateRecipe.relativeStartOn) &&
        Objects.equals(this.relativeDueOn, taskTemplateRecipe.relativeDueOn) &&
        Objects.equals(this.dueTime, taskTemplateRecipe.dueTime) &&
        Objects.equals(this.dependencies, taskTemplateRecipe.dependencies) &&
        Objects.equals(this.dependents, taskTemplateRecipe.dependents) &&
        Objects.equals(this.followers, taskTemplateRecipe.followers) &&
        Objects.equals(this.attachments, taskTemplateRecipe.attachments) &&
        Objects.equals(this.subtasks, taskTemplateRecipe.subtasks) &&
        Objects.equals(this.customFields, taskTemplateRecipe.customFields)&&
        Objects.equals(this.additionalProperties, taskTemplateRecipe.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, taskResourceSubtype, description, htmlDescription, memberships, relativeStartOn, relativeDueOn, dueTime, dependencies, dependents, followers, attachments, subtasks, customFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskTemplateRecipe {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taskResourceSubtype: ").append(toIndentedString(taskResourceSubtype)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    htmlDescription: ").append(toIndentedString(htmlDescription)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    relativeStartOn: ").append(toIndentedString(relativeStartOn)).append("\n");
    sb.append("    relativeDueOn: ").append(toIndentedString(relativeDueOn)).append("\n");
    sb.append("    dueTime: ").append(toIndentedString(dueTime)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    dependents: ").append(toIndentedString(dependents)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    subtasks: ").append(toIndentedString(subtasks)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("task_resource_subtype");
    openapiFields.add("description");
    openapiFields.add("html_description");
    openapiFields.add("memberships");
    openapiFields.add("relative_start_on");
    openapiFields.add("relative_due_on");
    openapiFields.add("due_time");
    openapiFields.add("dependencies");
    openapiFields.add("dependents");
    openapiFields.add("followers");
    openapiFields.add("attachments");
    openapiFields.add("subtasks");
    openapiFields.add("custom_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskTemplateRecipe
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaskTemplateRecipe.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskTemplateRecipe is not found in the empty JSON string", TaskTemplateRecipe.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("task_resource_subtype") != null && !jsonObj.get("task_resource_subtype").isJsonNull()) && !jsonObj.get("task_resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_resource_subtype").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("html_description") != null && !jsonObj.get("html_description").isJsonNull()) && !jsonObj.get("html_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_description").toString()));
      }
      if (jsonObj.get("memberships") != null && !jsonObj.get("memberships").isJsonNull()) {
        JsonArray jsonArraymemberships = jsonObj.getAsJsonArray("memberships");
        if (jsonArraymemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memberships` to be an array in the JSON string but got `%s`", jsonObj.get("memberships").toString()));
          }

          // validate the optional field `memberships` (array)
          for (int i = 0; i < jsonArraymemberships.size(); i++) {
            ProjectCompact.validateJsonObject(jsonArraymemberships.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("due_time").isJsonNull() && (jsonObj.get("due_time") != null && !jsonObj.get("due_time").isJsonNull()) && !jsonObj.get("due_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_time").toString()));
      }
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            TaskTemplateRecipeCompact.validateJsonObject(jsonArraydependencies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dependents") != null && !jsonObj.get("dependents").isJsonNull()) {
        JsonArray jsonArraydependents = jsonObj.getAsJsonArray("dependents");
        if (jsonArraydependents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependents` to be an array in the JSON string but got `%s`", jsonObj.get("dependents").toString()));
          }

          // validate the optional field `dependents` (array)
          for (int i = 0; i < jsonArraydependents.size(); i++) {
            TaskTemplateRecipeCompact.validateJsonObject(jsonArraydependents.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("followers") != null && !jsonObj.get("followers").isJsonNull()) {
        JsonArray jsonArrayfollowers = jsonObj.getAsJsonArray("followers");
        if (jsonArrayfollowers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("followers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `followers` to be an array in the JSON string but got `%s`", jsonObj.get("followers").toString()));
          }

          // validate the optional field `followers` (array)
          for (int i = 0; i < jsonArrayfollowers.size(); i++) {
            UserCompact.validateJsonObject(jsonArrayfollowers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentCompact.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("subtasks") != null && !jsonObj.get("subtasks").isJsonNull()) {
        JsonArray jsonArraysubtasks = jsonObj.getAsJsonArray("subtasks");
        if (jsonArraysubtasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subtasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subtasks` to be an array in the JSON string but got `%s`", jsonObj.get("subtasks").toString()));
          }

          // validate the optional field `subtasks` (array)
          for (int i = 0; i < jsonArraysubtasks.size(); i++) {
            TaskTemplateRecipeCompact.validateJsonObject(jsonArraysubtasks.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFieldCompact.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskTemplateRecipe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskTemplateRecipe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskTemplateRecipe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskTemplateRecipe.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskTemplateRecipe>() {
           @Override
           public void write(JsonWriter out, TaskTemplateRecipe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskTemplateRecipe read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaskTemplateRecipe instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskTemplateRecipe given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskTemplateRecipe
  * @throws IOException if the JSON string is invalid with respect to TaskTemplateRecipe
  */
  public static TaskTemplateRecipe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskTemplateRecipe.class);
  }

 /**
  * Convert an instance of TaskTemplateRecipe to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

