/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PortfolioMembershipsGetCompactResponse;
import com.konfigthis.client.model.PortfolioMembershipsGetCompleteRecordResponse;
import com.konfigthis.client.model.PortfolioMembershipsListMultipleMembershipsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PortfolioMembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfolioMembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioMembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCompactCall(String portfolioGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/portfolio_memberships"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactValidateBeforeCall(String portfolioGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling getCompact(Async)");
        }

        return getCompactCall(portfolioGid, user, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<PortfolioMembershipsGetCompactResponse> getCompactWithHttpInfo(String portfolioGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactValidateBeforeCall(portfolioGid, user, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsGetCompactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactAsync(String portfolioGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<PortfolioMembershipsGetCompactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactValidateBeforeCall(portfolioGid, user, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsGetCompactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRequestBuilder {
        private final String portfolioGid;
        private String user;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetCompactRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set user
         * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactCall(portfolioGid, user, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getCompact request
         * @return PortfolioMembershipsGetCompactResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public PortfolioMembershipsGetCompactResponse execute() throws ApiException {
            ApiResponse<PortfolioMembershipsGetCompactResponse> localVarResp = getCompactWithHttpInfo(portfolioGid, user, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompact request with HTTP info returned
         * @return ApiResponse&lt;PortfolioMembershipsGetCompactResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfolioMembershipsGetCompactResponse> executeWithHttpInfo() throws ApiException {
            return getCompactWithHttpInfo(portfolioGid, user, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getCompact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfolioMembershipsGetCompactResponse> _callback) throws ApiException {
            return getCompactAsync(portfolioGid, user, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get memberships from a portfolio
     * Returns the compact portfolio membership records for the portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @return GetCompactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRequestBuilder getCompact(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new GetCompactRequestBuilder(portfolioGid);
    }
    private okhttp3.Call getCompleteRecordCall(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio_memberships/{portfolio_membership_gid}"
            .replace("{" + "portfolio_membership_gid" + "}", localVarApiClient.escapeString(portfolioMembershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompleteRecordValidateBeforeCall(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioMembershipGid' is set
        if (portfolioMembershipGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioMembershipGid' when calling getCompleteRecord(Async)");
        }

        return getCompleteRecordCall(portfolioMembershipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfolioMembershipsGetCompleteRecordResponse> getCompleteRecordWithHttpInfo(String portfolioMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompleteRecordValidateBeforeCall(portfolioMembershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsGetCompleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompleteRecordAsync(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<PortfolioMembershipsGetCompleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompleteRecordValidateBeforeCall(portfolioMembershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsGetCompleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompleteRecordRequestBuilder {
        private final String portfolioMembershipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetCompleteRecordRequestBuilder(String portfolioMembershipGid) {
            this.portfolioMembershipGid = portfolioMembershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompleteRecordRequestBuilder
         */
        public GetCompleteRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompleteRecordRequestBuilder
         */
        public GetCompleteRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompleteRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompleteRecordCall(portfolioMembershipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getCompleteRecord request
         * @return PortfolioMembershipsGetCompleteRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
         </table>
         */
        public PortfolioMembershipsGetCompleteRecordResponse execute() throws ApiException {
            ApiResponse<PortfolioMembershipsGetCompleteRecordResponse> localVarResp = getCompleteRecordWithHttpInfo(portfolioMembershipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompleteRecord request with HTTP info returned
         * @return ApiResponse&lt;PortfolioMembershipsGetCompleteRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfolioMembershipsGetCompleteRecordResponse> executeWithHttpInfo() throws ApiException {
            return getCompleteRecordWithHttpInfo(portfolioMembershipGid, optPretty, optFields);
        }

        /**
         * Execute getCompleteRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfolioMembershipsGetCompleteRecordResponse> _callback) throws ApiException {
            return getCompleteRecordAsync(portfolioMembershipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a portfolio membership
     * Returns the complete portfolio record for a single portfolio membership.
     * @param portfolioMembershipGid  (required)
     * @return GetCompleteRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompleteRecordRequestBuilder getCompleteRecord(String portfolioMembershipGid) throws IllegalArgumentException {
        if (portfolioMembershipGid == null) throw new IllegalArgumentException("\"portfolioMembershipGid\" is required but got null");
            

        return new GetCompleteRecordRequestBuilder(portfolioMembershipGid);
    }
    private okhttp3.Call listMultipleMembershipsCall(String portfolio, String workspace, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio_memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleMembershipsValidateBeforeCall(String portfolio, String workspace, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleMembershipsCall(portfolio, workspace, user, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<PortfolioMembershipsListMultipleMembershipsResponse> listMultipleMembershipsWithHttpInfo(String portfolio, String workspace, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleMembershipsValidateBeforeCall(portfolio, workspace, user, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsListMultipleMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleMembershipsAsync(String portfolio, String workspace, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<PortfolioMembershipsListMultipleMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleMembershipsValidateBeforeCall(portfolio, workspace, user, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfolioMembershipsListMultipleMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleMembershipsRequestBuilder {
        private String portfolio;
        private String workspace;
        private String user;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListMultipleMembershipsRequestBuilder() {
        }

        /**
         * Set portfolio
         * @param portfolio The portfolio to filter results on. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder portfolio(String portfolio) {
            this.portfolio = portfolio;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace The workspace to filter results on. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set user
         * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleMembershipsRequestBuilder
         */
        public ListMultipleMembershipsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultipleMemberships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleMembershipsCall(portfolio, workspace, user, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listMultipleMemberships request
         * @return PortfolioMembershipsListMultipleMembershipsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
         </table>
         */
        public PortfolioMembershipsListMultipleMembershipsResponse execute() throws ApiException {
            ApiResponse<PortfolioMembershipsListMultipleMembershipsResponse> localVarResp = listMultipleMembershipsWithHttpInfo(portfolio, workspace, user, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultipleMemberships request with HTTP info returned
         * @return ApiResponse&lt;PortfolioMembershipsListMultipleMembershipsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfolioMembershipsListMultipleMembershipsResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleMembershipsWithHttpInfo(portfolio, workspace, user, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listMultipleMemberships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfolioMembershipsListMultipleMembershipsResponse> _callback) throws ApiException {
            return listMultipleMembershipsAsync(portfolio, workspace, user, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get multiple portfolio memberships
     * Returns a list of portfolio memberships in compact representation. You must specify &#x60;portfolio&#x60;, &#x60;portfolio&#x60; and &#x60;user&#x60;, or &#x60;workspace&#x60; and &#x60;user&#x60;.
     * @return ListMultipleMembershipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleMembershipsRequestBuilder listMultipleMemberships() throws IllegalArgumentException {
        return new ListMultipleMembershipsRequestBuilder();
    }
}
