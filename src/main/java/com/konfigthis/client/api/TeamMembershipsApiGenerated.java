/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TeamMembershipsGetCompactRecordsResponse;
import com.konfigthis.client.model.TeamMembershipsGetCompactResponse;
import com.konfigthis.client.model.TeamMembershipsGetRecordByIdResponse;
import com.konfigthis.client.model.TeamMembershipsGetUserCompactResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamMembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamMembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamMembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCompactCall(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/team_memberships"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactValidateBeforeCall(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling getCompact(Async)");
        }

        return getCompactCall(teamGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TeamMembershipsGetCompactResponse> getCompactWithHttpInfo(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactValidateBeforeCall(teamGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetCompactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactAsync(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TeamMembershipsGetCompactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactValidateBeforeCall(teamGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetCompactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRequestBuilder {
        private final String teamGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetCompactRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRequestBuilder
         */
        public GetCompactRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactCall(teamGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getCompact request
         * @return TeamMembershipsGetCompactResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public TeamMembershipsGetCompactResponse execute() throws ApiException {
            ApiResponse<TeamMembershipsGetCompactResponse> localVarResp = getCompactWithHttpInfo(teamGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompact request with HTTP info returned
         * @return ApiResponse&lt;TeamMembershipsGetCompactResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamMembershipsGetCompactResponse> executeWithHttpInfo() throws ApiException {
            return getCompactWithHttpInfo(teamGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getCompact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamMembershipsGetCompactResponse> _callback) throws ApiException {
            return getCompactAsync(teamGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get memberships from a team
     * Returns the compact team memberships for the team.
     * @param teamGid Globally unique identifier for the team. (required)
     * @return GetCompactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRequestBuilder getCompact(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new GetCompactRequestBuilder(teamGid);
    }
    private okhttp3.Call getCompactRecordsCall(Boolean optPretty, Integer limit, String offset, String team, String user, String workspace, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team_memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactRecordsValidateBeforeCall(Boolean optPretty, Integer limit, String offset, String team, String user, String workspace, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return getCompactRecordsCall(optPretty, limit, offset, team, user, workspace, optFields, _callback);

    }


    private ApiResponse<TeamMembershipsGetCompactRecordsResponse> getCompactRecordsWithHttpInfo(Boolean optPretty, Integer limit, String offset, String team, String user, String workspace, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(optPretty, limit, offset, team, user, workspace, optFields, null);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetCompactRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactRecordsAsync(Boolean optPretty, Integer limit, String offset, String team, String user, String workspace, List<String> optFields, final ApiCallback<TeamMembershipsGetCompactRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(optPretty, limit, offset, team, user, workspace, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetCompactRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRecordsRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String team;
        private String user;
        private String workspace;
        private List<String> optFields;

        private GetCompactRecordsRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set team
         * @param team Globally unique identifier for the team. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Set user
         * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace Globally unique identifier for the workspace. This parameter must be used with the user parameter. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactRecordsCall(optPretty, limit, offset, team, user, workspace, optFields, _callback);
        }


        /**
         * Execute getCompactRecords request
         * @return TeamMembershipsGetCompactRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team memberships. </td><td>  -  </td></tr>
         </table>
         */
        public TeamMembershipsGetCompactRecordsResponse execute() throws ApiException {
            ApiResponse<TeamMembershipsGetCompactRecordsResponse> localVarResp = getCompactRecordsWithHttpInfo(optPretty, limit, offset, team, user, workspace, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactRecords request with HTTP info returned
         * @return ApiResponse&lt;TeamMembershipsGetCompactRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamMembershipsGetCompactRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactRecordsWithHttpInfo(optPretty, limit, offset, team, user, workspace, optFields);
        }

        /**
         * Execute getCompactRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamMembershipsGetCompactRecordsResponse> _callback) throws ApiException {
            return getCompactRecordsAsync(optPretty, limit, offset, team, user, workspace, optFields, _callback);
        }
    }

    /**
     * Get team memberships
     * Returns compact team membership records.
     * @return GetCompactRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRecordsRequestBuilder getCompactRecords() throws IllegalArgumentException {
        return new GetCompactRecordsRequestBuilder();
    }
    private okhttp3.Call getRecordByIdCall(String teamMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team_memberships/{team_membership_gid}"
            .replace("{" + "team_membership_gid" + "}", localVarApiClient.escapeString(teamMembershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordByIdValidateBeforeCall(String teamMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamMembershipGid' is set
        if (teamMembershipGid == null) {
            throw new ApiException("Missing the required parameter 'teamMembershipGid' when calling getRecordById(Async)");
        }

        return getRecordByIdCall(teamMembershipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TeamMembershipsGetRecordByIdResponse> getRecordByIdWithHttpInfo(String teamMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(teamMembershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetRecordByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordByIdAsync(String teamMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<TeamMembershipsGetRecordByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(teamMembershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetRecordByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordByIdRequestBuilder {
        private final String teamMembershipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordByIdRequestBuilder(String teamMembershipGid) {
            this.teamMembershipGid = teamMembershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecordById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordByIdCall(teamMembershipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecordById request
         * @return TeamMembershipsGetRecordByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team membership. </td><td>  -  </td></tr>
         </table>
         */
        public TeamMembershipsGetRecordByIdResponse execute() throws ApiException {
            ApiResponse<TeamMembershipsGetRecordByIdResponse> localVarResp = getRecordByIdWithHttpInfo(teamMembershipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecordById request with HTTP info returned
         * @return ApiResponse&lt;TeamMembershipsGetRecordByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamMembershipsGetRecordByIdResponse> executeWithHttpInfo() throws ApiException {
            return getRecordByIdWithHttpInfo(teamMembershipGid, optPretty, optFields);
        }

        /**
         * Execute getRecordById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamMembershipsGetRecordByIdResponse> _callback) throws ApiException {
            return getRecordByIdAsync(teamMembershipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a team membership
     * Returns the complete team membership record for a single team membership.
     * @param teamMembershipGid  (required)
     * @return GetRecordByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordByIdRequestBuilder getRecordById(String teamMembershipGid) throws IllegalArgumentException {
        if (teamMembershipGid == null) throw new IllegalArgumentException("\"teamMembershipGid\" is required but got null");
            

        return new GetRecordByIdRequestBuilder(teamMembershipGid);
    }
    private okhttp3.Call getUserCompactCall(String userGid, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_gid}/team_memberships"
            .replace("{" + "user_gid" + "}", localVarApiClient.escapeString(userGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCompactValidateBeforeCall(String userGid, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGid' is set
        if (userGid == null) {
            throw new ApiException("Missing the required parameter 'userGid' when calling getUserCompact(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getUserCompact(Async)");
        }

        return getUserCompactCall(userGid, workspace, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TeamMembershipsGetUserCompactResponse> getUserCompactWithHttpInfo(String userGid, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getUserCompactValidateBeforeCall(userGid, workspace, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetUserCompactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserCompactAsync(String userGid, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TeamMembershipsGetUserCompactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCompactValidateBeforeCall(userGid, workspace, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamMembershipsGetUserCompactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserCompactRequestBuilder {
        private final String userGid;
        private final String workspace;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetUserCompactRequestBuilder(String userGid, String workspace) {
            this.userGid = userGid;
            this.workspace = workspace;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetUserCompactRequestBuilder
         */
        public GetUserCompactRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetUserCompactRequestBuilder
         */
        public GetUserCompactRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetUserCompactRequestBuilder
         */
        public GetUserCompactRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetUserCompactRequestBuilder
         */
        public GetUserCompactRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getUserCompact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested users&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCompactCall(userGid, workspace, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getUserCompact request
         * @return TeamMembershipsGetUserCompactResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested users&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public TeamMembershipsGetUserCompactResponse execute() throws ApiException {
            ApiResponse<TeamMembershipsGetUserCompactResponse> localVarResp = getUserCompactWithHttpInfo(userGid, workspace, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserCompact request with HTTP info returned
         * @return ApiResponse&lt;TeamMembershipsGetUserCompactResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested users&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamMembershipsGetUserCompactResponse> executeWithHttpInfo() throws ApiException {
            return getUserCompactWithHttpInfo(userGid, workspace, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getUserCompact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested users&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamMembershipsGetUserCompactResponse> _callback) throws ApiException {
            return getUserCompactAsync(userGid, workspace, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get memberships from a user
     * Returns the compact team membership records for the user.
     * @param userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (required)
     * @param workspace Globally unique identifier for the workspace. (required)
     * @return GetUserCompactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested users&#39;s memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserCompactRequestBuilder getUserCompact(String userGid, String workspace) throws IllegalArgumentException {
        if (userGid == null) throw new IllegalArgumentException("\"userGid\" is required but got null");
            

        if (workspace == null) throw new IllegalArgumentException("\"workspace\" is required but got null");
            

        return new GetUserCompactRequestBuilder(userGid, workspace);
    }
}
