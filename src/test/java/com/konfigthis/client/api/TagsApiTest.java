/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TagCreateTagForWorkspaceRequest;
import com.konfigthis.client.model.TagRequest;
import com.konfigthis.client.model.TagsCreateNewTagRecordRequest;
import com.konfigthis.client.model.TagsCreateNewTagRecordResponse;
import com.konfigthis.client.model.TagsCreateTagInWorkspaceRequest;
import com.konfigthis.client.model.TagsCreateTagInWorkspaceResponse;
import com.konfigthis.client.model.TagsGetFilteredTagsResponse;
import com.konfigthis.client.model.TagsGetRecordResponse;
import com.konfigthis.client.model.TagsGetTaskTagsResponse;
import com.konfigthis.client.model.TagsListFilteredTagsResponse;
import com.konfigthis.client.model.TagsRemoveTagResponse;
import com.konfigthis.client.model.TagsUpdateTagRecordResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private static TagsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TagsApi(apiClient);
    }

    /**
     * Create a tag
     *
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTagRecordTest() throws ApiException {
        TagRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        TagsCreateNewTagRecordResponse response = api.createNewTagRecord()
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a tag in a workspace
     *
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagInWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        TagCreateTagForWorkspaceRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        TagsCreateTagInWorkspaceResponse response = api.createTagInWorkspace(workspaceGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tags in a workspace
     *
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilteredTagsTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        TagsGetFilteredTagsResponse response = api.getFilteredTags(workspaceGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a tag
     *
     * Returns the complete tag record for a single tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        TagsGetRecordResponse response = api.getRecord(tagGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a task&#39;s tags
     *
     * Get a compact representation of all of the tags the task has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTagsTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        TagsGetTaskTagsResponse response = api.getTaskTags(taskGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple tags
     *
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilteredTagsTest() throws ApiException {
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        String workspace = null;
        List<String> optFields = null;
        TagsListFilteredTagsResponse response = api.listFilteredTags()
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .workspace(workspace)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a tag
     *
     * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        TagsRemoveTagResponse response = api.removeTag(tagGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a tag
     *
     * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagRecordTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        TagsUpdateTagRecordResponse response = api.updateTagRecord(tagGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
