/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AsanaResource;
import com.konfigthis.client.model.Like;
import com.konfigthis.client.model.TaskBaseAllOfExternal;
import com.konfigthis.client.model.TaskBaseAllOfMemberships;
import com.konfigthis.client.model.UserCompact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TaskBaseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TaskBaseAllOf {
  /**
   * *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
   */
  @JsonAdapter(ApprovalStatusEnum.Adapter.class)
 public enum ApprovalStatusEnum {
    PENDING("pending"),
    
    APPROVED("approved"),
    
    REJECTED("rejected"),
    
    CHANGES_REQUESTED("changes_requested");

    private String value;

    ApprovalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalStatusEnum fromValue(String value) {
      for (ApprovalStatusEnum b : ApprovalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_STATUS = "approval_status";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATUS)
  private ApprovalStatusEnum approvalStatus;

  /**
   * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   */
  @JsonAdapter(AssigneeStatusEnum.Adapter.class)
 public enum AssigneeStatusEnum {
    TODAY("today"),
    
    UPCOMING("upcoming"),
    
    LATER("later"),
    
    NEW("new"),
    
    INBOX("inbox");

    private String value;

    AssigneeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeStatusEnum fromValue(String value) {
      for (AssigneeStatusEnum b : AssigneeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_STATUS = "assignee_status";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_STATUS)
  private AssigneeStatusEnum assigneeStatus;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_COMPLETED_BY = "completed_by";
  @SerializedName(SERIALIZED_NAME_COMPLETED_BY)
  private UserCompact completedBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<AsanaResource> dependencies = null;

  public static final String SERIALIZED_NAME_DEPENDENTS = "dependents";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS)
  private List<AsanaResource> dependents = null;

  public static final String SERIALIZED_NAME_DUE_AT = "due_at";
  @SerializedName(SERIALIZED_NAME_DUE_AT)
  private OffsetDateTime dueAt;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private LocalDate dueOn;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private TaskBaseAllOfExternal external;

  public static final String SERIALIZED_NAME_HTML_NOTES = "html_notes";
  @SerializedName(SERIALIZED_NAME_HTML_NOTES)
  private String htmlNotes;

  public static final String SERIALIZED_NAME_HEARTED = "hearted";
  @SerializedName(SERIALIZED_NAME_HEARTED)
  private Boolean hearted;

  public static final String SERIALIZED_NAME_HEARTS = "hearts";
  @SerializedName(SERIALIZED_NAME_HEARTS)
  private List<Like> hearts = null;

  public static final String SERIALIZED_NAME_IS_RENDERED_AS_SEPARATOR = "is_rendered_as_separator";
  @SerializedName(SERIALIZED_NAME_IS_RENDERED_AS_SEPARATOR)
  private Boolean isRenderedAsSeparator;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = null;

  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private List<TaskBaseAllOfMemberships> memberships = null;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NUM_HEARTS = "num_hearts";
  @SerializedName(SERIALIZED_NAME_NUM_HEARTS)
  private Integer numHearts;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_NUM_SUBTASKS = "num_subtasks";
  @SerializedName(SERIALIZED_NAME_NUM_SUBTASKS)
  private Integer numSubtasks;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private OffsetDateTime startAt;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private LocalDate startOn;

  public static final String SERIALIZED_NAME_ACTUAL_TIME_MINUTES = "actual_time_minutes";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TIME_MINUTES)
  private Double actualTimeMinutes;

  public TaskBaseAllOf() {
  }

  
  public TaskBaseAllOf(
     OffsetDateTime completedAt, 
     OffsetDateTime createdAt, 
     List<AsanaResource> dependencies, 
     List<AsanaResource> dependents, 
     Boolean hearted, 
     List<Like> hearts, 
     Boolean isRenderedAsSeparator, 
     List<Like> likes, 
     List<TaskBaseAllOfMemberships> memberships, 
     OffsetDateTime modifiedAt, 
     Integer numHearts, 
     Integer numLikes, 
     Integer numSubtasks, 
     Double actualTimeMinutes
  ) {
    this();
    this.completedAt = completedAt;
    this.createdAt = createdAt;
    this.dependencies = dependencies;
    this.dependents = dependents;
    this.hearted = hearted;
    this.hearts = hearts;
    this.isRenderedAsSeparator = isRenderedAsSeparator;
    this.likes = likes;
    this.memberships = memberships;
    this.modifiedAt = modifiedAt;
    this.numHearts = numHearts;
    this.numLikes = numLikes;
    this.numSubtasks = numSubtasks;
    this.actualTimeMinutes = actualTimeMinutes;
  }

  public TaskBaseAllOf approvalStatus(ApprovalStatusEnum approvalStatus) {
    
    
    
    
    this.approvalStatus = approvalStatus;
    return this;
  }

   /**
   * *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
   * @return approvalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PENDING", value = "*Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.")

  public ApprovalStatusEnum getApprovalStatus() {
    return approvalStatus;
  }


  public void setApprovalStatus(ApprovalStatusEnum approvalStatus) {
    
    
    
    this.approvalStatus = approvalStatus;
  }


  public TaskBaseAllOf assigneeStatus(AssigneeStatusEnum assigneeStatus) {
    
    
    
    
    this.assigneeStatus = assigneeStatus;
    return this;
  }

   /**
   * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   * @return assigneeStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UPCOMING", value = "*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.")

  public AssigneeStatusEnum getAssigneeStatus() {
    return assigneeStatus;
  }


  public void setAssigneeStatus(AssigneeStatusEnum assigneeStatus) {
    
    
    
    this.assigneeStatus = assigneeStatus;
  }


  public TaskBaseAllOf completed(Boolean completed) {
    
    
    
    
    this.completed = completed;
    return this;
  }

   /**
   * True if the task is currently marked complete, false if not.
   * @return completed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the task is currently marked complete, false if not.")

  public Boolean getCompleted() {
    return completed;
  }


  public void setCompleted(Boolean completed) {
    
    
    
    this.completed = completed;
  }


   /**
   * The time at which this task was completed, or null if the task is incomplete.
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this task was completed, or null if the task is incomplete.")

  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }




  public TaskBaseAllOf completedBy(UserCompact completedBy) {
    
    
    
    
    this.completedBy = completedBy;
    return this;
  }

   /**
   * Get completedBy
   * @return completedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserCompact getCompletedBy() {
    return completedBy;
  }


  public void setCompletedBy(UserCompact completedBy) {
    
    
    
    this.completedBy = completedBy;
  }


   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this resource was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * [Opt In](https://raw.githubusercontent.com). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
   * @return dependencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Opt In](https://raw.githubusercontent.com). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.")

  public List<AsanaResource> getDependencies() {
    return dependencies;
  }




   /**
   * [Opt In](https://raw.githubusercontent.com). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
   * @return dependents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Opt In](https://raw.githubusercontent.com). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.")

  public List<AsanaResource> getDependents() {
    return dependents;
  }




  public TaskBaseAllOf dueAt(OffsetDateTime dueAt) {
    
    
    
    
    this.dueAt = dueAt;
    return this;
  }

   /**
   * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.
   * @return dueAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-09-15T02:06:58.147Z", value = "The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.")

  public OffsetDateTime getDueAt() {
    return dueAt;
  }


  public void setDueAt(OffsetDateTime dueAt) {
    
    
    
    this.dueAt = dueAt;
  }


  public TaskBaseAllOf dueOn(LocalDate dueOn) {
    
    
    
    
    this.dueOn = dueOn;
    return this;
  }

   /**
   * The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.
   * @return dueOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sat Sep 14 17:00:00 PDT 2019", value = "The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.")

  public LocalDate getDueOn() {
    return dueOn;
  }


  public void setDueOn(LocalDate dueOn) {
    
    
    
    this.dueOn = dueOn;
  }


  public TaskBaseAllOf external(TaskBaseAllOfExternal external) {
    
    
    
    
    this.external = external;
    return this;
  }

   /**
   * Get external
   * @return external
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaskBaseAllOfExternal getExternal() {
    return external;
  }


  public void setExternal(TaskBaseAllOfExternal external) {
    
    
    
    this.external = external;
  }


  public TaskBaseAllOf htmlNotes(String htmlNotes) {
    
    
    
    
    this.htmlNotes = htmlNotes;
    return this;
  }

   /**
   * [Opt In](https://raw.githubusercontent.com). The notes of the text with formatting as HTML.
   * @return htmlNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>", value = "[Opt In](https://raw.githubusercontent.com). The notes of the text with formatting as HTML.")

  public String getHtmlNotes() {
    return htmlNotes;
  }


  public void setHtmlNotes(String htmlNotes) {
    
    
    
    this.htmlNotes = htmlNotes;
  }


   /**
   * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
   * @return hearted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.")

  public Boolean getHearted() {
    return hearted;
  }




   /**
   * *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
   * @return hearts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Deprecated - please use likes instead* Array of likes for users who have hearted this task.")

  public List<Like> getHearts() {
    return hearts;
  }




   /**
   * [Opt In](https://raw.githubusercontent.com). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](https://raw.githubusercontent.com) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.
   * @return isRenderedAsSeparator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "[Opt In](https://raw.githubusercontent.com). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](https://raw.githubusercontent.com) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.")

  public Boolean getIsRenderedAsSeparator() {
    return isRenderedAsSeparator;
  }




  public TaskBaseAllOf liked(Boolean liked) {
    
    
    
    
    this.liked = liked;
    return this;
  }

   /**
   * True if the task is liked by the authorized user, false if not.
   * @return liked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "True if the task is liked by the authorized user, false if not.")

  public Boolean getLiked() {
    return liked;
  }


  public void setLiked(Boolean liked) {
    
    
    
    this.liked = liked;
  }


   /**
   * Array of likes for users who have liked this task.
   * @return likes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of likes for users who have liked this task.")

  public List<Like> getLikes() {
    return likes;
  }




   /**
   * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
   * @return memberships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.")

  public List<TaskBaseAllOfMemberships> getMemberships() {
    return memberships;
  }




   /**
   * The time at which this task was last modified.  The following conditions will change &#x60;modified_at&#x60;:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change &#x60;modified_at&#x60;:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect &#x60;modified_at&#x60;)
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this task was last modified.  The following conditions will change `modified_at`:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change `modified_at`:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect `modified_at`)")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }




  public TaskBaseAllOf name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Buy catnip", value = "Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TaskBaseAllOf notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Free-form textual information associated with the task (i.e. its description).
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mittens really likes the stuff from Humboldt.", value = "Free-form textual information associated with the task (i.e. its description).")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


   /**
   * *Deprecated - please use likes instead* The number of users who have hearted this task.
   * @return numHearts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "*Deprecated - please use likes instead* The number of users who have hearted this task.")

  public Integer getNumHearts() {
    return numHearts;
  }




   /**
   * The number of users who have liked this task.
   * @return numLikes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "The number of users who have liked this task.")

  public Integer getNumLikes() {
    return numLikes;
  }




   /**
   * [Opt In](https://raw.githubusercontent.com). The number of subtasks on this task. 
   * @return numSubtasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "[Opt In](https://raw.githubusercontent.com). The number of subtasks on this task. ")

  public Integer getNumSubtasks() {
    return numSubtasks;
  }




  public TaskBaseAllOf startAt(OffsetDateTime startAt) {
    
    
    
    
    this.startAt = startAt;
    return this;
  }

   /**
   * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*
   * @return startAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-09-14T02:06:58.147Z", value = "Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*")

  public OffsetDateTime getStartAt() {
    return startAt;
  }


  public void setStartAt(OffsetDateTime startAt) {
    
    
    
    this.startAt = startAt;
  }


  public TaskBaseAllOf startOn(LocalDate startOn) {
    
    
    
    
    this.startOn = startOn;
    return this;
  }

   /**
   * The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
   * @return startOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Sep 13 17:00:00 PDT 2019", value = "The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*")

  public LocalDate getStartOn() {
    return startOn;
  }


  public void setStartOn(LocalDate startOn) {
    
    
    
    this.startOn = startOn;
  }


   /**
   * This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
   * @return actualTimeMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200", value = "This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.")

  public Double getActualTimeMinutes() {
    return actualTimeMinutes;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TaskBaseAllOf instance itself
   */
  public TaskBaseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskBaseAllOf taskBaseAllOf = (TaskBaseAllOf) o;
    return Objects.equals(this.approvalStatus, taskBaseAllOf.approvalStatus) &&
        Objects.equals(this.assigneeStatus, taskBaseAllOf.assigneeStatus) &&
        Objects.equals(this.completed, taskBaseAllOf.completed) &&
        Objects.equals(this.completedAt, taskBaseAllOf.completedAt) &&
        Objects.equals(this.completedBy, taskBaseAllOf.completedBy) &&
        Objects.equals(this.createdAt, taskBaseAllOf.createdAt) &&
        Objects.equals(this.dependencies, taskBaseAllOf.dependencies) &&
        Objects.equals(this.dependents, taskBaseAllOf.dependents) &&
        Objects.equals(this.dueAt, taskBaseAllOf.dueAt) &&
        Objects.equals(this.dueOn, taskBaseAllOf.dueOn) &&
        Objects.equals(this.external, taskBaseAllOf.external) &&
        Objects.equals(this.htmlNotes, taskBaseAllOf.htmlNotes) &&
        Objects.equals(this.hearted, taskBaseAllOf.hearted) &&
        Objects.equals(this.hearts, taskBaseAllOf.hearts) &&
        Objects.equals(this.isRenderedAsSeparator, taskBaseAllOf.isRenderedAsSeparator) &&
        Objects.equals(this.liked, taskBaseAllOf.liked) &&
        Objects.equals(this.likes, taskBaseAllOf.likes) &&
        Objects.equals(this.memberships, taskBaseAllOf.memberships) &&
        Objects.equals(this.modifiedAt, taskBaseAllOf.modifiedAt) &&
        Objects.equals(this.name, taskBaseAllOf.name) &&
        Objects.equals(this.notes, taskBaseAllOf.notes) &&
        Objects.equals(this.numHearts, taskBaseAllOf.numHearts) &&
        Objects.equals(this.numLikes, taskBaseAllOf.numLikes) &&
        Objects.equals(this.numSubtasks, taskBaseAllOf.numSubtasks) &&
        Objects.equals(this.startAt, taskBaseAllOf.startAt) &&
        Objects.equals(this.startOn, taskBaseAllOf.startOn) &&
        Objects.equals(this.actualTimeMinutes, taskBaseAllOf.actualTimeMinutes)&&
        Objects.equals(this.additionalProperties, taskBaseAllOf.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalStatus, assigneeStatus, completed, completedAt, completedBy, createdAt, dependencies, dependents, dueAt, dueOn, external, htmlNotes, hearted, hearts, isRenderedAsSeparator, liked, likes, memberships, modifiedAt, name, notes, numHearts, numLikes, numSubtasks, startAt, startOn, actualTimeMinutes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskBaseAllOf {\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    assigneeStatus: ").append(toIndentedString(assigneeStatus)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    completedBy: ").append(toIndentedString(completedBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    dependents: ").append(toIndentedString(dependents)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    isRenderedAsSeparator: ").append(toIndentedString(isRenderedAsSeparator)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    numSubtasks: ").append(toIndentedString(numSubtasks)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    actualTimeMinutes: ").append(toIndentedString(actualTimeMinutes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approval_status");
    openapiFields.add("assignee_status");
    openapiFields.add("completed");
    openapiFields.add("completed_at");
    openapiFields.add("completed_by");
    openapiFields.add("created_at");
    openapiFields.add("dependencies");
    openapiFields.add("dependents");
    openapiFields.add("due_at");
    openapiFields.add("due_on");
    openapiFields.add("external");
    openapiFields.add("html_notes");
    openapiFields.add("hearted");
    openapiFields.add("hearts");
    openapiFields.add("is_rendered_as_separator");
    openapiFields.add("liked");
    openapiFields.add("likes");
    openapiFields.add("memberships");
    openapiFields.add("modified_at");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("num_hearts");
    openapiFields.add("num_likes");
    openapiFields.add("num_subtasks");
    openapiFields.add("start_at");
    openapiFields.add("start_on");
    openapiFields.add("actual_time_minutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaskBaseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TaskBaseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskBaseAllOf is not found in the empty JSON string", TaskBaseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("approval_status") != null && !jsonObj.get("approval_status").isJsonNull()) && !jsonObj.get("approval_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval_status").toString()));
      }
      if ((jsonObj.get("assignee_status") != null && !jsonObj.get("assignee_status").isJsonNull()) && !jsonObj.get("assignee_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignee_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignee_status").toString()));
      }
      // validate the optional field `completed_by`
      if (jsonObj.get("completed_by") != null && !jsonObj.get("completed_by").isJsonNull()) {
        UserCompact.validateJsonObject(jsonObj.getAsJsonObject("completed_by"));
      }
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            AsanaResource.validateJsonObject(jsonArraydependencies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dependents") != null && !jsonObj.get("dependents").isJsonNull()) {
        JsonArray jsonArraydependents = jsonObj.getAsJsonArray("dependents");
        if (jsonArraydependents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependents` to be an array in the JSON string but got `%s`", jsonObj.get("dependents").toString()));
          }

          // validate the optional field `dependents` (array)
          for (int i = 0; i < jsonArraydependents.size(); i++) {
            AsanaResource.validateJsonObject(jsonArraydependents.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `external`
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        TaskBaseAllOfExternal.validateJsonObject(jsonObj.getAsJsonObject("external"));
      }
      if ((jsonObj.get("html_notes") != null && !jsonObj.get("html_notes").isJsonNull()) && !jsonObj.get("html_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_notes").toString()));
      }
      if (jsonObj.get("hearts") != null && !jsonObj.get("hearts").isJsonNull()) {
        JsonArray jsonArrayhearts = jsonObj.getAsJsonArray("hearts");
        if (jsonArrayhearts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hearts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hearts` to be an array in the JSON string but got `%s`", jsonObj.get("hearts").toString()));
          }

          // validate the optional field `hearts` (array)
          for (int i = 0; i < jsonArrayhearts.size(); i++) {
            Like.validateJsonObject(jsonArrayhearts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonObject(jsonArraylikes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("memberships") != null && !jsonObj.get("memberships").isJsonNull()) {
        JsonArray jsonArraymemberships = jsonObj.getAsJsonArray("memberships");
        if (jsonArraymemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memberships` to be an array in the JSON string but got `%s`", jsonObj.get("memberships").toString()));
          }

          // validate the optional field `memberships` (array)
          for (int i = 0; i < jsonArraymemberships.size(); i++) {
            TaskBaseAllOfMemberships.validateJsonObject(jsonArraymemberships.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskBaseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskBaseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskBaseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskBaseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskBaseAllOf>() {
           @Override
           public void write(JsonWriter out, TaskBaseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskBaseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TaskBaseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskBaseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskBaseAllOf
  * @throws IOException if the JSON string is invalid with respect to TaskBaseAllOf
  */
  public static TaskBaseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskBaseAllOf.class);
  }

 /**
  * Convert an instance of TaskBaseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

