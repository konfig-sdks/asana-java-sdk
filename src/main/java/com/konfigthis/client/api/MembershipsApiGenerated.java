/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateMembershipRequest;
import com.konfigthis.client.model.MembershipsCreateNewRecordRequest;
import com.konfigthis.client.model.MembershipsCreateNewRecordResponse;
import com.konfigthis.client.model.MembershipsDeleteRecordResponse;
import com.konfigthis.client.model.MembershipsGetMembershipRecordResponse;
import com.konfigthis.client.model.MembershipsGetMultipleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRecordCall(Boolean optPretty, MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membershipsCreateNewRecordRequest;

        // create path and map variables
        String localVarPath = "/memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRecordValidateBeforeCall(Boolean optPretty, MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest, final ApiCallback _callback) throws ApiException {
        return createNewRecordCall(optPretty, membershipsCreateNewRecordRequest, _callback);

    }


    private ApiResponse<MembershipsCreateNewRecordResponse> createNewRecordWithHttpInfo(Boolean optPretty, MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(optPretty, membershipsCreateNewRecordRequest, null);
        Type localVarReturnType = new TypeToken<MembershipsCreateNewRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewRecordAsync(Boolean optPretty, MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest, final ApiCallback<MembershipsCreateNewRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(optPretty, membershipsCreateNewRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<MembershipsCreateNewRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRecordRequestBuilder {
        private CreateMembershipRequest data;
        private Boolean optPretty;

        private CreateNewRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder data(CreateMembershipRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for createNewRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordCall(optPretty, membershipsCreateNewRecordRequest, _callback);
        }

        private MembershipsCreateNewRecordRequest buildBodyParams() {
            MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest = new MembershipsCreateNewRecordRequest();
            membershipsCreateNewRecordRequest.data(this.data);
            return membershipsCreateNewRecordRequest;
        }

        /**
         * Execute createNewRecord request
         * @return MembershipsCreateNewRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public MembershipsCreateNewRecordResponse execute() throws ApiException {
            MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest = buildBodyParams();
            ApiResponse<MembershipsCreateNewRecordResponse> localVarResp = createNewRecordWithHttpInfo(optPretty, membershipsCreateNewRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewRecord request with HTTP info returned
         * @return ApiResponse&lt;MembershipsCreateNewRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembershipsCreateNewRecordResponse> executeWithHttpInfo() throws ApiException {
            MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordWithHttpInfo(optPretty, membershipsCreateNewRecordRequest);
        }

        /**
         * Execute createNewRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembershipsCreateNewRecordResponse> _callback) throws ApiException {
            MembershipsCreateNewRecordRequest membershipsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordAsync(optPretty, membershipsCreateNewRecordRequest, _callback);
        }
    }

    /**
     * Create a membership
     * Creates a new membership in a &#x60;goal&#x60; or &#x60;project&#x60;. &#x60;Teams&#x60; or &#x60;users&#x60; can be a member of &#x60;goals&#x60; or &#x60;projects&#x60;.  Returns the full record of the newly created membership.
     * @return CreateNewRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested membership. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRecordRequestBuilder createNewRecord() throws IllegalArgumentException {
        return new CreateNewRecordRequestBuilder();
    }
    private okhttp3.Call deleteRecordCall(String membershipGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memberships/{membership_gid}"
            .replace("{" + "membership_gid" + "}", localVarApiClient.escapeString(membershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordValidateBeforeCall(String membershipGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipGid' is set
        if (membershipGid == null) {
            throw new ApiException("Missing the required parameter 'membershipGid' when calling deleteRecord(Async)");
        }

        return deleteRecordCall(membershipGid, optPretty, _callback);

    }


    private ApiResponse<MembershipsDeleteRecordResponse> deleteRecordWithHttpInfo(String membershipGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(membershipGid, optPretty, null);
        Type localVarReturnType = new TypeToken<MembershipsDeleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRecordAsync(String membershipGid, Boolean optPretty, final ApiCallback<MembershipsDeleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(membershipGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<MembershipsDeleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRecordRequestBuilder {
        private final String membershipGid;
        private Boolean optPretty;

        private DeleteRecordRequestBuilder(String membershipGid) {
            this.membershipGid = membershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteRecordRequestBuilder
         */
        public DeleteRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRecordCall(membershipGid, optPretty, _callback);
        }


        /**
         * Execute deleteRecord request
         * @return MembershipsDeleteRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public MembershipsDeleteRecordResponse execute() throws ApiException {
            ApiResponse<MembershipsDeleteRecordResponse> localVarResp = deleteRecordWithHttpInfo(membershipGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRecord request with HTTP info returned
         * @return ApiResponse&lt;MembershipsDeleteRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembershipsDeleteRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteRecordWithHttpInfo(membershipGid, optPretty);
        }

        /**
         * Execute deleteRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembershipsDeleteRecordResponse> _callback) throws ApiException {
            return deleteRecordAsync(membershipGid, optPretty, _callback);
        }
    }

    /**
     * Delete a membership
     * A specific, existing membership for a &#x60;goal&#x60; or &#x60;project&#x60; can be deleted by making a &#x60;DELETE&#x60; request on the URL for that membership.  Returns an empty data record.
     * @param membershipGid Globally unique identifier for the membership. (required)
     * @return DeleteRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the requested membership. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRecordRequestBuilder deleteRecord(String membershipGid) throws IllegalArgumentException {
        if (membershipGid == null) throw new IllegalArgumentException("\"membershipGid\" is required but got null");
            

        return new DeleteRecordRequestBuilder(membershipGid);
    }
    private okhttp3.Call getMembershipRecordCall(String membershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memberships/{membership_gid}"
            .replace("{" + "membership_gid" + "}", localVarApiClient.escapeString(membershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembershipRecordValidateBeforeCall(String membershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipGid' is set
        if (membershipGid == null) {
            throw new ApiException("Missing the required parameter 'membershipGid' when calling getMembershipRecord(Async)");
        }

        return getMembershipRecordCall(membershipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<MembershipsGetMembershipRecordResponse> getMembershipRecordWithHttpInfo(String membershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getMembershipRecordValidateBeforeCall(membershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<MembershipsGetMembershipRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMembershipRecordAsync(String membershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<MembershipsGetMembershipRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembershipRecordValidateBeforeCall(membershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<MembershipsGetMembershipRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMembershipRecordRequestBuilder {
        private final String membershipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetMembershipRecordRequestBuilder(String membershipGid) {
            this.membershipGid = membershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetMembershipRecordRequestBuilder
         */
        public GetMembershipRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetMembershipRecordRequestBuilder
         */
        public GetMembershipRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getMembershipRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMembershipRecordCall(membershipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getMembershipRecord request
         * @return MembershipsGetMembershipRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single membership. </td><td>  -  </td></tr>
         </table>
         */
        public MembershipsGetMembershipRecordResponse execute() throws ApiException {
            ApiResponse<MembershipsGetMembershipRecordResponse> localVarResp = getMembershipRecordWithHttpInfo(membershipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMembershipRecord request with HTTP info returned
         * @return ApiResponse&lt;MembershipsGetMembershipRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembershipsGetMembershipRecordResponse> executeWithHttpInfo() throws ApiException {
            return getMembershipRecordWithHttpInfo(membershipGid, optPretty, optFields);
        }

        /**
         * Execute getMembershipRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembershipsGetMembershipRecordResponse> _callback) throws ApiException {
            return getMembershipRecordAsync(membershipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a membership
     * Returns compact &#x60;project_membership&#x60; record for a single membership. &#x60;GET&#x60; only supports project memberships currently
     * @param membershipGid Globally unique identifier for the membership. (required)
     * @return GetMembershipRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetMembershipRecordRequestBuilder getMembershipRecord(String membershipGid) throws IllegalArgumentException {
        if (membershipGid == null) throw new IllegalArgumentException("\"membershipGid\" is required but got null");
            

        return new GetMembershipRecordRequestBuilder(membershipGid);
    }
    private okhttp3.Call getMultipleCall(Boolean optPretty, String parent, String member, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleValidateBeforeCall(Boolean optPretty, String parent, String member, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return getMultipleCall(optPretty, parent, member, limit, offset, optFields, _callback);

    }


    private ApiResponse<MembershipsGetMultipleResponse> getMultipleWithHttpInfo(Boolean optPretty, String parent, String member, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getMultipleValidateBeforeCall(optPretty, parent, member, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<MembershipsGetMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleAsync(Boolean optPretty, String parent, String member, Integer limit, String offset, List<String> optFields, final ApiCallback<MembershipsGetMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleValidateBeforeCall(optPretty, parent, member, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<MembershipsGetMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleRequestBuilder {
        private Boolean optPretty;
        private String parent;
        private String member;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set parent
         * @param parent Globally unique identifier for &#x60;goal&#x60; or &#x60;project&#x60;. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder parent(String parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set member
         * @param member Globally unique identifier for &#x60;team&#x60; or &#x60;user&#x60;. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder member(String member) {
            this.member = member;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleCall(optPretty, parent, member, limit, offset, optFields, _callback);
        }


        /**
         * Execute getMultiple request
         * @return MembershipsGetMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public MembershipsGetMultipleResponse execute() throws ApiException {
            ApiResponse<MembershipsGetMultipleResponse> localVarResp = getMultipleWithHttpInfo(optPretty, parent, member, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultiple request with HTTP info returned
         * @return ApiResponse&lt;MembershipsGetMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembershipsGetMultipleResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleWithHttpInfo(optPretty, parent, member, limit, offset, optFields);
        }

        /**
         * Execute getMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembershipsGetMultipleResponse> _callback) throws ApiException {
            return getMultipleAsync(optPretty, parent, member, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get multiple memberships
     * Returns compact &#x60;goal_membership&#x60; or &#x60;project_membership&#x60; records. The possible types for &#x60;parent&#x60; in this request are &#x60;goal&#x60; or &#x60;project&#x60;. An additional member (user GID or team GID) can be passed in to filter to a specific membership.
     * @return GetMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleRequestBuilder getMultiple() throws IllegalArgumentException {
        return new GetMultipleRequestBuilder();
    }
}
