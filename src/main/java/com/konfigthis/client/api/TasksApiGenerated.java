/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ModifyDependenciesRequest;
import com.konfigthis.client.model.ModifyDependentsRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TaskAddFollowersRequest;
import com.konfigthis.client.model.TaskAddProjectRequest;
import com.konfigthis.client.model.TaskAddTagRequest;
import com.konfigthis.client.model.TaskDuplicateRequest;
import com.konfigthis.client.model.TaskRemoveFollowersRequest;
import com.konfigthis.client.model.TaskRemoveProjectRequest;
import com.konfigthis.client.model.TaskRemoveTagRequest;
import com.konfigthis.client.model.TaskRequest;
import com.konfigthis.client.model.TaskSetParentRequest;
import com.konfigthis.client.model.TasksAddFollowersToTaskRequest;
import com.konfigthis.client.model.TasksAddFollowersToTaskResponse;
import com.konfigthis.client.model.TasksAddProjectToTaskRequest;
import com.konfigthis.client.model.TasksAddProjectToTaskResponse;
import com.konfigthis.client.model.TasksAddTagToTaskRequest;
import com.konfigthis.client.model.TasksAddTagToTaskResponse;
import com.konfigthis.client.model.TasksCreateNewTaskRequest;
import com.konfigthis.client.model.TasksCreateNewTaskResponse;
import com.konfigthis.client.model.TasksCreateSubtaskRecordRequest;
import com.konfigthis.client.model.TasksCreateSubtaskRecordResponse;
import com.konfigthis.client.model.TasksDeleteTaskResponse;
import com.konfigthis.client.model.TasksDuplicateTaskJobRequest;
import com.konfigthis.client.model.TasksDuplicateTaskJobResponse;
import com.konfigthis.client.model.TasksGetAllDependenciesResponse;
import com.konfigthis.client.model.TasksGetByCustomIdResponse;
import com.konfigthis.client.model.TasksGetDependentsResponse;
import com.konfigthis.client.model.TasksGetMultipleResponse;
import com.konfigthis.client.model.TasksGetMultipleWithTagResponse;
import com.konfigthis.client.model.TasksGetSectionTasksResponse;
import com.konfigthis.client.model.TasksGetSubtaskListResponse;
import com.konfigthis.client.model.TasksGetTaskRecordResponse;
import com.konfigthis.client.model.TasksGetTasksByProjectResponse;
import com.konfigthis.client.model.TasksGetUserTaskListTasksResponse;
import com.konfigthis.client.model.TasksRemoveFollowersFromTaskRequest;
import com.konfigthis.client.model.TasksRemoveFollowersFromTaskResponse;
import com.konfigthis.client.model.TasksRemoveProjectFromTaskRequest;
import com.konfigthis.client.model.TasksRemoveProjectFromTaskResponse;
import com.konfigthis.client.model.TasksRemoveTagFromTaskRequest;
import com.konfigthis.client.model.TasksRemoveTagFromTaskResponse;
import com.konfigthis.client.model.TasksSearchInWorkspaceResponse;
import com.konfigthis.client.model.TasksSetDependenciesForTaskRequest;
import com.konfigthis.client.model.TasksSetDependenciesForTaskResponse;
import com.konfigthis.client.model.TasksSetParentTaskRequest;
import com.konfigthis.client.model.TasksSetParentTaskResponse;
import com.konfigthis.client.model.TasksSetTaskDependentsRequest;
import com.konfigthis.client.model.TasksSetTaskDependentsResponse;
import com.konfigthis.client.model.TasksUnlinkDependenciesFromTaskRequest;
import com.konfigthis.client.model.TasksUnlinkDependenciesFromTaskResponse;
import com.konfigthis.client.model.TasksUnlinkDependentsRequest;
import com.konfigthis.client.model.TasksUnlinkDependentsResponse;
import com.konfigthis.client.model.TasksUpdateTaskRecordRequest;
import com.konfigthis.client.model.TasksUpdateTaskRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFollowersToTaskCall(String taskGid, TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksAddFollowersToTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addFollowers"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFollowersToTaskValidateBeforeCall(String taskGid, TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addFollowersToTask(Async)");
        }

        // verify the required parameter 'tasksAddFollowersToTaskRequest' is set
        if (tasksAddFollowersToTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksAddFollowersToTaskRequest' when calling addFollowersToTask(Async)");
        }

        return addFollowersToTaskCall(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksAddFollowersToTaskResponse> addFollowersToTaskWithHttpInfo(String taskGid, TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addFollowersToTaskValidateBeforeCall(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksAddFollowersToTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFollowersToTaskAsync(String taskGid, TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksAddFollowersToTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFollowersToTaskValidateBeforeCall(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksAddFollowersToTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFollowersToTaskRequestBuilder {
        private final String taskGid;
        private TaskAddFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddFollowersToTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddFollowersToTaskRequestBuilder
         */
        public AddFollowersToTaskRequestBuilder data(TaskAddFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddFollowersToTaskRequestBuilder
         */
        public AddFollowersToTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddFollowersToTaskRequestBuilder
         */
        public AddFollowersToTaskRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addFollowersToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest = buildBodyParams();
            return addFollowersToTaskCall(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields, _callback);
        }

        private TasksAddFollowersToTaskRequest buildBodyParams() {
            TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest = new TasksAddFollowersToTaskRequest();
            tasksAddFollowersToTaskRequest.data(this.data);
            return tasksAddFollowersToTaskRequest;
        }

        /**
         * Execute addFollowersToTask request
         * @return TasksAddFollowersToTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksAddFollowersToTaskResponse execute() throws ApiException {
            TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest = buildBodyParams();
            ApiResponse<TasksAddFollowersToTaskResponse> localVarResp = addFollowersToTaskWithHttpInfo(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFollowersToTask request with HTTP info returned
         * @return ApiResponse&lt;TasksAddFollowersToTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksAddFollowersToTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest = buildBodyParams();
            return addFollowersToTaskWithHttpInfo(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields);
        }

        /**
         * Execute addFollowersToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksAddFollowersToTaskResponse> _callback) throws ApiException {
            TasksAddFollowersToTaskRequest tasksAddFollowersToTaskRequest = buildBodyParams();
            return addFollowersToTaskAsync(taskGid, tasksAddFollowersToTaskRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add followers to a task
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @param taskGid The task to operate on. (required)
     * @param tasksAddFollowersToTaskRequest The followers to add to the task. (required)
     * @return AddFollowersToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
     </table>
     */
    public AddFollowersToTaskRequestBuilder addFollowersToTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new AddFollowersToTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call addProjectToTaskCall(String taskGid, TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksAddProjectToTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addProject"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectToTaskValidateBeforeCall(String taskGid, TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addProjectToTask(Async)");
        }

        // verify the required parameter 'tasksAddProjectToTaskRequest' is set
        if (tasksAddProjectToTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksAddProjectToTaskRequest' when calling addProjectToTask(Async)");
        }

        return addProjectToTaskCall(taskGid, tasksAddProjectToTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksAddProjectToTaskResponse> addProjectToTaskWithHttpInfo(String taskGid, TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = addProjectToTaskValidateBeforeCall(taskGid, tasksAddProjectToTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksAddProjectToTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addProjectToTaskAsync(String taskGid, TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest, Boolean optPretty, final ApiCallback<TasksAddProjectToTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectToTaskValidateBeforeCall(taskGid, tasksAddProjectToTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksAddProjectToTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddProjectToTaskRequestBuilder {
        private final String taskGid;
        private TaskAddProjectRequest data;
        private Boolean optPretty;

        private AddProjectToTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddProjectToTaskRequestBuilder
         */
        public AddProjectToTaskRequestBuilder data(TaskAddProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddProjectToTaskRequestBuilder
         */
        public AddProjectToTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for addProjectToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest = buildBodyParams();
            return addProjectToTaskCall(taskGid, tasksAddProjectToTaskRequest, optPretty, _callback);
        }

        private TasksAddProjectToTaskRequest buildBodyParams() {
            TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest = new TasksAddProjectToTaskRequest();
            tasksAddProjectToTaskRequest.data(this.data);
            return tasksAddProjectToTaskRequest;
        }

        /**
         * Execute addProjectToTask request
         * @return TasksAddProjectToTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksAddProjectToTaskResponse execute() throws ApiException {
            TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest = buildBodyParams();
            ApiResponse<TasksAddProjectToTaskResponse> localVarResp = addProjectToTaskWithHttpInfo(taskGid, tasksAddProjectToTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addProjectToTask request with HTTP info returned
         * @return ApiResponse&lt;TasksAddProjectToTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksAddProjectToTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest = buildBodyParams();
            return addProjectToTaskWithHttpInfo(taskGid, tasksAddProjectToTaskRequest, optPretty);
        }

        /**
         * Execute addProjectToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksAddProjectToTaskResponse> _callback) throws ApiException {
            TasksAddProjectToTaskRequest tasksAddProjectToTaskRequest = buildBodyParams();
            return addProjectToTaskAsync(taskGid, tasksAddProjectToTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Add a project to a task
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param tasksAddProjectToTaskRequest The project to add the task to. (required)
     * @return AddProjectToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
     </table>
     */
    public AddProjectToTaskRequestBuilder addProjectToTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new AddProjectToTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call addTagToTaskCall(String taskGid, TasksAddTagToTaskRequest tasksAddTagToTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksAddTagToTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addTag"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagToTaskValidateBeforeCall(String taskGid, TasksAddTagToTaskRequest tasksAddTagToTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addTagToTask(Async)");
        }

        // verify the required parameter 'tasksAddTagToTaskRequest' is set
        if (tasksAddTagToTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksAddTagToTaskRequest' when calling addTagToTask(Async)");
        }

        return addTagToTaskCall(taskGid, tasksAddTagToTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksAddTagToTaskResponse> addTagToTaskWithHttpInfo(String taskGid, TasksAddTagToTaskRequest tasksAddTagToTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = addTagToTaskValidateBeforeCall(taskGid, tasksAddTagToTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksAddTagToTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTagToTaskAsync(String taskGid, TasksAddTagToTaskRequest tasksAddTagToTaskRequest, Boolean optPretty, final ApiCallback<TasksAddTagToTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagToTaskValidateBeforeCall(taskGid, tasksAddTagToTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksAddTagToTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTagToTaskRequestBuilder {
        private final String taskGid;
        private TaskAddTagRequest data;
        private Boolean optPretty;

        private AddTagToTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddTagToTaskRequestBuilder
         */
        public AddTagToTaskRequestBuilder data(TaskAddTagRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddTagToTaskRequestBuilder
         */
        public AddTagToTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for addTagToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksAddTagToTaskRequest tasksAddTagToTaskRequest = buildBodyParams();
            return addTagToTaskCall(taskGid, tasksAddTagToTaskRequest, optPretty, _callback);
        }

        private TasksAddTagToTaskRequest buildBodyParams() {
            TasksAddTagToTaskRequest tasksAddTagToTaskRequest = new TasksAddTagToTaskRequest();
            tasksAddTagToTaskRequest.data(this.data);
            return tasksAddTagToTaskRequest;
        }

        /**
         * Execute addTagToTask request
         * @return TasksAddTagToTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksAddTagToTaskResponse execute() throws ApiException {
            TasksAddTagToTaskRequest tasksAddTagToTaskRequest = buildBodyParams();
            ApiResponse<TasksAddTagToTaskResponse> localVarResp = addTagToTaskWithHttpInfo(taskGid, tasksAddTagToTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTagToTask request with HTTP info returned
         * @return ApiResponse&lt;TasksAddTagToTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksAddTagToTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksAddTagToTaskRequest tasksAddTagToTaskRequest = buildBodyParams();
            return addTagToTaskWithHttpInfo(taskGid, tasksAddTagToTaskRequest, optPretty);
        }

        /**
         * Execute addTagToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksAddTagToTaskResponse> _callback) throws ApiException {
            TasksAddTagToTaskRequest tasksAddTagToTaskRequest = buildBodyParams();
            return addTagToTaskAsync(taskGid, tasksAddTagToTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Add a tag to a task
     * Adds a tag to a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param tasksAddTagToTaskRequest The tag to add to the task. (required)
     * @return AddTagToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
     </table>
     */
    public AddTagToTaskRequestBuilder addTagToTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new AddTagToTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call createNewTaskCall(TasksCreateNewTaskRequest tasksCreateNewTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksCreateNewTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskValidateBeforeCall(TasksCreateNewTaskRequest tasksCreateNewTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tasksCreateNewTaskRequest' is set
        if (tasksCreateNewTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksCreateNewTaskRequest' when calling createNewTask(Async)");
        }

        return createNewTaskCall(tasksCreateNewTaskRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksCreateNewTaskResponse> createNewTaskWithHttpInfo(TasksCreateNewTaskRequest tasksCreateNewTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(tasksCreateNewTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksCreateNewTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskAsync(TasksCreateNewTaskRequest tasksCreateNewTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksCreateNewTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(tasksCreateNewTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksCreateNewTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskRequestBuilder {
        private TaskRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewTaskRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder data(TaskRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksCreateNewTaskRequest tasksCreateNewTaskRequest = buildBodyParams();
            return createNewTaskCall(tasksCreateNewTaskRequest, optPretty, optFields, _callback);
        }

        private TasksCreateNewTaskRequest buildBodyParams() {
            TasksCreateNewTaskRequest tasksCreateNewTaskRequest = new TasksCreateNewTaskRequest();
            tasksCreateNewTaskRequest.data(this.data);
            return tasksCreateNewTaskRequest;
        }

        /**
         * Execute createNewTask request
         * @return TasksCreateNewTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksCreateNewTaskResponse execute() throws ApiException {
            TasksCreateNewTaskRequest tasksCreateNewTaskRequest = buildBodyParams();
            ApiResponse<TasksCreateNewTaskResponse> localVarResp = createNewTaskWithHttpInfo(tasksCreateNewTaskRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTask request with HTTP info returned
         * @return ApiResponse&lt;TasksCreateNewTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksCreateNewTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksCreateNewTaskRequest tasksCreateNewTaskRequest = buildBodyParams();
            return createNewTaskWithHttpInfo(tasksCreateNewTaskRequest, optPretty, optFields);
        }

        /**
         * Execute createNewTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksCreateNewTaskResponse> _callback) throws ApiException {
            TasksCreateNewTaskRequest tasksCreateNewTaskRequest = buildBodyParams();
            return createNewTaskAsync(tasksCreateNewTaskRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a task
     * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
     * @param tasksCreateNewTaskRequest The task to create. (required)
     * @return CreateNewTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskRequestBuilder createNewTask() throws IllegalArgumentException {
        return new CreateNewTaskRequestBuilder();
    }
    private okhttp3.Call createSubtaskRecordCall(String taskGid, TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksCreateSubtaskRecordRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/subtasks"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubtaskRecordValidateBeforeCall(String taskGid, TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling createSubtaskRecord(Async)");
        }

        // verify the required parameter 'tasksCreateSubtaskRecordRequest' is set
        if (tasksCreateSubtaskRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksCreateSubtaskRecordRequest' when calling createSubtaskRecord(Async)");
        }

        return createSubtaskRecordCall(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksCreateSubtaskRecordResponse> createSubtaskRecordWithHttpInfo(String taskGid, TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createSubtaskRecordValidateBeforeCall(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksCreateSubtaskRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSubtaskRecordAsync(String taskGid, TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksCreateSubtaskRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubtaskRecordValidateBeforeCall(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksCreateSubtaskRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSubtaskRecordRequestBuilder {
        private final String taskGid;
        private TaskRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateSubtaskRecordRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateSubtaskRecordRequestBuilder
         */
        public CreateSubtaskRecordRequestBuilder data(TaskRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateSubtaskRecordRequestBuilder
         */
        public CreateSubtaskRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateSubtaskRecordRequestBuilder
         */
        public CreateSubtaskRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createSubtaskRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest = buildBodyParams();
            return createSubtaskRecordCall(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields, _callback);
        }

        private TasksCreateSubtaskRecordRequest buildBodyParams() {
            TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest = new TasksCreateSubtaskRecordRequest();
            tasksCreateSubtaskRecordRequest.data(this.data);
            return tasksCreateSubtaskRecordRequest;
        }

        /**
         * Execute createSubtaskRecord request
         * @return TasksCreateSubtaskRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public TasksCreateSubtaskRecordResponse execute() throws ApiException {
            TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest = buildBodyParams();
            ApiResponse<TasksCreateSubtaskRecordResponse> localVarResp = createSubtaskRecordWithHttpInfo(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSubtaskRecord request with HTTP info returned
         * @return ApiResponse&lt;TasksCreateSubtaskRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksCreateSubtaskRecordResponse> executeWithHttpInfo() throws ApiException {
            TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest = buildBodyParams();
            return createSubtaskRecordWithHttpInfo(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createSubtaskRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksCreateSubtaskRecordResponse> _callback) throws ApiException {
            TasksCreateSubtaskRecordRequest tasksCreateSubtaskRecordRequest = buildBodyParams();
            return createSubtaskRecordAsync(taskGid, tasksCreateSubtaskRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a subtask
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @param taskGid The task to operate on. (required)
     * @param tasksCreateSubtaskRecordRequest The new subtask to create. (required)
     * @return CreateSubtaskRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSubtaskRecordRequestBuilder createSubtaskRecord(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new CreateSubtaskRecordRequestBuilder(taskGid);
    }
    private okhttp3.Call deleteTaskCall(String taskGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskValidateBeforeCall(String taskGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling deleteTask(Async)");
        }

        return deleteTaskCall(taskGid, optPretty, _callback);

    }


    private ApiResponse<TasksDeleteTaskResponse> deleteTaskWithHttpInfo(String taskGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(taskGid, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksDeleteTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTaskAsync(String taskGid, Boolean optPretty, final ApiCallback<TasksDeleteTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(taskGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksDeleteTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTaskRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;

        private DeleteTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteTaskRequestBuilder
         */
        public DeleteTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTaskCall(taskGid, optPretty, _callback);
        }


        /**
         * Execute deleteTask request
         * @return TasksDeleteTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksDeleteTaskResponse execute() throws ApiException {
            ApiResponse<TasksDeleteTaskResponse> localVarResp = deleteTaskWithHttpInfo(taskGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTask request with HTTP info returned
         * @return ApiResponse&lt;TasksDeleteTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksDeleteTaskResponse> executeWithHttpInfo() throws ApiException {
            return deleteTaskWithHttpInfo(taskGid, optPretty);
        }

        /**
         * Execute deleteTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksDeleteTaskResponse> _callback) throws ApiException {
            return deleteTaskAsync(taskGid, optPretty, _callback);
        }
    }

    /**
     * Delete a task
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @param taskGid The task to operate on. (required)
     * @return DeleteTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskRequestBuilder deleteTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new DeleteTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call duplicateTaskJobCall(String taskGid, TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksDuplicateTaskJobRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/duplicate"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateTaskJobValidateBeforeCall(String taskGid, TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling duplicateTaskJob(Async)");
        }

        // verify the required parameter 'tasksDuplicateTaskJobRequest' is set
        if (tasksDuplicateTaskJobRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksDuplicateTaskJobRequest' when calling duplicateTaskJob(Async)");
        }

        return duplicateTaskJobCall(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksDuplicateTaskJobResponse> duplicateTaskJobWithHttpInfo(String taskGid, TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = duplicateTaskJobValidateBeforeCall(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksDuplicateTaskJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call duplicateTaskJobAsync(String taskGid, TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksDuplicateTaskJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateTaskJobValidateBeforeCall(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksDuplicateTaskJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DuplicateTaskJobRequestBuilder {
        private final String taskGid;
        private TaskDuplicateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private DuplicateTaskJobRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return DuplicateTaskJobRequestBuilder
         */
        public DuplicateTaskJobRequestBuilder data(TaskDuplicateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DuplicateTaskJobRequestBuilder
         */
        public DuplicateTaskJobRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return DuplicateTaskJobRequestBuilder
         */
        public DuplicateTaskJobRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for duplicateTaskJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest = buildBodyParams();
            return duplicateTaskJobCall(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields, _callback);
        }

        private TasksDuplicateTaskJobRequest buildBodyParams() {
            TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest = new TasksDuplicateTaskJobRequest();
            tasksDuplicateTaskJobRequest.data(this.data);
            return tasksDuplicateTaskJobRequest;
        }

        /**
         * Execute duplicateTaskJob request
         * @return TasksDuplicateTaskJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public TasksDuplicateTaskJobResponse execute() throws ApiException {
            TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest = buildBodyParams();
            ApiResponse<TasksDuplicateTaskJobResponse> localVarResp = duplicateTaskJobWithHttpInfo(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute duplicateTaskJob request with HTTP info returned
         * @return ApiResponse&lt;TasksDuplicateTaskJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksDuplicateTaskJobResponse> executeWithHttpInfo() throws ApiException {
            TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest = buildBodyParams();
            return duplicateTaskJobWithHttpInfo(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields);
        }

        /**
         * Execute duplicateTaskJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksDuplicateTaskJobResponse> _callback) throws ApiException {
            TasksDuplicateTaskJobRequest tasksDuplicateTaskJobRequest = buildBodyParams();
            return duplicateTaskJobAsync(taskGid, tasksDuplicateTaskJobRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Duplicate a task
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param taskGid The task to operate on. (required)
     * @param tasksDuplicateTaskJobRequest Describes the duplicate&#39;s name and the fields that will be duplicated. (required)
     * @return DuplicateTaskJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
     </table>
     */
    public DuplicateTaskJobRequestBuilder duplicateTaskJob(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new DuplicateTaskJobRequestBuilder(taskGid);
    }
    private okhttp3.Call getAllDependenciesCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/dependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDependenciesValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getAllDependencies(Async)");
        }

        return getAllDependenciesCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetAllDependenciesResponse> getAllDependenciesWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getAllDependenciesValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetAllDependenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDependenciesAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetAllDependenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDependenciesValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetAllDependenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDependenciesRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetAllDependenciesRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetAllDependenciesRequestBuilder
         */
        public GetAllDependenciesRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetAllDependenciesRequestBuilder
         */
        public GetAllDependenciesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetAllDependenciesRequestBuilder
         */
        public GetAllDependenciesRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetAllDependenciesRequestBuilder
         */
        public GetAllDependenciesRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getAllDependencies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDependenciesCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getAllDependencies request
         * @return TasksGetAllDependenciesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetAllDependenciesResponse execute() throws ApiException {
            ApiResponse<TasksGetAllDependenciesResponse> localVarResp = getAllDependenciesWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDependencies request with HTTP info returned
         * @return ApiResponse&lt;TasksGetAllDependenciesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetAllDependenciesResponse> executeWithHttpInfo() throws ApiException {
            return getAllDependenciesWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getAllDependencies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetAllDependenciesResponse> _callback) throws ApiException {
            return getAllDependenciesAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get dependencies from a task
     * Returns the compact representations of all of the dependencies of a task.
     * @param taskGid The task to operate on. (required)
     * @return GetAllDependenciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDependenciesRequestBuilder getAllDependencies(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetAllDependenciesRequestBuilder(taskGid);
    }
    private okhttp3.Call getByCustomIdCall(String workspaceGid, String customId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/tasks/custom_id/{custom_id}"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()))
            .replace("{" + "custom_id" + "}", localVarApiClient.escapeString(customId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCustomIdValidateBeforeCall(String workspaceGid, String customId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getByCustomId(Async)");
        }

        // verify the required parameter 'customId' is set
        if (customId == null) {
            throw new ApiException("Missing the required parameter 'customId' when calling getByCustomId(Async)");
        }

        return getByCustomIdCall(workspaceGid, customId, _callback);

    }


    private ApiResponse<TasksGetByCustomIdResponse> getByCustomIdWithHttpInfo(String workspaceGid, String customId) throws ApiException {
        okhttp3.Call localVarCall = getByCustomIdValidateBeforeCall(workspaceGid, customId, null);
        Type localVarReturnType = new TypeToken<TasksGetByCustomIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCustomIdAsync(String workspaceGid, String customId, final ApiCallback<TasksGetByCustomIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCustomIdValidateBeforeCall(workspaceGid, customId, _callback);
        Type localVarReturnType = new TypeToken<TasksGetByCustomIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCustomIdRequestBuilder {
        private final String workspaceGid;
        private final String customId;

        private GetByCustomIdRequestBuilder(String workspaceGid, String customId) {
            this.workspaceGid = workspaceGid;
            this.customId = customId;
        }

        /**
         * Build call for getByCustomId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved task for given custom ID. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCustomIdCall(workspaceGid, customId, _callback);
        }


        /**
         * Execute getByCustomId request
         * @return TasksGetByCustomIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved task for given custom ID. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetByCustomIdResponse execute() throws ApiException {
            ApiResponse<TasksGetByCustomIdResponse> localVarResp = getByCustomIdWithHttpInfo(workspaceGid, customId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCustomId request with HTTP info returned
         * @return ApiResponse&lt;TasksGetByCustomIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved task for given custom ID. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetByCustomIdResponse> executeWithHttpInfo() throws ApiException {
            return getByCustomIdWithHttpInfo(workspaceGid, customId);
        }

        /**
         * Execute getByCustomId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved task for given custom ID. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetByCustomIdResponse> _callback) throws ApiException {
            return getByCustomIdAsync(workspaceGid, customId, _callback);
        }
    }

    /**
     * Get a task for a given custom ID
     * Returns a task given a custom ID shortcode.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param customId Generated custom ID for a task. (required)
     * @return GetByCustomIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved task for given custom ID. </td><td>  -  </td></tr>
     </table>
     */
    public GetByCustomIdRequestBuilder getByCustomId(String workspaceGid, String customId) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        if (customId == null) throw new IllegalArgumentException("\"customId\" is required but got null");
            

        return new GetByCustomIdRequestBuilder(workspaceGid, customId);
    }
    private okhttp3.Call getDependentsCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/dependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDependentsValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getDependents(Async)");
        }

        return getDependentsCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetDependentsResponse> getDependentsWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getDependentsValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetDependentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDependentsAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetDependentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDependentsValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetDependentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDependentsRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetDependentsRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetDependentsRequestBuilder
         */
        public GetDependentsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetDependentsRequestBuilder
         */
        public GetDependentsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetDependentsRequestBuilder
         */
        public GetDependentsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetDependentsRequestBuilder
         */
        public GetDependentsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getDependents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDependentsCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getDependents request
         * @return TasksGetDependentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetDependentsResponse execute() throws ApiException {
            ApiResponse<TasksGetDependentsResponse> localVarResp = getDependentsWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDependents request with HTTP info returned
         * @return ApiResponse&lt;TasksGetDependentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetDependentsResponse> executeWithHttpInfo() throws ApiException {
            return getDependentsWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getDependents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetDependentsResponse> _callback) throws ApiException {
            return getDependentsAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get dependents from a task
     * Returns the compact representations of all of the dependents of a task.
     * @param taskGid The task to operate on. (required)
     * @return GetDependentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
     </table>
     */
    public GetDependentsRequestBuilder getDependents(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetDependentsRequestBuilder(taskGid);
    }
    private okhttp3.Call getMultipleCall(Boolean optPretty, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (section != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("section", section));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleValidateBeforeCall(Boolean optPretty, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return getMultipleCall(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields, _callback);

    }


    private ApiResponse<TasksGetMultipleResponse> getMultipleWithHttpInfo(Boolean optPretty, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getMultipleValidateBeforeCall(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleAsync(Boolean optPretty, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, List<String> optFields, final ApiCallback<TasksGetMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleValidateBeforeCall(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String assignee;
        private String project;
        private String section;
        private String workspace;
        private OffsetDateTime completedSince;
        private OffsetDateTime modifiedSince;
        private List<String> optFields;

        private GetMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.* (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder assignee(String assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set project
         * @param project The project to filter tasks on. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder project(String project) {
            this.project = project;
            return this;
        }
        
        /**
         * Set section
         * @param section The section to filter tasks on. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder section(String section) {
            this.section = section;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.* (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set completedSince
         * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder completedSince(OffsetDateTime completedSince) {
            this.completedSince = completedSince;
            return this;
        }
        
        /**
         * Set modifiedSince
         * @param modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.* (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder modifiedSince(OffsetDateTime modifiedSince) {
            this.modifiedSince = modifiedSince;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetMultipleRequestBuilder
         */
        public GetMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleCall(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields, _callback);
        }


        /**
         * Execute getMultiple request
         * @return TasksGetMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetMultipleResponse execute() throws ApiException {
            ApiResponse<TasksGetMultipleResponse> localVarResp = getMultipleWithHttpInfo(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultiple request with HTTP info returned
         * @return ApiResponse&lt;TasksGetMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetMultipleResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleWithHttpInfo(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields);
        }

        /**
         * Execute getMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetMultipleResponse> _callback) throws ApiException {
            return getMultipleAsync(optPretty, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, optFields, _callback);
        }
    }

    /**
     * Get multiple tasks
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](https://developers.asana.com/reference/rest-api-reference).
     * @return GetMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleRequestBuilder getMultiple() throws IllegalArgumentException {
        return new GetMultipleRequestBuilder();
    }
    private okhttp3.Call getMultipleWithTagCall(String tagGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_gid}/tasks"
            .replace("{" + "tag_gid" + "}", localVarApiClient.escapeString(tagGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleWithTagValidateBeforeCall(String tagGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagGid' is set
        if (tagGid == null) {
            throw new ApiException("Missing the required parameter 'tagGid' when calling getMultipleWithTag(Async)");
        }

        return getMultipleWithTagCall(tagGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetMultipleWithTagResponse> getMultipleWithTagWithHttpInfo(String tagGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getMultipleWithTagValidateBeforeCall(tagGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetMultipleWithTagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleWithTagAsync(String tagGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetMultipleWithTagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleWithTagValidateBeforeCall(tagGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetMultipleWithTagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleWithTagRequestBuilder {
        private final String tagGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetMultipleWithTagRequestBuilder(String tagGid) {
            this.tagGid = tagGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetMultipleWithTagRequestBuilder
         */
        public GetMultipleWithTagRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetMultipleWithTagRequestBuilder
         */
        public GetMultipleWithTagRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetMultipleWithTagRequestBuilder
         */
        public GetMultipleWithTagRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetMultipleWithTagRequestBuilder
         */
        public GetMultipleWithTagRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getMultipleWithTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleWithTagCall(tagGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getMultipleWithTag request
         * @return TasksGetMultipleWithTagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetMultipleWithTagResponse execute() throws ApiException {
            ApiResponse<TasksGetMultipleWithTagResponse> localVarResp = getMultipleWithTagWithHttpInfo(tagGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleWithTag request with HTTP info returned
         * @return ApiResponse&lt;TasksGetMultipleWithTagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetMultipleWithTagResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleWithTagWithHttpInfo(tagGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getMultipleWithTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetMultipleWithTagResponse> _callback) throws ApiException {
            return getMultipleWithTagAsync(tagGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get tasks from a tag
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @return GetMultipleWithTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleWithTagRequestBuilder getMultipleWithTag(String tagGid) throws IllegalArgumentException {
        if (tagGid == null) throw new IllegalArgumentException("\"tagGid\" is required but got null");
            

        return new GetMultipleWithTagRequestBuilder(tagGid);
    }
    private okhttp3.Call getSectionTasksCall(String sectionGid, Boolean optPretty, Integer limit, String offset, String completedSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}/tasks"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSectionTasksValidateBeforeCall(String sectionGid, Boolean optPretty, Integer limit, String offset, String completedSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling getSectionTasks(Async)");
        }

        return getSectionTasksCall(sectionGid, optPretty, limit, offset, completedSince, optFields, _callback);

    }


    private ApiResponse<TasksGetSectionTasksResponse> getSectionTasksWithHttpInfo(String sectionGid, Boolean optPretty, Integer limit, String offset, String completedSince, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getSectionTasksValidateBeforeCall(sectionGid, optPretty, limit, offset, completedSince, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetSectionTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSectionTasksAsync(String sectionGid, Boolean optPretty, Integer limit, String offset, String completedSince, List<String> optFields, final ApiCallback<TasksGetSectionTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSectionTasksValidateBeforeCall(sectionGid, optPretty, limit, offset, completedSince, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetSectionTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSectionTasksRequestBuilder {
        private final String sectionGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String completedSince;
        private List<String> optFields;

        private GetSectionTasksRequestBuilder(String sectionGid) {
            this.sectionGid = sectionGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetSectionTasksRequestBuilder
         */
        public GetSectionTasksRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetSectionTasksRequestBuilder
         */
        public GetSectionTasksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetSectionTasksRequestBuilder
         */
        public GetSectionTasksRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set completedSince
         * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
         * @return GetSectionTasksRequestBuilder
         */
        public GetSectionTasksRequestBuilder completedSince(String completedSince) {
            this.completedSince = completedSince;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetSectionTasksRequestBuilder
         */
        public GetSectionTasksRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getSectionTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSectionTasksCall(sectionGid, optPretty, limit, offset, completedSince, optFields, _callback);
        }


        /**
         * Execute getSectionTasks request
         * @return TasksGetSectionTasksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetSectionTasksResponse execute() throws ApiException {
            ApiResponse<TasksGetSectionTasksResponse> localVarResp = getSectionTasksWithHttpInfo(sectionGid, optPretty, limit, offset, completedSince, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSectionTasks request with HTTP info returned
         * @return ApiResponse&lt;TasksGetSectionTasksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetSectionTasksResponse> executeWithHttpInfo() throws ApiException {
            return getSectionTasksWithHttpInfo(sectionGid, optPretty, limit, offset, completedSince, optFields);
        }

        /**
         * Execute getSectionTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetSectionTasksResponse> _callback) throws ApiException {
            return getSectionTasksAsync(sectionGid, optPretty, limit, offset, completedSince, optFields, _callback);
        }
    }

    /**
     * Get tasks from a section
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @return GetSectionTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetSectionTasksRequestBuilder getSectionTasks(String sectionGid) throws IllegalArgumentException {
        if (sectionGid == null) throw new IllegalArgumentException("\"sectionGid\" is required but got null");
            

        return new GetSectionTasksRequestBuilder(sectionGid);
    }
    private okhttp3.Call getSubtaskListCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/subtasks"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubtaskListValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getSubtaskList(Async)");
        }

        return getSubtaskListCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetSubtaskListResponse> getSubtaskListWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getSubtaskListValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetSubtaskListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubtaskListAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetSubtaskListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubtaskListValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetSubtaskListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubtaskListRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetSubtaskListRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetSubtaskListRequestBuilder
         */
        public GetSubtaskListRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetSubtaskListRequestBuilder
         */
        public GetSubtaskListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetSubtaskListRequestBuilder
         */
        public GetSubtaskListRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetSubtaskListRequestBuilder
         */
        public GetSubtaskListRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getSubtaskList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubtaskListCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getSubtaskList request
         * @return TasksGetSubtaskListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetSubtaskListResponse execute() throws ApiException {
            ApiResponse<TasksGetSubtaskListResponse> localVarResp = getSubtaskListWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubtaskList request with HTTP info returned
         * @return ApiResponse&lt;TasksGetSubtaskListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetSubtaskListResponse> executeWithHttpInfo() throws ApiException {
            return getSubtaskListWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getSubtaskList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetSubtaskListResponse> _callback) throws ApiException {
            return getSubtaskListAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get subtasks from a task
     * Returns a compact representation of all of the subtasks of a task.
     * @param taskGid The task to operate on. (required)
     * @return GetSubtaskListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetSubtaskListRequestBuilder getSubtaskList(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetSubtaskListRequestBuilder(taskGid);
    }
    private okhttp3.Call getTaskRecordCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskRecordValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getTaskRecord(Async)");
        }

        return getTaskRecordCall(taskGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksGetTaskRecordResponse> getTaskRecordWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTaskRecordValidateBeforeCall(taskGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetTaskRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskRecordAsync(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback<TasksGetTaskRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskRecordValidateBeforeCall(taskGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetTaskRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskRecordRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetTaskRecordRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTaskRecordRequestBuilder
         */
        public GetTaskRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTaskRecordRequestBuilder
         */
        public GetTaskRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTaskRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskRecordCall(taskGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getTaskRecord request
         * @return TasksGetTaskRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetTaskRecordResponse execute() throws ApiException {
            ApiResponse<TasksGetTaskRecordResponse> localVarResp = getTaskRecordWithHttpInfo(taskGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskRecord request with HTTP info returned
         * @return ApiResponse&lt;TasksGetTaskRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetTaskRecordResponse> executeWithHttpInfo() throws ApiException {
            return getTaskRecordWithHttpInfo(taskGid, optPretty, optFields);
        }

        /**
         * Execute getTaskRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetTaskRecordResponse> _callback) throws ApiException {
            return getTaskRecordAsync(taskGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a task
     * Returns the complete task record for a single task.
     * @param taskGid The task to operate on. (required)
     * @return GetTaskRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskRecordRequestBuilder getTaskRecord(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetTaskRecordRequestBuilder(taskGid);
    }
    private okhttp3.Call getTasksByProjectCall(String projectGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/tasks"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksByProjectValidateBeforeCall(String projectGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getTasksByProject(Async)");
        }

        return getTasksByProjectCall(projectGid, completedSince, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetTasksByProjectResponse> getTasksByProjectWithHttpInfo(String projectGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTasksByProjectValidateBeforeCall(projectGid, completedSince, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetTasksByProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTasksByProjectAsync(String projectGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetTasksByProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksByProjectValidateBeforeCall(projectGid, completedSince, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetTasksByProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTasksByProjectRequestBuilder {
        private final String projectGid;
        private String completedSince;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetTasksByProjectRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set completedSince
         * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
         * @return GetTasksByProjectRequestBuilder
         */
        public GetTasksByProjectRequestBuilder completedSince(String completedSince) {
            this.completedSince = completedSince;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTasksByProjectRequestBuilder
         */
        public GetTasksByProjectRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetTasksByProjectRequestBuilder
         */
        public GetTasksByProjectRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetTasksByProjectRequestBuilder
         */
        public GetTasksByProjectRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTasksByProjectRequestBuilder
         */
        public GetTasksByProjectRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTasksByProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTasksByProjectCall(projectGid, completedSince, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getTasksByProject request
         * @return TasksGetTasksByProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetTasksByProjectResponse execute() throws ApiException {
            ApiResponse<TasksGetTasksByProjectResponse> localVarResp = getTasksByProjectWithHttpInfo(projectGid, completedSince, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTasksByProject request with HTTP info returned
         * @return ApiResponse&lt;TasksGetTasksByProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetTasksByProjectResponse> executeWithHttpInfo() throws ApiException {
            return getTasksByProjectWithHttpInfo(projectGid, completedSince, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getTasksByProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetTasksByProjectResponse> _callback) throws ApiException {
            return getTasksByProjectAsync(projectGid, completedSince, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get tasks from a project
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return GetTasksByProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksByProjectRequestBuilder getTasksByProject(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new GetTasksByProjectRequestBuilder(projectGid);
    }
    private okhttp3.Call getUserTaskListTasksCall(String userTaskListGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_task_lists/{user_task_list_gid}/tasks"
            .replace("{" + "user_task_list_gid" + "}", localVarApiClient.escapeString(userTaskListGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTaskListTasksValidateBeforeCall(String userTaskListGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userTaskListGid' is set
        if (userTaskListGid == null) {
            throw new ApiException("Missing the required parameter 'userTaskListGid' when calling getUserTaskListTasks(Async)");
        }

        return getUserTaskListTasksCall(userTaskListGid, completedSince, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TasksGetUserTaskListTasksResponse> getUserTaskListTasksWithHttpInfo(String userTaskListGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getUserTaskListTasksValidateBeforeCall(userTaskListGid, completedSince, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TasksGetUserTaskListTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserTaskListTasksAsync(String userTaskListGid, String completedSince, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TasksGetUserTaskListTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserTaskListTasksValidateBeforeCall(userTaskListGid, completedSince, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksGetUserTaskListTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserTaskListTasksRequestBuilder {
        private final String userTaskListGid;
        private String completedSince;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetUserTaskListTasksRequestBuilder(String userTaskListGid) {
            this.userTaskListGid = userTaskListGid;
        }

        /**
         * Set completedSince
         * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
         * @return GetUserTaskListTasksRequestBuilder
         */
        public GetUserTaskListTasksRequestBuilder completedSince(String completedSince) {
            this.completedSince = completedSince;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetUserTaskListTasksRequestBuilder
         */
        public GetUserTaskListTasksRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetUserTaskListTasksRequestBuilder
         */
        public GetUserTaskListTasksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetUserTaskListTasksRequestBuilder
         */
        public GetUserTaskListTasksRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetUserTaskListTasksRequestBuilder
         */
        public GetUserTaskListTasksRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getUserTaskListTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserTaskListTasksCall(userTaskListGid, completedSince, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getUserTaskListTasks request
         * @return TasksGetUserTaskListTasksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksGetUserTaskListTasksResponse execute() throws ApiException {
            ApiResponse<TasksGetUserTaskListTasksResponse> localVarResp = getUserTaskListTasksWithHttpInfo(userTaskListGid, completedSince, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserTaskListTasks request with HTTP info returned
         * @return ApiResponse&lt;TasksGetUserTaskListTasksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksGetUserTaskListTasksResponse> executeWithHttpInfo() throws ApiException {
            return getUserTaskListTasksWithHttpInfo(userTaskListGid, completedSince, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getUserTaskListTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksGetUserTaskListTasksResponse> _callback) throws ApiException {
            return getUserTaskListTasksAsync(userTaskListGid, completedSince, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get tasks from a user task list
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @param userTaskListGid Globally unique identifier for the user task list. (required)
     * @return GetUserTaskListTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserTaskListTasksRequestBuilder getUserTaskListTasks(String userTaskListGid) throws IllegalArgumentException {
        if (userTaskListGid == null) throw new IllegalArgumentException("\"userTaskListGid\" is required but got null");
            

        return new GetUserTaskListTasksRequestBuilder(userTaskListGid);
    }
    private okhttp3.Call removeFollowersFromTaskCall(String taskGid, TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksRemoveFollowersFromTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeFollowers"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFollowersFromTaskValidateBeforeCall(String taskGid, TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeFollowersFromTask(Async)");
        }

        // verify the required parameter 'tasksRemoveFollowersFromTaskRequest' is set
        if (tasksRemoveFollowersFromTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksRemoveFollowersFromTaskRequest' when calling removeFollowersFromTask(Async)");
        }

        return removeFollowersFromTaskCall(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksRemoveFollowersFromTaskResponse> removeFollowersFromTaskWithHttpInfo(String taskGid, TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeFollowersFromTaskValidateBeforeCall(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksRemoveFollowersFromTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFollowersFromTaskAsync(String taskGid, TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksRemoveFollowersFromTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFollowersFromTaskValidateBeforeCall(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksRemoveFollowersFromTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFollowersFromTaskRequestBuilder {
        private final String taskGid;
        private TaskRemoveFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private RemoveFollowersFromTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveFollowersFromTaskRequestBuilder
         */
        public RemoveFollowersFromTaskRequestBuilder data(TaskRemoveFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveFollowersFromTaskRequestBuilder
         */
        public RemoveFollowersFromTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return RemoveFollowersFromTaskRequestBuilder
         */
        public RemoveFollowersFromTaskRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for removeFollowersFromTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest = buildBodyParams();
            return removeFollowersFromTaskCall(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields, _callback);
        }

        private TasksRemoveFollowersFromTaskRequest buildBodyParams() {
            TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest = new TasksRemoveFollowersFromTaskRequest();
            tasksRemoveFollowersFromTaskRequest.data(this.data);
            return tasksRemoveFollowersFromTaskRequest;
        }

        /**
         * Execute removeFollowersFromTask request
         * @return TasksRemoveFollowersFromTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksRemoveFollowersFromTaskResponse execute() throws ApiException {
            TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest = buildBodyParams();
            ApiResponse<TasksRemoveFollowersFromTaskResponse> localVarResp = removeFollowersFromTaskWithHttpInfo(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFollowersFromTask request with HTTP info returned
         * @return ApiResponse&lt;TasksRemoveFollowersFromTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksRemoveFollowersFromTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest = buildBodyParams();
            return removeFollowersFromTaskWithHttpInfo(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields);
        }

        /**
         * Execute removeFollowersFromTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksRemoveFollowersFromTaskResponse> _callback) throws ApiException {
            TasksRemoveFollowersFromTaskRequest tasksRemoveFollowersFromTaskRequest = buildBodyParams();
            return removeFollowersFromTaskAsync(taskGid, tasksRemoveFollowersFromTaskRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Remove followers from a task
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @param taskGid The task to operate on. (required)
     * @param tasksRemoveFollowersFromTaskRequest The followers to remove from the task. (required)
     * @return RemoveFollowersFromTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFollowersFromTaskRequestBuilder removeFollowersFromTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new RemoveFollowersFromTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call removeProjectFromTaskCall(String taskGid, TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksRemoveProjectFromTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeProject"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectFromTaskValidateBeforeCall(String taskGid, TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeProjectFromTask(Async)");
        }

        // verify the required parameter 'tasksRemoveProjectFromTaskRequest' is set
        if (tasksRemoveProjectFromTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksRemoveProjectFromTaskRequest' when calling removeProjectFromTask(Async)");
        }

        return removeProjectFromTaskCall(taskGid, tasksRemoveProjectFromTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksRemoveProjectFromTaskResponse> removeProjectFromTaskWithHttpInfo(String taskGid, TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeProjectFromTaskValidateBeforeCall(taskGid, tasksRemoveProjectFromTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksRemoveProjectFromTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeProjectFromTaskAsync(String taskGid, TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest, Boolean optPretty, final ApiCallback<TasksRemoveProjectFromTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectFromTaskValidateBeforeCall(taskGid, tasksRemoveProjectFromTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksRemoveProjectFromTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveProjectFromTaskRequestBuilder {
        private final String taskGid;
        private TaskRemoveProjectRequest data;
        private Boolean optPretty;

        private RemoveProjectFromTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveProjectFromTaskRequestBuilder
         */
        public RemoveProjectFromTaskRequestBuilder data(TaskRemoveProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveProjectFromTaskRequestBuilder
         */
        public RemoveProjectFromTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeProjectFromTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest = buildBodyParams();
            return removeProjectFromTaskCall(taskGid, tasksRemoveProjectFromTaskRequest, optPretty, _callback);
        }

        private TasksRemoveProjectFromTaskRequest buildBodyParams() {
            TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest = new TasksRemoveProjectFromTaskRequest();
            tasksRemoveProjectFromTaskRequest.data(this.data);
            return tasksRemoveProjectFromTaskRequest;
        }

        /**
         * Execute removeProjectFromTask request
         * @return TasksRemoveProjectFromTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksRemoveProjectFromTaskResponse execute() throws ApiException {
            TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest = buildBodyParams();
            ApiResponse<TasksRemoveProjectFromTaskResponse> localVarResp = removeProjectFromTaskWithHttpInfo(taskGid, tasksRemoveProjectFromTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeProjectFromTask request with HTTP info returned
         * @return ApiResponse&lt;TasksRemoveProjectFromTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksRemoveProjectFromTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest = buildBodyParams();
            return removeProjectFromTaskWithHttpInfo(taskGid, tasksRemoveProjectFromTaskRequest, optPretty);
        }

        /**
         * Execute removeProjectFromTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksRemoveProjectFromTaskResponse> _callback) throws ApiException {
            TasksRemoveProjectFromTaskRequest tasksRemoveProjectFromTaskRequest = buildBodyParams();
            return removeProjectFromTaskAsync(taskGid, tasksRemoveProjectFromTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a project from a task
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param tasksRemoveProjectFromTaskRequest The project to remove the task from. (required)
     * @return RemoveProjectFromTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProjectFromTaskRequestBuilder removeProjectFromTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new RemoveProjectFromTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call removeTagFromTaskCall(String taskGid, TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksRemoveTagFromTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeTag"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagFromTaskValidateBeforeCall(String taskGid, TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeTagFromTask(Async)");
        }

        // verify the required parameter 'tasksRemoveTagFromTaskRequest' is set
        if (tasksRemoveTagFromTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksRemoveTagFromTaskRequest' when calling removeTagFromTask(Async)");
        }

        return removeTagFromTaskCall(taskGid, tasksRemoveTagFromTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksRemoveTagFromTaskResponse> removeTagFromTaskWithHttpInfo(String taskGid, TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeTagFromTaskValidateBeforeCall(taskGid, tasksRemoveTagFromTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksRemoveTagFromTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTagFromTaskAsync(String taskGid, TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest, Boolean optPretty, final ApiCallback<TasksRemoveTagFromTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagFromTaskValidateBeforeCall(taskGid, tasksRemoveTagFromTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksRemoveTagFromTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTagFromTaskRequestBuilder {
        private final String taskGid;
        private TaskRemoveTagRequest data;
        private Boolean optPretty;

        private RemoveTagFromTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveTagFromTaskRequestBuilder
         */
        public RemoveTagFromTaskRequestBuilder data(TaskRemoveTagRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveTagFromTaskRequestBuilder
         */
        public RemoveTagFromTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeTagFromTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest = buildBodyParams();
            return removeTagFromTaskCall(taskGid, tasksRemoveTagFromTaskRequest, optPretty, _callback);
        }

        private TasksRemoveTagFromTaskRequest buildBodyParams() {
            TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest = new TasksRemoveTagFromTaskRequest();
            tasksRemoveTagFromTaskRequest.data(this.data);
            return tasksRemoveTagFromTaskRequest;
        }

        /**
         * Execute removeTagFromTask request
         * @return TasksRemoveTagFromTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksRemoveTagFromTaskResponse execute() throws ApiException {
            TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest = buildBodyParams();
            ApiResponse<TasksRemoveTagFromTaskResponse> localVarResp = removeTagFromTaskWithHttpInfo(taskGid, tasksRemoveTagFromTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTagFromTask request with HTTP info returned
         * @return ApiResponse&lt;TasksRemoveTagFromTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksRemoveTagFromTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest = buildBodyParams();
            return removeTagFromTaskWithHttpInfo(taskGid, tasksRemoveTagFromTaskRequest, optPretty);
        }

        /**
         * Execute removeTagFromTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksRemoveTagFromTaskResponse> _callback) throws ApiException {
            TasksRemoveTagFromTaskRequest tasksRemoveTagFromTaskRequest = buildBodyParams();
            return removeTagFromTaskAsync(taskGid, tasksRemoveTagFromTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a tag from a task
     * Removes a tag from a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param tasksRemoveTagFromTaskRequest The tag to remove from the task. (required)
     * @return RemoveTagFromTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagFromTaskRequestBuilder removeTagFromTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new RemoveTagFromTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call searchInWorkspaceCall(String workspaceGid, Boolean optPretty, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/tasks/search"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (resourceSubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_subtype", resourceSubtype));
        }

        if (assigneeAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee.any", assigneeAny));
        }

        if (assigneeNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee.not", assigneeNot));
        }

        if (portfoliosAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolios.any", portfoliosAny));
        }

        if (projectsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.any", projectsAny));
        }

        if (projectsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.not", projectsNot));
        }

        if (projectsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.all", projectsAll));
        }

        if (sectionsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.any", sectionsAny));
        }

        if (sectionsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.not", sectionsNot));
        }

        if (sectionsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.all", sectionsAll));
        }

        if (tagsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.any", tagsAny));
        }

        if (tagsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.not", tagsNot));
        }

        if (tagsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.all", tagsAll));
        }

        if (teamsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teams.any", teamsAny));
        }

        if (followersNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("followers.not", followersNot));
        }

        if (createdByAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by.any", createdByAny));
        }

        if (createdByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by.not", createdByNot));
        }

        if (assignedByAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_by.any", assignedByAny));
        }

        if (assignedByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_by.not", assignedByNot));
        }

        if (likedByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("liked_by.not", likedByNot));
        }

        if (commentedOnByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commented_on_by.not", commentedOnByNot));
        }

        if (dueOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on.before", dueOnBefore));
        }

        if (dueOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on.after", dueOnAfter));
        }

        if (dueOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on", dueOn));
        }

        if (dueAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_at.before", dueAtBefore));
        }

        if (dueAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_at.after", dueAtAfter));
        }

        if (startOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on.before", startOnBefore));
        }

        if (startOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on.after", startOnAfter));
        }

        if (startOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on", startOn));
        }

        if (createdOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on.before", createdOnBefore));
        }

        if (createdOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on.after", createdOnAfter));
        }

        if (createdOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on", createdOn));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (completedOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on.before", completedOnBefore));
        }

        if (completedOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on.after", completedOnAfter));
        }

        if (completedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on", completedOn));
        }

        if (completedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_at.before", completedAtBefore));
        }

        if (completedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_at.after", completedAtAfter));
        }

        if (modifiedOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on.before", modifiedOnBefore));
        }

        if (modifiedOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on.after", modifiedOnAfter));
        }

        if (modifiedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on", modifiedOn));
        }

        if (modifiedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at.before", modifiedAtBefore));
        }

        if (modifiedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at.after", modifiedAtAfter));
        }

        if (isBlocking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_blocking", isBlocking));
        }

        if (isBlocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_blocked", isBlocked));
        }

        if (hasAttachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_attachment", hasAttachment));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (isSubtask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_subtask", isSubtask));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_ascending", sortAscending));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchInWorkspaceValidateBeforeCall(String workspaceGid, Boolean optPretty, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling searchInWorkspace(Async)");
        }

        return searchInWorkspaceCall(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields, _callback);

    }


    private ApiResponse<TasksSearchInWorkspaceResponse> searchInWorkspaceWithHttpInfo(String workspaceGid, Boolean optPretty, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = searchInWorkspaceValidateBeforeCall(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields, null);
        Type localVarReturnType = new TypeToken<TasksSearchInWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchInWorkspaceAsync(String workspaceGid, Boolean optPretty, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, List<String> optFields, final ApiCallback<TasksSearchInWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchInWorkspaceValidateBeforeCall(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksSearchInWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchInWorkspaceRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private String text;
        private String resourceSubtype;
        private String assigneeAny;
        private String assigneeNot;
        private String portfoliosAny;
        private String projectsAny;
        private String projectsNot;
        private String projectsAll;
        private String sectionsAny;
        private String sectionsNot;
        private String sectionsAll;
        private String tagsAny;
        private String tagsNot;
        private String tagsAll;
        private String teamsAny;
        private String followersNot;
        private String createdByAny;
        private String createdByNot;
        private String assignedByAny;
        private String assignedByNot;
        private String likedByNot;
        private String commentedOnByNot;
        private LocalDate dueOnBefore;
        private LocalDate dueOnAfter;
        private LocalDate dueOn;
        private OffsetDateTime dueAtBefore;
        private OffsetDateTime dueAtAfter;
        private LocalDate startOnBefore;
        private LocalDate startOnAfter;
        private LocalDate startOn;
        private LocalDate createdOnBefore;
        private LocalDate createdOnAfter;
        private LocalDate createdOn;
        private OffsetDateTime createdAtBefore;
        private OffsetDateTime createdAtAfter;
        private LocalDate completedOnBefore;
        private LocalDate completedOnAfter;
        private LocalDate completedOn;
        private OffsetDateTime completedAtBefore;
        private OffsetDateTime completedAtAfter;
        private LocalDate modifiedOnBefore;
        private LocalDate modifiedOnAfter;
        private LocalDate modifiedOn;
        private OffsetDateTime modifiedAtBefore;
        private OffsetDateTime modifiedAtAfter;
        private Boolean isBlocking;
        private Boolean isBlocked;
        private Boolean hasAttachment;
        private Boolean completed;
        private Boolean isSubtask;
        private String sortBy;
        private Boolean sortAscending;
        private List<String> optFields;

        private SearchInWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set text
         * @param text Performs full-text search on both task name and description (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set resourceSubtype
         * @param resourceSubtype Filters results by the task&#39;s resource_subtype (optional, default to milestone)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder resourceSubtype(String resourceSubtype) {
            this.resourceSubtype = resourceSubtype;
            return this;
        }
        
        /**
         * Set assigneeAny
         * @param assigneeAny Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder assigneeAny(String assigneeAny) {
            this.assigneeAny = assigneeAny;
            return this;
        }
        
        /**
         * Set assigneeNot
         * @param assigneeNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder assigneeNot(String assigneeNot) {
            this.assigneeNot = assigneeNot;
            return this;
        }
        
        /**
         * Set portfoliosAny
         * @param portfoliosAny Comma-separated list of portfolio IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder portfoliosAny(String portfoliosAny) {
            this.portfoliosAny = portfoliosAny;
            return this;
        }
        
        /**
         * Set projectsAny
         * @param projectsAny Comma-separated list of project IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder projectsAny(String projectsAny) {
            this.projectsAny = projectsAny;
            return this;
        }
        
        /**
         * Set projectsNot
         * @param projectsNot Comma-separated list of project IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder projectsNot(String projectsNot) {
            this.projectsNot = projectsNot;
            return this;
        }
        
        /**
         * Set projectsAll
         * @param projectsAll Comma-separated list of project IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder projectsAll(String projectsAll) {
            this.projectsAll = projectsAll;
            return this;
        }
        
        /**
         * Set sectionsAny
         * @param sectionsAny Comma-separated list of section or column IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder sectionsAny(String sectionsAny) {
            this.sectionsAny = sectionsAny;
            return this;
        }
        
        /**
         * Set sectionsNot
         * @param sectionsNot Comma-separated list of section or column IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder sectionsNot(String sectionsNot) {
            this.sectionsNot = sectionsNot;
            return this;
        }
        
        /**
         * Set sectionsAll
         * @param sectionsAll Comma-separated list of section or column IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder sectionsAll(String sectionsAll) {
            this.sectionsAll = sectionsAll;
            return this;
        }
        
        /**
         * Set tagsAny
         * @param tagsAny Comma-separated list of tag IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder tagsAny(String tagsAny) {
            this.tagsAny = tagsAny;
            return this;
        }
        
        /**
         * Set tagsNot
         * @param tagsNot Comma-separated list of tag IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder tagsNot(String tagsNot) {
            this.tagsNot = tagsNot;
            return this;
        }
        
        /**
         * Set tagsAll
         * @param tagsAll Comma-separated list of tag IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder tagsAll(String tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        
        /**
         * Set teamsAny
         * @param teamsAny Comma-separated list of team IDs (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder teamsAny(String teamsAny) {
            this.teamsAny = teamsAny;
            return this;
        }
        
        /**
         * Set followersNot
         * @param followersNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder followersNot(String followersNot) {
            this.followersNot = followersNot;
            return this;
        }
        
        /**
         * Set createdByAny
         * @param createdByAny Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdByAny(String createdByAny) {
            this.createdByAny = createdByAny;
            return this;
        }
        
        /**
         * Set createdByNot
         * @param createdByNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdByNot(String createdByNot) {
            this.createdByNot = createdByNot;
            return this;
        }
        
        /**
         * Set assignedByAny
         * @param assignedByAny Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder assignedByAny(String assignedByAny) {
            this.assignedByAny = assignedByAny;
            return this;
        }
        
        /**
         * Set assignedByNot
         * @param assignedByNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder assignedByNot(String assignedByNot) {
            this.assignedByNot = assignedByNot;
            return this;
        }
        
        /**
         * Set likedByNot
         * @param likedByNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder likedByNot(String likedByNot) {
            this.likedByNot = likedByNot;
            return this;
        }
        
        /**
         * Set commentedOnByNot
         * @param commentedOnByNot Comma-separated list of user identifiers (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder commentedOnByNot(String commentedOnByNot) {
            this.commentedOnByNot = commentedOnByNot;
            return this;
        }
        
        /**
         * Set dueOnBefore
         * @param dueOnBefore ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder dueOnBefore(LocalDate dueOnBefore) {
            this.dueOnBefore = dueOnBefore;
            return this;
        }
        
        /**
         * Set dueOnAfter
         * @param dueOnAfter ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder dueOnAfter(LocalDate dueOnAfter) {
            this.dueOnAfter = dueOnAfter;
            return this;
        }
        
        /**
         * Set dueOn
         * @param dueOn ISO 8601 date string or &#x60;null&#x60; (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder dueOn(LocalDate dueOn) {
            this.dueOn = dueOn;
            return this;
        }
        
        /**
         * Set dueAtBefore
         * @param dueAtBefore ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder dueAtBefore(OffsetDateTime dueAtBefore) {
            this.dueAtBefore = dueAtBefore;
            return this;
        }
        
        /**
         * Set dueAtAfter
         * @param dueAtAfter ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder dueAtAfter(OffsetDateTime dueAtAfter) {
            this.dueAtAfter = dueAtAfter;
            return this;
        }
        
        /**
         * Set startOnBefore
         * @param startOnBefore ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder startOnBefore(LocalDate startOnBefore) {
            this.startOnBefore = startOnBefore;
            return this;
        }
        
        /**
         * Set startOnAfter
         * @param startOnAfter ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder startOnAfter(LocalDate startOnAfter) {
            this.startOnAfter = startOnAfter;
            return this;
        }
        
        /**
         * Set startOn
         * @param startOn ISO 8601 date string or &#x60;null&#x60; (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder startOn(LocalDate startOn) {
            this.startOn = startOn;
            return this;
        }
        
        /**
         * Set createdOnBefore
         * @param createdOnBefore ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdOnBefore(LocalDate createdOnBefore) {
            this.createdOnBefore = createdOnBefore;
            return this;
        }
        
        /**
         * Set createdOnAfter
         * @param createdOnAfter ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdOnAfter(LocalDate createdOnAfter) {
            this.createdOnAfter = createdOnAfter;
            return this;
        }
        
        /**
         * Set createdOn
         * @param createdOn ISO 8601 date string or &#x60;null&#x60; (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdOn(LocalDate createdOn) {
            this.createdOn = createdOn;
            return this;
        }
        
        /**
         * Set createdAtBefore
         * @param createdAtBefore ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdAtBefore(OffsetDateTime createdAtBefore) {
            this.createdAtBefore = createdAtBefore;
            return this;
        }
        
        /**
         * Set createdAtAfter
         * @param createdAtAfter ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder createdAtAfter(OffsetDateTime createdAtAfter) {
            this.createdAtAfter = createdAtAfter;
            return this;
        }
        
        /**
         * Set completedOnBefore
         * @param completedOnBefore ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completedOnBefore(LocalDate completedOnBefore) {
            this.completedOnBefore = completedOnBefore;
            return this;
        }
        
        /**
         * Set completedOnAfter
         * @param completedOnAfter ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completedOnAfter(LocalDate completedOnAfter) {
            this.completedOnAfter = completedOnAfter;
            return this;
        }
        
        /**
         * Set completedOn
         * @param completedOn ISO 8601 date string or &#x60;null&#x60; (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completedOn(LocalDate completedOn) {
            this.completedOn = completedOn;
            return this;
        }
        
        /**
         * Set completedAtBefore
         * @param completedAtBefore ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completedAtBefore(OffsetDateTime completedAtBefore) {
            this.completedAtBefore = completedAtBefore;
            return this;
        }
        
        /**
         * Set completedAtAfter
         * @param completedAtAfter ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completedAtAfter(OffsetDateTime completedAtAfter) {
            this.completedAtAfter = completedAtAfter;
            return this;
        }
        
        /**
         * Set modifiedOnBefore
         * @param modifiedOnBefore ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder modifiedOnBefore(LocalDate modifiedOnBefore) {
            this.modifiedOnBefore = modifiedOnBefore;
            return this;
        }
        
        /**
         * Set modifiedOnAfter
         * @param modifiedOnAfter ISO 8601 date string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder modifiedOnAfter(LocalDate modifiedOnAfter) {
            this.modifiedOnAfter = modifiedOnAfter;
            return this;
        }
        
        /**
         * Set modifiedOn
         * @param modifiedOn ISO 8601 date string or &#x60;null&#x60; (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder modifiedOn(LocalDate modifiedOn) {
            this.modifiedOn = modifiedOn;
            return this;
        }
        
        /**
         * Set modifiedAtBefore
         * @param modifiedAtBefore ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder modifiedAtBefore(OffsetDateTime modifiedAtBefore) {
            this.modifiedAtBefore = modifiedAtBefore;
            return this;
        }
        
        /**
         * Set modifiedAtAfter
         * @param modifiedAtAfter ISO 8601 datetime string (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder modifiedAtAfter(OffsetDateTime modifiedAtAfter) {
            this.modifiedAtAfter = modifiedAtAfter;
            return this;
        }
        
        /**
         * Set isBlocking
         * @param isBlocking Filter to incomplete tasks with dependents (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder isBlocking(Boolean isBlocking) {
            this.isBlocking = isBlocking;
            return this;
        }
        
        /**
         * Set isBlocked
         * @param isBlocked Filter to tasks with incomplete dependencies (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder isBlocked(Boolean isBlocked) {
            this.isBlocked = isBlocked;
            return this;
        }
        
        /**
         * Set hasAttachment
         * @param hasAttachment Filter to tasks with attachments (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder hasAttachment(Boolean hasAttachment) {
            this.hasAttachment = hasAttachment;
            return this;
        }
        
        /**
         * Set completed
         * @param completed Filter to completed tasks (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder completed(Boolean completed) {
            this.completed = completed;
            return this;
        }
        
        /**
         * Set isSubtask
         * @param isSubtask Filter to subtasks (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder isSubtask(Boolean isSubtask) {
            this.isSubtask = isSubtask;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (optional, default to modified_at)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortAscending
         * @param sortAscending Default &#x60;false&#x60; (optional, default to false)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder sortAscending(Boolean sortAscending) {
            this.sortAscending = sortAscending;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return SearchInWorkspaceRequestBuilder
         */
        public SearchInWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for searchInWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchInWorkspaceCall(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields, _callback);
        }


        /**
         * Execute searchInWorkspace request
         * @return TasksSearchInWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public TasksSearchInWorkspaceResponse execute() throws ApiException {
            ApiResponse<TasksSearchInWorkspaceResponse> localVarResp = searchInWorkspaceWithHttpInfo(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchInWorkspace request with HTTP info returned
         * @return ApiResponse&lt;TasksSearchInWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksSearchInWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            return searchInWorkspaceWithHttpInfo(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields);
        }

        /**
         * Execute searchInWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksSearchInWorkspaceResponse> _callback) throws ApiException {
            return searchInWorkspaceAsync(workspaceGid, optPretty, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, optFields, _callback);
        }
    }

    /**
     * Search tasks in a workspace
     * To mirror the functionality of the Asana web app&#39;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#39;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#39;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return SearchInWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
     </table>
     */
    public SearchInWorkspaceRequestBuilder searchInWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new SearchInWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call setDependenciesForTaskCall(String taskGid, TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksSetDependenciesForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addDependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDependenciesForTaskValidateBeforeCall(String taskGid, TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling setDependenciesForTask(Async)");
        }

        // verify the required parameter 'tasksSetDependenciesForTaskRequest' is set
        if (tasksSetDependenciesForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksSetDependenciesForTaskRequest' when calling setDependenciesForTask(Async)");
        }

        return setDependenciesForTaskCall(taskGid, tasksSetDependenciesForTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksSetDependenciesForTaskResponse> setDependenciesForTaskWithHttpInfo(String taskGid, TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = setDependenciesForTaskValidateBeforeCall(taskGid, tasksSetDependenciesForTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksSetDependenciesForTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDependenciesForTaskAsync(String taskGid, TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest, Boolean optPretty, final ApiCallback<TasksSetDependenciesForTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDependenciesForTaskValidateBeforeCall(taskGid, tasksSetDependenciesForTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksSetDependenciesForTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDependenciesForTaskRequestBuilder {
        private final String taskGid;
        private ModifyDependenciesRequest data;
        private Boolean optPretty;

        private SetDependenciesForTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return SetDependenciesForTaskRequestBuilder
         */
        public SetDependenciesForTaskRequestBuilder data(ModifyDependenciesRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return SetDependenciesForTaskRequestBuilder
         */
        public SetDependenciesForTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for setDependenciesForTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest = buildBodyParams();
            return setDependenciesForTaskCall(taskGid, tasksSetDependenciesForTaskRequest, optPretty, _callback);
        }

        private TasksSetDependenciesForTaskRequest buildBodyParams() {
            TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest = new TasksSetDependenciesForTaskRequest();
            tasksSetDependenciesForTaskRequest.data(this.data);
            return tasksSetDependenciesForTaskRequest;
        }

        /**
         * Execute setDependenciesForTask request
         * @return TasksSetDependenciesForTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksSetDependenciesForTaskResponse execute() throws ApiException {
            TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest = buildBodyParams();
            ApiResponse<TasksSetDependenciesForTaskResponse> localVarResp = setDependenciesForTaskWithHttpInfo(taskGid, tasksSetDependenciesForTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDependenciesForTask request with HTTP info returned
         * @return ApiResponse&lt;TasksSetDependenciesForTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksSetDependenciesForTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest = buildBodyParams();
            return setDependenciesForTaskWithHttpInfo(taskGid, tasksSetDependenciesForTaskRequest, optPretty);
        }

        /**
         * Execute setDependenciesForTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksSetDependenciesForTaskResponse> _callback) throws ApiException {
            TasksSetDependenciesForTaskRequest tasksSetDependenciesForTaskRequest = buildBodyParams();
            return setDependenciesForTaskAsync(taskGid, tasksSetDependenciesForTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Set dependencies for a task
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param tasksSetDependenciesForTaskRequest The list of tasks to set as dependencies. (required)
     * @return SetDependenciesForTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
     </table>
     */
    public SetDependenciesForTaskRequestBuilder setDependenciesForTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new SetDependenciesForTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call setParentTaskCall(String taskGid, TasksSetParentTaskRequest tasksSetParentTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksSetParentTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/setParent"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setParentTaskValidateBeforeCall(String taskGid, TasksSetParentTaskRequest tasksSetParentTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling setParentTask(Async)");
        }

        // verify the required parameter 'tasksSetParentTaskRequest' is set
        if (tasksSetParentTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksSetParentTaskRequest' when calling setParentTask(Async)");
        }

        return setParentTaskCall(taskGid, tasksSetParentTaskRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksSetParentTaskResponse> setParentTaskWithHttpInfo(String taskGid, TasksSetParentTaskRequest tasksSetParentTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = setParentTaskValidateBeforeCall(taskGid, tasksSetParentTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksSetParentTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setParentTaskAsync(String taskGid, TasksSetParentTaskRequest tasksSetParentTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksSetParentTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setParentTaskValidateBeforeCall(taskGid, tasksSetParentTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksSetParentTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetParentTaskRequestBuilder {
        private final String taskGid;
        private TaskSetParentRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private SetParentTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return SetParentTaskRequestBuilder
         */
        public SetParentTaskRequestBuilder data(TaskSetParentRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return SetParentTaskRequestBuilder
         */
        public SetParentTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return SetParentTaskRequestBuilder
         */
        public SetParentTaskRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for setParentTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksSetParentTaskRequest tasksSetParentTaskRequest = buildBodyParams();
            return setParentTaskCall(taskGid, tasksSetParentTaskRequest, optPretty, optFields, _callback);
        }

        private TasksSetParentTaskRequest buildBodyParams() {
            TasksSetParentTaskRequest tasksSetParentTaskRequest = new TasksSetParentTaskRequest();
            tasksSetParentTaskRequest.data(this.data);
            return tasksSetParentTaskRequest;
        }

        /**
         * Execute setParentTask request
         * @return TasksSetParentTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public TasksSetParentTaskResponse execute() throws ApiException {
            TasksSetParentTaskRequest tasksSetParentTaskRequest = buildBodyParams();
            ApiResponse<TasksSetParentTaskResponse> localVarResp = setParentTaskWithHttpInfo(taskGid, tasksSetParentTaskRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setParentTask request with HTTP info returned
         * @return ApiResponse&lt;TasksSetParentTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksSetParentTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksSetParentTaskRequest tasksSetParentTaskRequest = buildBodyParams();
            return setParentTaskWithHttpInfo(taskGid, tasksSetParentTaskRequest, optPretty, optFields);
        }

        /**
         * Execute setParentTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksSetParentTaskResponse> _callback) throws ApiException {
            TasksSetParentTaskRequest tasksSetParentTaskRequest = buildBodyParams();
            return setParentTaskAsync(taskGid, tasksSetParentTaskRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Set the parent of a task
     * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @param taskGid The task to operate on. (required)
     * @param tasksSetParentTaskRequest The new parent of the subtask. (required)
     * @return SetParentTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
     </table>
     */
    public SetParentTaskRequestBuilder setParentTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new SetParentTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call setTaskDependentsCall(String taskGid, TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksSetTaskDependentsRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addDependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTaskDependentsValidateBeforeCall(String taskGid, TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling setTaskDependents(Async)");
        }

        // verify the required parameter 'tasksSetTaskDependentsRequest' is set
        if (tasksSetTaskDependentsRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksSetTaskDependentsRequest' when calling setTaskDependents(Async)");
        }

        return setTaskDependentsCall(taskGid, tasksSetTaskDependentsRequest, optPretty, _callback);

    }


    private ApiResponse<TasksSetTaskDependentsResponse> setTaskDependentsWithHttpInfo(String taskGid, TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = setTaskDependentsValidateBeforeCall(taskGid, tasksSetTaskDependentsRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksSetTaskDependentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTaskDependentsAsync(String taskGid, TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest, Boolean optPretty, final ApiCallback<TasksSetTaskDependentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTaskDependentsValidateBeforeCall(taskGid, tasksSetTaskDependentsRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksSetTaskDependentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetTaskDependentsRequestBuilder {
        private final String taskGid;
        private ModifyDependentsRequest data;
        private Boolean optPretty;

        private SetTaskDependentsRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return SetTaskDependentsRequestBuilder
         */
        public SetTaskDependentsRequestBuilder data(ModifyDependentsRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return SetTaskDependentsRequestBuilder
         */
        public SetTaskDependentsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for setTaskDependents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest = buildBodyParams();
            return setTaskDependentsCall(taskGid, tasksSetTaskDependentsRequest, optPretty, _callback);
        }

        private TasksSetTaskDependentsRequest buildBodyParams() {
            TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest = new TasksSetTaskDependentsRequest();
            tasksSetTaskDependentsRequest.data(this.data);
            return tasksSetTaskDependentsRequest;
        }

        /**
         * Execute setTaskDependents request
         * @return TasksSetTaskDependentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksSetTaskDependentsResponse execute() throws ApiException {
            TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest = buildBodyParams();
            ApiResponse<TasksSetTaskDependentsResponse> localVarResp = setTaskDependentsWithHttpInfo(taskGid, tasksSetTaskDependentsRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setTaskDependents request with HTTP info returned
         * @return ApiResponse&lt;TasksSetTaskDependentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksSetTaskDependentsResponse> executeWithHttpInfo() throws ApiException {
            TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest = buildBodyParams();
            return setTaskDependentsWithHttpInfo(taskGid, tasksSetTaskDependentsRequest, optPretty);
        }

        /**
         * Execute setTaskDependents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksSetTaskDependentsResponse> _callback) throws ApiException {
            TasksSetTaskDependentsRequest tasksSetTaskDependentsRequest = buildBodyParams();
            return setTaskDependentsAsync(taskGid, tasksSetTaskDependentsRequest, optPretty, _callback);
        }
    }

    /**
     * Set dependents for a task
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param tasksSetTaskDependentsRequest The list of tasks to add as dependents. (required)
     * @return SetTaskDependentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
     </table>
     */
    public SetTaskDependentsRequestBuilder setTaskDependents(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new SetTaskDependentsRequestBuilder(taskGid);
    }
    private okhttp3.Call unlinkDependenciesFromTaskCall(String taskGid, TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksUnlinkDependenciesFromTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeDependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkDependenciesFromTaskValidateBeforeCall(String taskGid, TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling unlinkDependenciesFromTask(Async)");
        }

        // verify the required parameter 'tasksUnlinkDependenciesFromTaskRequest' is set
        if (tasksUnlinkDependenciesFromTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksUnlinkDependenciesFromTaskRequest' when calling unlinkDependenciesFromTask(Async)");
        }

        return unlinkDependenciesFromTaskCall(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty, _callback);

    }


    private ApiResponse<TasksUnlinkDependenciesFromTaskResponse> unlinkDependenciesFromTaskWithHttpInfo(String taskGid, TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = unlinkDependenciesFromTaskValidateBeforeCall(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksUnlinkDependenciesFromTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unlinkDependenciesFromTaskAsync(String taskGid, TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest, Boolean optPretty, final ApiCallback<TasksUnlinkDependenciesFromTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkDependenciesFromTaskValidateBeforeCall(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksUnlinkDependenciesFromTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnlinkDependenciesFromTaskRequestBuilder {
        private final String taskGid;
        private ModifyDependenciesRequest data;
        private Boolean optPretty;

        private UnlinkDependenciesFromTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UnlinkDependenciesFromTaskRequestBuilder
         */
        public UnlinkDependenciesFromTaskRequestBuilder data(ModifyDependenciesRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UnlinkDependenciesFromTaskRequestBuilder
         */
        public UnlinkDependenciesFromTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for unlinkDependenciesFromTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest = buildBodyParams();
            return unlinkDependenciesFromTaskCall(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty, _callback);
        }

        private TasksUnlinkDependenciesFromTaskRequest buildBodyParams() {
            TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest = new TasksUnlinkDependenciesFromTaskRequest();
            tasksUnlinkDependenciesFromTaskRequest.data(this.data);
            return tasksUnlinkDependenciesFromTaskRequest;
        }

        /**
         * Execute unlinkDependenciesFromTask request
         * @return TasksUnlinkDependenciesFromTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksUnlinkDependenciesFromTaskResponse execute() throws ApiException {
            TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest = buildBodyParams();
            ApiResponse<TasksUnlinkDependenciesFromTaskResponse> localVarResp = unlinkDependenciesFromTaskWithHttpInfo(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unlinkDependenciesFromTask request with HTTP info returned
         * @return ApiResponse&lt;TasksUnlinkDependenciesFromTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksUnlinkDependenciesFromTaskResponse> executeWithHttpInfo() throws ApiException {
            TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest = buildBodyParams();
            return unlinkDependenciesFromTaskWithHttpInfo(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty);
        }

        /**
         * Execute unlinkDependenciesFromTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksUnlinkDependenciesFromTaskResponse> _callback) throws ApiException {
            TasksUnlinkDependenciesFromTaskRequest tasksUnlinkDependenciesFromTaskRequest = buildBodyParams();
            return unlinkDependenciesFromTaskAsync(taskGid, tasksUnlinkDependenciesFromTaskRequest, optPretty, _callback);
        }
    }

    /**
     * Unlink dependencies from a task
     * Unlinks a set of dependencies from this task.
     * @param taskGid The task to operate on. (required)
     * @param tasksUnlinkDependenciesFromTaskRequest The list of tasks to unlink as dependencies. (required)
     * @return UnlinkDependenciesFromTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkDependenciesFromTaskRequestBuilder unlinkDependenciesFromTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new UnlinkDependenciesFromTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call unlinkDependentsCall(String taskGid, TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksUnlinkDependentsRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeDependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlinkDependentsValidateBeforeCall(String taskGid, TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling unlinkDependents(Async)");
        }

        // verify the required parameter 'tasksUnlinkDependentsRequest' is set
        if (tasksUnlinkDependentsRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksUnlinkDependentsRequest' when calling unlinkDependents(Async)");
        }

        return unlinkDependentsCall(taskGid, tasksUnlinkDependentsRequest, optPretty, _callback);

    }


    private ApiResponse<TasksUnlinkDependentsResponse> unlinkDependentsWithHttpInfo(String taskGid, TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = unlinkDependentsValidateBeforeCall(taskGid, tasksUnlinkDependentsRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TasksUnlinkDependentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unlinkDependentsAsync(String taskGid, TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest, Boolean optPretty, final ApiCallback<TasksUnlinkDependentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlinkDependentsValidateBeforeCall(taskGid, tasksUnlinkDependentsRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TasksUnlinkDependentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnlinkDependentsRequestBuilder {
        private final String taskGid;
        private ModifyDependentsRequest data;
        private Boolean optPretty;

        private UnlinkDependentsRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UnlinkDependentsRequestBuilder
         */
        public UnlinkDependentsRequestBuilder data(ModifyDependentsRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UnlinkDependentsRequestBuilder
         */
        public UnlinkDependentsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for unlinkDependents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest = buildBodyParams();
            return unlinkDependentsCall(taskGid, tasksUnlinkDependentsRequest, optPretty, _callback);
        }

        private TasksUnlinkDependentsRequest buildBodyParams() {
            TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest = new TasksUnlinkDependentsRequest();
            tasksUnlinkDependentsRequest.data(this.data);
            return tasksUnlinkDependentsRequest;
        }

        /**
         * Execute unlinkDependents request
         * @return TasksUnlinkDependentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
         </table>
         */
        public TasksUnlinkDependentsResponse execute() throws ApiException {
            TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest = buildBodyParams();
            ApiResponse<TasksUnlinkDependentsResponse> localVarResp = unlinkDependentsWithHttpInfo(taskGid, tasksUnlinkDependentsRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unlinkDependents request with HTTP info returned
         * @return ApiResponse&lt;TasksUnlinkDependentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksUnlinkDependentsResponse> executeWithHttpInfo() throws ApiException {
            TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest = buildBodyParams();
            return unlinkDependentsWithHttpInfo(taskGid, tasksUnlinkDependentsRequest, optPretty);
        }

        /**
         * Execute unlinkDependents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksUnlinkDependentsResponse> _callback) throws ApiException {
            TasksUnlinkDependentsRequest tasksUnlinkDependentsRequest = buildBodyParams();
            return unlinkDependentsAsync(taskGid, tasksUnlinkDependentsRequest, optPretty, _callback);
        }
    }

    /**
     * Unlink dependents from a task
     * Unlinks a set of dependents from this task.
     * @param taskGid The task to operate on. (required)
     * @param tasksUnlinkDependentsRequest The list of tasks to remove as dependents. (required)
     * @return UnlinkDependentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
     </table>
     */
    public UnlinkDependentsRequestBuilder unlinkDependents(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new UnlinkDependentsRequestBuilder(taskGid);
    }
    private okhttp3.Call updateTaskRecordCall(String taskGid, TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tasksUpdateTaskRecordRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskRecordValidateBeforeCall(String taskGid, TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling updateTaskRecord(Async)");
        }

        // verify the required parameter 'tasksUpdateTaskRecordRequest' is set
        if (tasksUpdateTaskRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'tasksUpdateTaskRecordRequest' when calling updateTaskRecord(Async)");
        }

        return updateTaskRecordCall(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TasksUpdateTaskRecordResponse> updateTaskRecordWithHttpInfo(String taskGid, TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateTaskRecordValidateBeforeCall(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TasksUpdateTaskRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaskRecordAsync(String taskGid, TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TasksUpdateTaskRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskRecordValidateBeforeCall(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TasksUpdateTaskRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaskRecordRequestBuilder {
        private final String taskGid;
        private TaskRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateTaskRecordRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateTaskRecordRequestBuilder
         */
        public UpdateTaskRecordRequestBuilder data(TaskRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateTaskRecordRequestBuilder
         */
        public UpdateTaskRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateTaskRecordRequestBuilder
         */
        public UpdateTaskRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateTaskRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest = buildBodyParams();
            return updateTaskRecordCall(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields, _callback);
        }

        private TasksUpdateTaskRecordRequest buildBodyParams() {
            TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest = new TasksUpdateTaskRecordRequest();
            tasksUpdateTaskRecordRequest.data(this.data);
            return tasksUpdateTaskRecordRequest;
        }

        /**
         * Execute updateTaskRecord request
         * @return TasksUpdateTaskRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public TasksUpdateTaskRecordResponse execute() throws ApiException {
            TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest = buildBodyParams();
            ApiResponse<TasksUpdateTaskRecordResponse> localVarResp = updateTaskRecordWithHttpInfo(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTaskRecord request with HTTP info returned
         * @return ApiResponse&lt;TasksUpdateTaskRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TasksUpdateTaskRecordResponse> executeWithHttpInfo() throws ApiException {
            TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest = buildBodyParams();
            return updateTaskRecordWithHttpInfo(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateTaskRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TasksUpdateTaskRecordResponse> _callback) throws ApiException {
            TasksUpdateTaskRecordRequest tasksUpdateTaskRecordRequest = buildBodyParams();
            return updateTaskRecordAsync(taskGid, tasksUpdateTaskRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a task
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @param taskGid The task to operate on. (required)
     * @param tasksUpdateTaskRecordRequest The task to update. (required)
     * @return UpdateTaskRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskRecordRequestBuilder updateTaskRecord(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new UpdateTaskRecordRequestBuilder(taskGid);
    }
}
