/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuditLogApiGetAuditLogEventsResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuditLogApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditLogApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuditLogApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAuditLogEventsCall(String workspaceGid, OffsetDateTime startAt, OffsetDateTime endAt, String eventType, String actorType, String actorGid, String resourceGid, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/audit_log_events"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_at", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_at", endAt));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_type", eventType));
        }

        if (actorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor_type", actorType));
        }

        if (actorGid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor_gid", actorGid));
        }

        if (resourceGid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_gid", resourceGid));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuditLogEventsValidateBeforeCall(String workspaceGid, OffsetDateTime startAt, OffsetDateTime endAt, String eventType, String actorType, String actorGid, String resourceGid, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getAuditLogEvents(Async)");
        }

        return getAuditLogEventsCall(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, _callback);

    }


    private ApiResponse<AuditLogApiGetAuditLogEventsResponse> getAuditLogEventsWithHttpInfo(String workspaceGid, OffsetDateTime startAt, OffsetDateTime endAt, String eventType, String actorType, String actorGid, String resourceGid, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getAuditLogEventsValidateBeforeCall(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, null);
        Type localVarReturnType = new TypeToken<AuditLogApiGetAuditLogEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuditLogEventsAsync(String workspaceGid, OffsetDateTime startAt, OffsetDateTime endAt, String eventType, String actorType, String actorGid, String resourceGid, Integer limit, String offset, final ApiCallback<AuditLogApiGetAuditLogEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuditLogEventsValidateBeforeCall(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AuditLogApiGetAuditLogEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAuditLogEventsRequestBuilder {
        private final String workspaceGid;
        private OffsetDateTime startAt;
        private OffsetDateTime endAt;
        private String eventType;
        private String actorType;
        private String actorGid;
        private String resourceGid;
        private Integer limit;
        private String offset;

        private GetAuditLogEventsRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set startAt
         * @param startAt Filter to events created after this time (inclusive). (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder startAt(OffsetDateTime startAt) {
            this.startAt = startAt;
            return this;
        }
        
        /**
         * Set endAt
         * @param endAt Filter to events created before this time (exclusive). (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder endAt(OffsetDateTime endAt) {
            this.endAt = endAt;
            return this;
        }
        
        /**
         * Set eventType
         * @param eventType Filter to events of this type. Refer to the [supported audit log events](/docs/audit-log-events#supported-audit-log-events) for a full list of values. (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder eventType(String eventType) {
            this.eventType = eventType;
            return this;
        }
        
        /**
         * Set actorType
         * @param actorType Filter to events with an actor of this type. This only needs to be included if querying for actor types without an ID. If &#x60;actor_gid&#x60; is included, this should be excluded. (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder actorType(String actorType) {
            this.actorType = actorType;
            return this;
        }
        
        /**
         * Set actorGid
         * @param actorGid Filter to events triggered by the actor with this ID. (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder actorGid(String actorGid) {
            this.actorGid = actorGid;
            return this;
        }
        
        /**
         * Set resourceGid
         * @param resourceGid Filter to events with this resource ID. (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder resourceGid(String resourceGid) {
            this.resourceGid = resourceGid;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetAuditLogEventsRequestBuilder
         */
        public GetAuditLogEventsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAuditLogEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> AuditLogEvents were successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuditLogEventsCall(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, _callback);
        }


        /**
         * Execute getAuditLogEvents request
         * @return AuditLogApiGetAuditLogEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> AuditLogEvents were successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public AuditLogApiGetAuditLogEventsResponse execute() throws ApiException {
            ApiResponse<AuditLogApiGetAuditLogEventsResponse> localVarResp = getAuditLogEventsWithHttpInfo(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAuditLogEvents request with HTTP info returned
         * @return ApiResponse&lt;AuditLogApiGetAuditLogEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> AuditLogEvents were successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuditLogApiGetAuditLogEventsResponse> executeWithHttpInfo() throws ApiException {
            return getAuditLogEventsWithHttpInfo(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset);
        }

        /**
         * Execute getAuditLogEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> AuditLogEvents were successfully retrieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuditLogApiGetAuditLogEventsResponse> _callback) throws ApiException {
            return getAuditLogEventsAsync(workspaceGid, startAt, endAt, eventType, actorType, actorGid, resourceGid, limit, offset, _callback);
        }
    }

    /**
     * Get audit log events
     * Retrieve the audit log events that have been captured in your domain.  This endpoint will return a list of [AuditLogEvent](https://raw.githubusercontent.com) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.  There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](https://raw.githubusercontent.com) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.  The list of events will always be [paginated](https://raw.githubusercontent.com). The default limit is 1000 events. The next set of events can be retrieved using the &#x60;offset&#x60; from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return &#x60;null&#x60; for the &#x60;next_page&#x60; field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a &#x60;next_page&#x60; with an &#x60;offset&#x60;, subsequent requests can be made with the latest &#x60;offset&#x60; to poll for new events that match the provided filters.  *Note: If the filters you provided match events in your domain and &#x60;next_page&#x60; is present in the response, we will continue to send &#x60;next_page&#x60; on subsequent requests even when there are no more events that match the filters. This was put in place so that you can implement an audit log stream that will return future events that match these filters. If you are not interested in future events that match the filters you have defined, you can rely on checking empty &#x60;data&#x60; response for the end of current events that match your filters.*  When no &#x60;offset&#x60; is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](https://raw.githubusercontent.com) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return GetAuditLogEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AuditLogEvents were successfully retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetAuditLogEventsRequestBuilder getAuditLogEvents(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new GetAuditLogEventsRequestBuilder(workspaceGid);
    }
}
