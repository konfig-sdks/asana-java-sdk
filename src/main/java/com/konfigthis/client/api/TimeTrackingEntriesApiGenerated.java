/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTimeTrackingEntryRequest;
import com.konfigthis.client.model.TimeTrackingEntriesCreateNewTimeEntryRecordRequest;
import com.konfigthis.client.model.TimeTrackingEntriesCreateNewTimeEntryRecordResponse;
import com.konfigthis.client.model.TimeTrackingEntriesDeleteTimeEntryResponse;
import com.konfigthis.client.model.TimeTrackingEntriesGetForTaskResponse;
import com.konfigthis.client.model.TimeTrackingEntriesGetRecordResponse;
import com.konfigthis.client.model.TimeTrackingEntriesUpdateTimeTrackingEntryRequest;
import com.konfigthis.client.model.TimeTrackingEntriesUpdateTimeTrackingEntryResponse;
import com.konfigthis.client.model.UpdateTimeTrackingEntryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingEntriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingEntriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingEntriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTimeEntryRecordCall(String taskGid, TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingEntriesCreateNewTimeEntryRecordRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/time_tracking_entries"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTimeEntryRecordValidateBeforeCall(String taskGid, TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling createNewTimeEntryRecord(Async)");
        }

        // verify the required parameter 'timeTrackingEntriesCreateNewTimeEntryRecordRequest' is set
        if (timeTrackingEntriesCreateNewTimeEntryRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingEntriesCreateNewTimeEntryRecordRequest' when calling createNewTimeEntryRecord(Async)");
        }

        return createNewTimeEntryRecordCall(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> createNewTimeEntryRecordWithHttpInfo(String taskGid, TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewTimeEntryRecordValidateBeforeCall(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesCreateNewTimeEntryRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTimeEntryRecordAsync(String taskGid, TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTimeEntryRecordValidateBeforeCall(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesCreateNewTimeEntryRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTimeEntryRecordRequestBuilder {
        private final String taskGid;
        private CreateTimeTrackingEntryRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewTimeEntryRecordRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewTimeEntryRecordRequestBuilder
         */
        public CreateNewTimeEntryRecordRequestBuilder data(CreateTimeTrackingEntryRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewTimeEntryRecordRequestBuilder
         */
        public CreateNewTimeEntryRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewTimeEntryRecordRequestBuilder
         */
        public CreateNewTimeEntryRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewTimeEntryRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a time tracking entry for the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest = buildBodyParams();
            return createNewTimeEntryRecordCall(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields, _callback);
        }

        private TimeTrackingEntriesCreateNewTimeEntryRecordRequest buildBodyParams() {
            TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest = new TimeTrackingEntriesCreateNewTimeEntryRecordRequest();
            timeTrackingEntriesCreateNewTimeEntryRecordRequest.data(this.data);
            return timeTrackingEntriesCreateNewTimeEntryRecordRequest;
        }

        /**
         * Execute createNewTimeEntryRecord request
         * @return TimeTrackingEntriesCreateNewTimeEntryRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a time tracking entry for the task. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingEntriesCreateNewTimeEntryRecordResponse execute() throws ApiException {
            TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest = buildBodyParams();
            ApiResponse<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> localVarResp = createNewTimeEntryRecordWithHttpInfo(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTimeEntryRecord request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingEntriesCreateNewTimeEntryRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a time tracking entry for the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> executeWithHttpInfo() throws ApiException {
            TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest = buildBodyParams();
            return createNewTimeEntryRecordWithHttpInfo(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewTimeEntryRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a time tracking entry for the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> _callback) throws ApiException {
            TimeTrackingEntriesCreateNewTimeEntryRecordRequest timeTrackingEntriesCreateNewTimeEntryRecordRequest = buildBodyParams();
            return createNewTimeEntryRecordAsync(taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a time tracking entry
     * Creates a time tracking entry on a given task.  Returns the record of the newly created time tracking entry.
     * @param taskGid The task to operate on. (required)
     * @param timeTrackingEntriesCreateNewTimeEntryRecordRequest Information about the time tracking entry. (required)
     * @return CreateNewTimeEntryRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a time tracking entry for the task. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTimeEntryRecordRequestBuilder createNewTimeEntryRecord(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new CreateNewTimeEntryRecordRequestBuilder(taskGid);
    }
    private okhttp3.Call deleteTimeEntryCall(String timeTrackingEntryGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking_entries/{time_tracking_entry_gid}"
            .replace("{" + "time_tracking_entry_gid" + "}", localVarApiClient.escapeString(timeTrackingEntryGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTimeEntryValidateBeforeCall(String timeTrackingEntryGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeTrackingEntryGid' is set
        if (timeTrackingEntryGid == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingEntryGid' when calling deleteTimeEntry(Async)");
        }

        return deleteTimeEntryCall(timeTrackingEntryGid, optPretty, _callback);

    }


    private ApiResponse<TimeTrackingEntriesDeleteTimeEntryResponse> deleteTimeEntryWithHttpInfo(String timeTrackingEntryGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteTimeEntryValidateBeforeCall(timeTrackingEntryGid, optPretty, null);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesDeleteTimeEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTimeEntryAsync(String timeTrackingEntryGid, Boolean optPretty, final ApiCallback<TimeTrackingEntriesDeleteTimeEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTimeEntryValidateBeforeCall(timeTrackingEntryGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesDeleteTimeEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTimeEntryRequestBuilder {
        private final String timeTrackingEntryGid;
        private Boolean optPretty;

        private DeleteTimeEntryRequestBuilder(String timeTrackingEntryGid) {
            this.timeTrackingEntryGid = timeTrackingEntryGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteTimeEntryRequestBuilder
         */
        public DeleteTimeEntryRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteTimeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTimeEntryCall(timeTrackingEntryGid, optPretty, _callback);
        }


        /**
         * Execute deleteTimeEntry request
         * @return TimeTrackingEntriesDeleteTimeEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingEntriesDeleteTimeEntryResponse execute() throws ApiException {
            ApiResponse<TimeTrackingEntriesDeleteTimeEntryResponse> localVarResp = deleteTimeEntryWithHttpInfo(timeTrackingEntryGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTimeEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingEntriesDeleteTimeEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingEntriesDeleteTimeEntryResponse> executeWithHttpInfo() throws ApiException {
            return deleteTimeEntryWithHttpInfo(timeTrackingEntryGid, optPretty);
        }

        /**
         * Execute deleteTimeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingEntriesDeleteTimeEntryResponse> _callback) throws ApiException {
            return deleteTimeEntryAsync(timeTrackingEntryGid, optPretty, _callback);
        }
    }

    /**
     * Delete a time tracking entry
     * A specific, existing time tracking entry can be deleted by making a &#x60;DELETE&#x60; request on the URL for that time tracking entry.  Returns an empty data record.
     * @param timeTrackingEntryGid Globally unique identifier for the time tracking entry. (required)
     * @return DeleteTimeEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified time tracking entry. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTimeEntryRequestBuilder deleteTimeEntry(String timeTrackingEntryGid) throws IllegalArgumentException {
        if (timeTrackingEntryGid == null) throw new IllegalArgumentException("\"timeTrackingEntryGid\" is required but got null");
            

        return new DeleteTimeEntryRequestBuilder(timeTrackingEntryGid);
    }
    private okhttp3.Call getForTaskCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/time_tracking_entries"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForTaskValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getForTask(Async)");
        }

        return getForTaskCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TimeTrackingEntriesGetForTaskResponse> getForTaskWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getForTaskValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesGetForTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForTaskAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TimeTrackingEntriesGetForTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForTaskValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesGetForTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForTaskRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetForTaskRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetForTaskRequestBuilder
         */
        public GetForTaskRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetForTaskRequestBuilder
         */
        public GetForTaskRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetForTaskRequestBuilder
         */
        public GetForTaskRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetForTaskRequestBuilder
         */
        public GetForTaskRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getForTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForTaskCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getForTask request
         * @return TimeTrackingEntriesGetForTaskResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entries. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingEntriesGetForTaskResponse execute() throws ApiException {
            ApiResponse<TimeTrackingEntriesGetForTaskResponse> localVarResp = getForTaskWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForTask request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingEntriesGetForTaskResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingEntriesGetForTaskResponse> executeWithHttpInfo() throws ApiException {
            return getForTaskWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getForTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingEntriesGetForTaskResponse> _callback) throws ApiException {
            return getForTaskAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get time tracking entries for a task
     * Returns time tracking entries for a given task.
     * @param taskGid The task to operate on. (required)
     * @return GetForTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entries. </td><td>  -  </td></tr>
     </table>
     */
    public GetForTaskRequestBuilder getForTask(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetForTaskRequestBuilder(taskGid);
    }
    private okhttp3.Call getRecordCall(String timeTrackingEntryGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_tracking_entries/{time_tracking_entry_gid}"
            .replace("{" + "time_tracking_entry_gid" + "}", localVarApiClient.escapeString(timeTrackingEntryGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String timeTrackingEntryGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeTrackingEntryGid' is set
        if (timeTrackingEntryGid == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingEntryGid' when calling getRecord(Async)");
        }

        return getRecordCall(timeTrackingEntryGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TimeTrackingEntriesGetRecordResponse> getRecordWithHttpInfo(String timeTrackingEntryGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(timeTrackingEntryGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String timeTrackingEntryGid, Boolean optPretty, List<String> optFields, final ApiCallback<TimeTrackingEntriesGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(timeTrackingEntryGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String timeTrackingEntryGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String timeTrackingEntryGid) {
            this.timeTrackingEntryGid = timeTrackingEntryGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(timeTrackingEntryGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return TimeTrackingEntriesGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingEntriesGetRecordResponse execute() throws ApiException {
            ApiResponse<TimeTrackingEntriesGetRecordResponse> localVarResp = getRecordWithHttpInfo(timeTrackingEntryGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingEntriesGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingEntriesGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(timeTrackingEntryGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingEntriesGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(timeTrackingEntryGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a time tracking entry
     * Returns the complete time tracking entry record for a single time tracking entry.
     * @param timeTrackingEntryGid Globally unique identifier for the time tracking entry. (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested time tracking entry. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String timeTrackingEntryGid) throws IllegalArgumentException {
        if (timeTrackingEntryGid == null) throw new IllegalArgumentException("\"timeTrackingEntryGid\" is required but got null");
            

        return new GetRecordRequestBuilder(timeTrackingEntryGid);
    }
    private okhttp3.Call updateTimeTrackingEntryCall(String timeTrackingEntryGid, TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeTrackingEntriesUpdateTimeTrackingEntryRequest;

        // create path and map variables
        String localVarPath = "/time_tracking_entries/{time_tracking_entry_gid}"
            .replace("{" + "time_tracking_entry_gid" + "}", localVarApiClient.escapeString(timeTrackingEntryGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeTrackingEntryValidateBeforeCall(String timeTrackingEntryGid, TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeTrackingEntryGid' is set
        if (timeTrackingEntryGid == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingEntryGid' when calling updateTimeTrackingEntry(Async)");
        }

        // verify the required parameter 'timeTrackingEntriesUpdateTimeTrackingEntryRequest' is set
        if (timeTrackingEntriesUpdateTimeTrackingEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'timeTrackingEntriesUpdateTimeTrackingEntryRequest' when calling updateTimeTrackingEntry(Async)");
        }

        return updateTimeTrackingEntryCall(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> updateTimeTrackingEntryWithHttpInfo(String timeTrackingEntryGid, TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateTimeTrackingEntryValidateBeforeCall(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesUpdateTimeTrackingEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimeTrackingEntryAsync(String timeTrackingEntryGid, TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeTrackingEntryValidateBeforeCall(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimeTrackingEntriesUpdateTimeTrackingEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTimeTrackingEntryRequestBuilder {
        private final String timeTrackingEntryGid;
        private UpdateTimeTrackingEntryRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateTimeTrackingEntryRequestBuilder(String timeTrackingEntryGid) {
            this.timeTrackingEntryGid = timeTrackingEntryGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateTimeTrackingEntryRequestBuilder
         */
        public UpdateTimeTrackingEntryRequestBuilder data(UpdateTimeTrackingEntryRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateTimeTrackingEntryRequestBuilder
         */
        public UpdateTimeTrackingEntryRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateTimeTrackingEntryRequestBuilder
         */
        public UpdateTimeTrackingEntryRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateTimeTrackingEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest = buildBodyParams();
            return updateTimeTrackingEntryCall(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields, _callback);
        }

        private TimeTrackingEntriesUpdateTimeTrackingEntryRequest buildBodyParams() {
            TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest = new TimeTrackingEntriesUpdateTimeTrackingEntryRequest();
            timeTrackingEntriesUpdateTimeTrackingEntryRequest.data(this.data);
            return timeTrackingEntriesUpdateTimeTrackingEntryRequest;
        }

        /**
         * Execute updateTimeTrackingEntry request
         * @return TimeTrackingEntriesUpdateTimeTrackingEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public TimeTrackingEntriesUpdateTimeTrackingEntryResponse execute() throws ApiException {
            TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest = buildBodyParams();
            ApiResponse<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> localVarResp = updateTimeTrackingEntryWithHttpInfo(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTimeTrackingEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeTrackingEntriesUpdateTimeTrackingEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> executeWithHttpInfo() throws ApiException {
            TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest = buildBodyParams();
            return updateTimeTrackingEntryWithHttpInfo(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields);
        }

        /**
         * Execute updateTimeTrackingEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the time tracking entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> _callback) throws ApiException {
            TimeTrackingEntriesUpdateTimeTrackingEntryRequest timeTrackingEntriesUpdateTimeTrackingEntryRequest = buildBodyParams();
            return updateTimeTrackingEntryAsync(timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a time tracking entry
     * A specific, existing time tracking entry can be updated by making a &#x60;PUT&#x60; request on the URL for that time tracking entry. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
     * @param timeTrackingEntryGid Globally unique identifier for the time tracking entry. (required)
     * @param timeTrackingEntriesUpdateTimeTrackingEntryRequest The updated fields for the time tracking entry. (required)
     * @return UpdateTimeTrackingEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the time tracking entry. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeTrackingEntryRequestBuilder updateTimeTrackingEntry(String timeTrackingEntryGid) throws IllegalArgumentException {
        if (timeTrackingEntryGid == null) throw new IllegalArgumentException("\"timeTrackingEntryGid\" is required but got null");
            

        return new UpdateTimeTrackingEntryRequestBuilder(timeTrackingEntryGid);
    }
}
