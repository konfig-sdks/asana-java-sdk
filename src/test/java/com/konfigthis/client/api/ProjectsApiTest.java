/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddCustomFieldSettingRequest;
import com.konfigthis.client.model.AddFollowersRequest;
import com.konfigthis.client.model.AddMembersRequest;
import com.konfigthis.client.model.ProjectDuplicateRequest;
import com.konfigthis.client.model.ProjectRequest;
import com.konfigthis.client.model.ProjectSaveAsTemplateRequest;
import com.konfigthis.client.model.ProjectUpdateRequest;
import com.konfigthis.client.model.ProjectsAddCustomFieldSettingRequest;
import com.konfigthis.client.model.ProjectsAddCustomFieldSettingResponse;
import com.konfigthis.client.model.ProjectsAddFollowersToProjectRequest;
import com.konfigthis.client.model.ProjectsAddFollowersToProjectResponse;
import com.konfigthis.client.model.ProjectsAddMembersToProjectRequest;
import com.konfigthis.client.model.ProjectsAddMembersToProjectResponse;
import com.konfigthis.client.model.ProjectsCreateInWorkspaceRequest;
import com.konfigthis.client.model.ProjectsCreateInWorkspaceResponse;
import com.konfigthis.client.model.ProjectsCreateNewProjectRecordRequest;
import com.konfigthis.client.model.ProjectsCreateNewProjectRecordResponse;
import com.konfigthis.client.model.ProjectsCreateProjectForTeamRequest;
import com.konfigthis.client.model.ProjectsCreateProjectForTeamResponse;
import com.konfigthis.client.model.ProjectsCreateProjectTemplateJobRequest;
import com.konfigthis.client.model.ProjectsCreateProjectTemplateJobResponse;
import com.konfigthis.client.model.ProjectsDeleteProjectByIdResponse;
import com.konfigthis.client.model.ProjectsDuplicateProjectJobRequest;
import com.konfigthis.client.model.ProjectsDuplicateProjectJobResponse;
import com.konfigthis.client.model.ProjectsGetAllInWorkspaceResponse;
import com.konfigthis.client.model.ProjectsGetProjectRecordResponse;
import com.konfigthis.client.model.ProjectsGetTaskCountsResponse;
import com.konfigthis.client.model.ProjectsGetTeamProjectsResponse;
import com.konfigthis.client.model.ProjectsListMultipleResponse;
import com.konfigthis.client.model.ProjectsRemoveCustomFieldRequest;
import com.konfigthis.client.model.ProjectsRemoveCustomFieldResponse;
import com.konfigthis.client.model.ProjectsRemoveMembersFromProjectRequest;
import com.konfigthis.client.model.ProjectsRemoveMembersFromProjectResponse;
import com.konfigthis.client.model.ProjectsRemoveProjectFollowersRequest;
import com.konfigthis.client.model.ProjectsRemoveProjectFollowersResponse;
import com.konfigthis.client.model.ProjectsTaskProjectsListResponse;
import com.konfigthis.client.model.ProjectsUpdateProjectRecordRequest;
import com.konfigthis.client.model.ProjectsUpdateProjectRecordResponse;
import com.konfigthis.client.model.RemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.RemoveFollowersRequest;
import com.konfigthis.client.model.RemoveMembersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private static ProjectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectsApi(apiClient);
    }

    /**
     * Add a custom field to a project
     *
     * Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCustomFieldSettingTest() throws ApiException {
        String projectGid = null;
        AddCustomFieldSettingRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsAddCustomFieldSettingResponse response = api.addCustomFieldSetting(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Add followers to a project
     *
     * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFollowersToProjectTest() throws ApiException {
        String projectGid = null;
        AddFollowersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsAddFollowersToProjectResponse response = api.addFollowersToProject(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Add users to a project
     *
     * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user&#39;s default notification settings (i.e., in the \&quot;Notifcations\&quot; tab of \&quot;My Profile Settings\&quot;) will override this endpoint&#39;s default behavior of setting \&quot;Tasks added\&quot; notifications to &#x60;false&#x60;. Returns the updated project record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersToProjectTest() throws ApiException {
        String projectGid = null;
        AddMembersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsAddMembersToProjectResponse response = api.addMembersToProject(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a project in a workspace
     *
     * Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        ProjectRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsCreateInWorkspaceResponse response = api.createInWorkspace(workspaceGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a project
     *
     * Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the &#x60;workspace&#x60; parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a &#x60;team&#x60; to share the project with.  Returns the full record of the newly created project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewProjectRecordTest() throws ApiException {
        ProjectRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsCreateNewProjectRecordResponse response = api.createNewProjectRecord()
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a project in a team
     *
     * Creates a project shared with the given team.  Returns the full record of the newly created project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectForTeamTest() throws ApiException {
        String teamGid = null;
        ProjectRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsCreateProjectForTeamResponse response = api.createProjectForTeam(teamGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a project template from a project
     *
     * Creates and returns a job that will asynchronously handle the project template creation. Note that while the resulting project template can be accessed with the API, it won&#39;t be visible in the Asana UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTemplateJobTest() throws ApiException {
        String projectGid = null;
        ProjectSaveAsTemplateRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsCreateProjectTemplateJobResponse response = api.createProjectTemplateJob(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectByIdTest() throws ApiException {
        String projectGid = null;
        Boolean optPretty = null;
        ProjectsDeleteProjectByIdResponse response = api.deleteProjectById(projectGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Duplicate a project
     *
     * Creates and returns a job that will asynchronously handle the duplication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateProjectJobTest() throws ApiException {
        String projectGid = null;
        ProjectDuplicateRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsDuplicateProjectJobResponse response = api.duplicateProjectJob(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all projects in a workspace
     *
     * Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the &#x60;/teams/{team_gid}/projects&#x60; endpoint.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        Boolean archived = null;
        List<String> optFields = null;
        ProjectsGetAllInWorkspaceResponse response = api.getAllInWorkspace(workspaceGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .archived(archived)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a project
     *
     * Returns the complete project record for a single project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectRecordTest() throws ApiException {
        String projectGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsGetProjectRecordResponse response = api.getProjectRecord(projectGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get task count of a project
     *
     * Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](https://developers.asana.com/reference/rest-api-reference) using &#x60;opt_fields&#x60; to get any information from this endpoint.  This endpoint has an additional [rate limit](https://developers.asana.com/reference/rest-api-reference) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the &#x60;num_tasks&#x60;, &#x60;num_incomplete_tasks&#x60;, and &#x60;num_completed_tasks&#x60; counts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskCountsTest() throws ApiException {
        String projectGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsGetTaskCountsResponse response = api.getTaskCounts(projectGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a team&#39;s projects
     *
     * Returns the compact project records for all projects in the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamProjectsTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        Boolean archived = null;
        List<String> optFields = null;
        ProjectsGetTeamProjectsResponse response = api.getTeamProjects(teamGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .archived(archived)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple projects
     *
     * Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultipleTest() throws ApiException {
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        String workspace = null;
        String team = null;
        Boolean archived = null;
        List<String> optFields = null;
        ProjectsListMultipleResponse response = api.listMultiple()
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .workspace(workspace)
                .team(team)
                .archived(archived)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a custom field from a project
     *
     * Removes a custom field setting from a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCustomFieldTest() throws ApiException {
        String projectGid = null;
        RemoveCustomFieldSettingRequest data = null;
        Boolean optPretty = null;
        ProjectsRemoveCustomFieldResponse response = api.removeCustomField(projectGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove users from a project
     *
     * Removes the specified list of users from members of the project. Returns the updated project record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMembersFromProjectTest() throws ApiException {
        String projectGid = null;
        RemoveMembersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsRemoveMembersFromProjectResponse response = api.removeMembersFromProject(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove followers from a project
     *
     * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProjectFollowersTest() throws ApiException {
        String projectGid = null;
        RemoveFollowersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsRemoveProjectFollowersResponse response = api.removeProjectFollowers(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get projects a task is in
     *
     * Returns a compact representation of all of the projects the task is in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskProjectsListTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        ProjectsTaskProjectsListResponse response = api.taskProjectsList(taskGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a project
     *
     * A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectRecordTest() throws ApiException {
        String projectGid = null;
        ProjectUpdateRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        ProjectsUpdateProjectRecordResponse response = api.updateProjectRecord(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
