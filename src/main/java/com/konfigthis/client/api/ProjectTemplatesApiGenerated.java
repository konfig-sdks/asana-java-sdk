/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectTemplateInstantiateProjectRequest;
import com.konfigthis.client.model.ProjectTemplatesDeleteTemplateRecordResponse;
import com.konfigthis.client.model.ProjectTemplatesGetAllTemplateRecordsResponse;
import com.konfigthis.client.model.ProjectTemplatesGetRecordResponse;
import com.konfigthis.client.model.ProjectTemplatesInstantiateProjectJobRequest;
import com.konfigthis.client.model.ProjectTemplatesInstantiateProjectJobResponse;
import com.konfigthis.client.model.ProjectTemplatesListMultipleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectTemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectTemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectTemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteTemplateRecordCall(String projectTemplateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_templates/{project_template_gid}"
            .replace("{" + "project_template_gid" + "}", localVarApiClient.escapeString(projectTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateRecordValidateBeforeCall(String projectTemplateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectTemplateGid' is set
        if (projectTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'projectTemplateGid' when calling deleteTemplateRecord(Async)");
        }

        return deleteTemplateRecordCall(projectTemplateGid, optPretty, _callback);

    }


    private ApiResponse<ProjectTemplatesDeleteTemplateRecordResponse> deleteTemplateRecordWithHttpInfo(String projectTemplateGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateRecordValidateBeforeCall(projectTemplateGid, optPretty, null);
        Type localVarReturnType = new TypeToken<ProjectTemplatesDeleteTemplateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTemplateRecordAsync(String projectTemplateGid, Boolean optPretty, final ApiCallback<ProjectTemplatesDeleteTemplateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateRecordValidateBeforeCall(projectTemplateGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<ProjectTemplatesDeleteTemplateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTemplateRecordRequestBuilder {
        private final String projectTemplateGid;
        private Boolean optPretty;

        private DeleteTemplateRecordRequestBuilder(String projectTemplateGid) {
            this.projectTemplateGid = projectTemplateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteTemplateRecordRequestBuilder
         */
        public DeleteTemplateRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteTemplateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTemplateRecordCall(projectTemplateGid, optPretty, _callback);
        }


        /**
         * Execute deleteTemplateRecord request
         * @return ProjectTemplatesDeleteTemplateRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project template. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectTemplatesDeleteTemplateRecordResponse execute() throws ApiException {
            ApiResponse<ProjectTemplatesDeleteTemplateRecordResponse> localVarResp = deleteTemplateRecordWithHttpInfo(projectTemplateGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTemplateRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectTemplatesDeleteTemplateRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project template. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectTemplatesDeleteTemplateRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteTemplateRecordWithHttpInfo(projectTemplateGid, optPretty);
        }

        /**
         * Execute deleteTemplateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectTemplatesDeleteTemplateRecordResponse> _callback) throws ApiException {
            return deleteTemplateRecordAsync(projectTemplateGid, optPretty, _callback);
        }
    }

    /**
     * Delete a project template
     * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
     * @param projectTemplateGid Globally unique identifier for the project template. (required)
     * @return DeleteTemplateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified project template. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTemplateRecordRequestBuilder deleteTemplateRecord(String projectTemplateGid) throws IllegalArgumentException {
        if (projectTemplateGid == null) throw new IllegalArgumentException("\"projectTemplateGid\" is required but got null");
            

        return new DeleteTemplateRecordRequestBuilder(projectTemplateGid);
    }
    private okhttp3.Call getAllTemplateRecordsCall(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/project_templates"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTemplateRecordsValidateBeforeCall(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling getAllTemplateRecords(Async)");
        }

        return getAllTemplateRecordsCall(teamGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<ProjectTemplatesGetAllTemplateRecordsResponse> getAllTemplateRecordsWithHttpInfo(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getAllTemplateRecordsValidateBeforeCall(teamGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectTemplatesGetAllTemplateRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTemplateRecordsAsync(String teamGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<ProjectTemplatesGetAllTemplateRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTemplateRecordsValidateBeforeCall(teamGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectTemplatesGetAllTemplateRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTemplateRecordsRequestBuilder {
        private final String teamGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetAllTemplateRecordsRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetAllTemplateRecordsRequestBuilder
         */
        public GetAllTemplateRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetAllTemplateRecordsRequestBuilder
         */
        public GetAllTemplateRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetAllTemplateRecordsRequestBuilder
         */
        public GetAllTemplateRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetAllTemplateRecordsRequestBuilder
         */
        public GetAllTemplateRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getAllTemplateRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTemplateRecordsCall(teamGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getAllTemplateRecords request
         * @return ProjectTemplatesGetAllTemplateRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectTemplatesGetAllTemplateRecordsResponse execute() throws ApiException {
            ApiResponse<ProjectTemplatesGetAllTemplateRecordsResponse> localVarResp = getAllTemplateRecordsWithHttpInfo(teamGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTemplateRecords request with HTTP info returned
         * @return ApiResponse&lt;ProjectTemplatesGetAllTemplateRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectTemplatesGetAllTemplateRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getAllTemplateRecordsWithHttpInfo(teamGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getAllTemplateRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectTemplatesGetAllTemplateRecordsResponse> _callback) throws ApiException {
            return getAllTemplateRecordsAsync(teamGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get a team&#39;s project templates
     * Returns the compact project template records for all project templates in the team.
     * @param teamGid Globally unique identifier for the team. (required)
     * @return GetAllTemplateRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s project templates. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTemplateRecordsRequestBuilder getAllTemplateRecords(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new GetAllTemplateRecordsRequestBuilder(teamGid);
    }
    private okhttp3.Call getRecordCall(String projectTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_templates/{project_template_gid}"
            .replace("{" + "project_template_gid" + "}", localVarApiClient.escapeString(projectTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String projectTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectTemplateGid' is set
        if (projectTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'projectTemplateGid' when calling getRecord(Async)");
        }

        return getRecordCall(projectTemplateGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectTemplatesGetRecordResponse> getRecordWithHttpInfo(String projectTemplateGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(projectTemplateGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectTemplatesGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String projectTemplateGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectTemplatesGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(projectTemplateGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectTemplatesGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String projectTemplateGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String projectTemplateGid) {
            this.projectTemplateGid = projectTemplateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(projectTemplateGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return ProjectTemplatesGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project template. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectTemplatesGetRecordResponse execute() throws ApiException {
            ApiResponse<ProjectTemplatesGetRecordResponse> localVarResp = getRecordWithHttpInfo(projectTemplateGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectTemplatesGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project template. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectTemplatesGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(projectTemplateGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectTemplatesGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(projectTemplateGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a project template
     * Returns the complete project template record for a single project template.
     * @param projectTemplateGid Globally unique identifier for the project template. (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project template. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String projectTemplateGid) throws IllegalArgumentException {
        if (projectTemplateGid == null) throw new IllegalArgumentException("\"projectTemplateGid\" is required but got null");
            

        return new GetRecordRequestBuilder(projectTemplateGid);
    }
    private okhttp3.Call instantiateProjectJobCall(String projectTemplateGid, Boolean optPretty, List<String> optFields, ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectTemplatesInstantiateProjectJobRequest;

        // create path and map variables
        String localVarPath = "/project_templates/{project_template_gid}/instantiateProject"
            .replace("{" + "project_template_gid" + "}", localVarApiClient.escapeString(projectTemplateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instantiateProjectJobValidateBeforeCall(String projectTemplateGid, Boolean optPretty, List<String> optFields, ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectTemplateGid' is set
        if (projectTemplateGid == null) {
            throw new ApiException("Missing the required parameter 'projectTemplateGid' when calling instantiateProjectJob(Async)");
        }

        return instantiateProjectJobCall(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest, _callback);

    }


    private ApiResponse<ProjectTemplatesInstantiateProjectJobResponse> instantiateProjectJobWithHttpInfo(String projectTemplateGid, Boolean optPretty, List<String> optFields, ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest) throws ApiException {
        okhttp3.Call localVarCall = instantiateProjectJobValidateBeforeCall(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest, null);
        Type localVarReturnType = new TypeToken<ProjectTemplatesInstantiateProjectJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call instantiateProjectJobAsync(String projectTemplateGid, Boolean optPretty, List<String> optFields, ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest, final ApiCallback<ProjectTemplatesInstantiateProjectJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instantiateProjectJobValidateBeforeCall(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectTemplatesInstantiateProjectJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InstantiateProjectJobRequestBuilder {
        private final String projectTemplateGid;
        private ProjectTemplateInstantiateProjectRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private InstantiateProjectJobRequestBuilder(String projectTemplateGid) {
            this.projectTemplateGid = projectTemplateGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return InstantiateProjectJobRequestBuilder
         */
        public InstantiateProjectJobRequestBuilder data(ProjectTemplateInstantiateProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return InstantiateProjectJobRequestBuilder
         */
        public InstantiateProjectJobRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return InstantiateProjectJobRequestBuilder
         */
        public InstantiateProjectJobRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for instantiateProjectJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest = buildBodyParams();
            return instantiateProjectJobCall(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest, _callback);
        }

        private ProjectTemplatesInstantiateProjectJobRequest buildBodyParams() {
            ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest = new ProjectTemplatesInstantiateProjectJobRequest();
            projectTemplatesInstantiateProjectJobRequest.data(this.data);
            return projectTemplatesInstantiateProjectJobRequest;
        }

        /**
         * Execute instantiateProjectJob request
         * @return ProjectTemplatesInstantiateProjectJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectTemplatesInstantiateProjectJobResponse execute() throws ApiException {
            ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest = buildBodyParams();
            ApiResponse<ProjectTemplatesInstantiateProjectJobResponse> localVarResp = instantiateProjectJobWithHttpInfo(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute instantiateProjectJob request with HTTP info returned
         * @return ApiResponse&lt;ProjectTemplatesInstantiateProjectJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectTemplatesInstantiateProjectJobResponse> executeWithHttpInfo() throws ApiException {
            ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest = buildBodyParams();
            return instantiateProjectJobWithHttpInfo(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest);
        }

        /**
         * Execute instantiateProjectJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project instantiation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectTemplatesInstantiateProjectJobResponse> _callback) throws ApiException {
            ProjectTemplatesInstantiateProjectJobRequest projectTemplatesInstantiateProjectJobRequest = buildBodyParams();
            return instantiateProjectJobAsync(projectTemplateGid, optPretty, optFields, projectTemplatesInstantiateProjectJobRequest, _callback);
        }
    }

    /**
     * Instantiate a project from a project template
     * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](https://raw.githubusercontent.com). Then, from the response, copy the &#x60;gid&#x60; from the object in the &#x60;requested_dates&#x60; array. This &#x60;gid&#x60; should be used in &#x60;requested_dates&#x60; to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](https://raw.githubusercontent.com) parameter._
     * @param projectTemplateGid Globally unique identifier for the project template. (required)
     * @return InstantiateProjectJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle project instantiation. </td><td>  -  </td></tr>
     </table>
     */
    public InstantiateProjectJobRequestBuilder instantiateProjectJob(String projectTemplateGid) throws IllegalArgumentException {
        if (projectTemplateGid == null) throw new IllegalArgumentException("\"projectTemplateGid\" is required but got null");
            

        return new InstantiateProjectJobRequestBuilder(projectTemplateGid);
    }
    private okhttp3.Call listMultipleCall(Boolean optPretty, String workspace, String team, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleValidateBeforeCall(Boolean optPretty, String workspace, String team, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleCall(optPretty, workspace, team, limit, offset, optFields, _callback);

    }


    private ApiResponse<ProjectTemplatesListMultipleResponse> listMultipleWithHttpInfo(Boolean optPretty, String workspace, String team, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, workspace, team, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectTemplatesListMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleAsync(Boolean optPretty, String workspace, String team, Integer limit, String offset, List<String> optFields, final ApiCallback<ProjectTemplatesListMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, workspace, team, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectTemplatesListMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleRequestBuilder {
        private Boolean optPretty;
        private String workspace;
        private String team;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace The workspace to filter results on. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set team
         * @param team The team to filter projects on. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s or workspace&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleCall(optPretty, workspace, team, limit, offset, optFields, _callback);
        }


        /**
         * Execute listMultiple request
         * @return ProjectTemplatesListMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s or workspace&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectTemplatesListMultipleResponse execute() throws ApiException {
            ApiResponse<ProjectTemplatesListMultipleResponse> localVarResp = listMultipleWithHttpInfo(optPretty, workspace, team, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultiple request with HTTP info returned
         * @return ApiResponse&lt;ProjectTemplatesListMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s or workspace&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectTemplatesListMultipleResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleWithHttpInfo(optPretty, workspace, team, limit, offset, optFields);
        }

        /**
         * Execute listMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s or workspace&#39;s project templates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectTemplatesListMultipleResponse> _callback) throws ApiException {
            return listMultipleAsync(optPretty, workspace, team, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get multiple project templates
     * Returns the compact project template records for all project templates in the given team or workspace.
     * @return ListMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s or workspace&#39;s project templates. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleRequestBuilder listMultiple() throws IllegalArgumentException {
        return new ListMultipleRequestBuilder();
    }
}
