/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.StatusUpdateRequest;
import com.konfigthis.client.model.StatusUpdatesCreateNewStatusUpdateRecordRequest;
import com.konfigthis.client.model.StatusUpdatesCreateNewStatusUpdateRecordResponse;
import com.konfigthis.client.model.StatusUpdatesDeleteSpecificStatusUpdateResponse;
import com.konfigthis.client.model.StatusUpdatesGetCompactRecordsResponse;
import com.konfigthis.client.model.StatusUpdatesGetRecordByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatusUpdatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusUpdatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatusUpdatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewStatusUpdateRecordCall(StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statusUpdatesCreateNewStatusUpdateRecordRequest;

        // create path and map variables
        String localVarPath = "/status_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewStatusUpdateRecordValidateBeforeCall(StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusUpdatesCreateNewStatusUpdateRecordRequest' is set
        if (statusUpdatesCreateNewStatusUpdateRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'statusUpdatesCreateNewStatusUpdateRecordRequest' when calling createNewStatusUpdateRecord(Async)");
        }

        return createNewStatusUpdateRecordCall(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<StatusUpdatesCreateNewStatusUpdateRecordResponse> createNewStatusUpdateRecordWithHttpInfo(StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewStatusUpdateRecordValidateBeforeCall(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<StatusUpdatesCreateNewStatusUpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewStatusUpdateRecordAsync(StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<StatusUpdatesCreateNewStatusUpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewStatusUpdateRecordValidateBeforeCall(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<StatusUpdatesCreateNewStatusUpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewStatusUpdateRecordRequestBuilder {
        private StatusUpdateRequest data;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private CreateNewStatusUpdateRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder data(StatusUpdateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewStatusUpdateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new status update. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordCall(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields, _callback);
        }

        private StatusUpdatesCreateNewStatusUpdateRecordRequest buildBodyParams() {
            StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest = new StatusUpdatesCreateNewStatusUpdateRecordRequest();
            statusUpdatesCreateNewStatusUpdateRecordRequest.data(this.data);
            return statusUpdatesCreateNewStatusUpdateRecordRequest;
        }

        /**
         * Execute createNewStatusUpdateRecord request
         * @return StatusUpdatesCreateNewStatusUpdateRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new status update. </td><td>  -  </td></tr>
         </table>
         */
        public StatusUpdatesCreateNewStatusUpdateRecordResponse execute() throws ApiException {
            StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            ApiResponse<StatusUpdatesCreateNewStatusUpdateRecordResponse> localVarResp = createNewStatusUpdateRecordWithHttpInfo(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewStatusUpdateRecord request with HTTP info returned
         * @return ApiResponse&lt;StatusUpdatesCreateNewStatusUpdateRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new status update. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusUpdatesCreateNewStatusUpdateRecordResponse> executeWithHttpInfo() throws ApiException {
            StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordWithHttpInfo(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields);
        }

        /**
         * Execute createNewStatusUpdateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new status update. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusUpdatesCreateNewStatusUpdateRecordResponse> _callback) throws ApiException {
            StatusUpdatesCreateNewStatusUpdateRecordRequest statusUpdatesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordAsync(statusUpdatesCreateNewStatusUpdateRecordRequest, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Create a status update
     * Creates a new status update on an object. Returns the full record of the newly created status update.
     * @param statusUpdatesCreateNewStatusUpdateRecordRequest The status update to create. (required)
     * @return CreateNewStatusUpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new status update. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewStatusUpdateRecordRequestBuilder createNewStatusUpdateRecord() throws IllegalArgumentException {
        return new CreateNewStatusUpdateRecordRequestBuilder();
    }
    private okhttp3.Call deleteSpecificStatusUpdateCall(String statusUpdateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status_updates/{status_update_gid}"
            .replace("{" + "status_update_gid" + "}", localVarApiClient.escapeString(statusUpdateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificStatusUpdateValidateBeforeCall(String statusUpdateGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusUpdateGid' is set
        if (statusUpdateGid == null) {
            throw new ApiException("Missing the required parameter 'statusUpdateGid' when calling deleteSpecificStatusUpdate(Async)");
        }

        return deleteSpecificStatusUpdateCall(statusUpdateGid, optPretty, _callback);

    }


    private ApiResponse<StatusUpdatesDeleteSpecificStatusUpdateResponse> deleteSpecificStatusUpdateWithHttpInfo(String statusUpdateGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificStatusUpdateValidateBeforeCall(statusUpdateGid, optPretty, null);
        Type localVarReturnType = new TypeToken<StatusUpdatesDeleteSpecificStatusUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSpecificStatusUpdateAsync(String statusUpdateGid, Boolean optPretty, final ApiCallback<StatusUpdatesDeleteSpecificStatusUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificStatusUpdateValidateBeforeCall(statusUpdateGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<StatusUpdatesDeleteSpecificStatusUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSpecificStatusUpdateRequestBuilder {
        private final String statusUpdateGid;
        private Boolean optPretty;

        private DeleteSpecificStatusUpdateRequestBuilder(String statusUpdateGid) {
            this.statusUpdateGid = statusUpdateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteSpecificStatusUpdateRequestBuilder
         */
        public DeleteSpecificStatusUpdateRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteSpecificStatusUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificStatusUpdateCall(statusUpdateGid, optPretty, _callback);
        }


        /**
         * Execute deleteSpecificStatusUpdate request
         * @return StatusUpdatesDeleteSpecificStatusUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified status. </td><td>  -  </td></tr>
         </table>
         */
        public StatusUpdatesDeleteSpecificStatusUpdateResponse execute() throws ApiException {
            ApiResponse<StatusUpdatesDeleteSpecificStatusUpdateResponse> localVarResp = deleteSpecificStatusUpdateWithHttpInfo(statusUpdateGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSpecificStatusUpdate request with HTTP info returned
         * @return ApiResponse&lt;StatusUpdatesDeleteSpecificStatusUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusUpdatesDeleteSpecificStatusUpdateResponse> executeWithHttpInfo() throws ApiException {
            return deleteSpecificStatusUpdateWithHttpInfo(statusUpdateGid, optPretty);
        }

        /**
         * Execute deleteSpecificStatusUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusUpdatesDeleteSpecificStatusUpdateResponse> _callback) throws ApiException {
            return deleteSpecificStatusUpdateAsync(statusUpdateGid, optPretty, _callback);
        }
    }

    /**
     * Delete a status update
     * Deletes a specific, existing status update.  Returns an empty data record.
     * @param statusUpdateGid The status update to get. (required)
     * @return DeleteSpecificStatusUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified status. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificStatusUpdateRequestBuilder deleteSpecificStatusUpdate(String statusUpdateGid) throws IllegalArgumentException {
        if (statusUpdateGid == null) throw new IllegalArgumentException("\"statusUpdateGid\" is required but got null");
            

        return new DeleteSpecificStatusUpdateRequestBuilder(statusUpdateGid);
    }
    private okhttp3.Call getCompactRecordsCall(String parent, Boolean optPretty, Integer limit, String offset, OffsetDateTime createdSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (createdSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_since", createdSince));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactRecordsValidateBeforeCall(String parent, Boolean optPretty, Integer limit, String offset, OffsetDateTime createdSince, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling getCompactRecords(Async)");
        }

        return getCompactRecordsCall(parent, optPretty, limit, offset, createdSince, optFields, _callback);

    }


    private ApiResponse<StatusUpdatesGetCompactRecordsResponse> getCompactRecordsWithHttpInfo(String parent, Boolean optPretty, Integer limit, String offset, OffsetDateTime createdSince, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(parent, optPretty, limit, offset, createdSince, optFields, null);
        Type localVarReturnType = new TypeToken<StatusUpdatesGetCompactRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactRecordsAsync(String parent, Boolean optPretty, Integer limit, String offset, OffsetDateTime createdSince, List<String> optFields, final ApiCallback<StatusUpdatesGetCompactRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(parent, optPretty, limit, offset, createdSince, optFields, _callback);
        Type localVarReturnType = new TypeToken<StatusUpdatesGetCompactRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRecordsRequestBuilder {
        private final String parent;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private OffsetDateTime createdSince;
        private List<String> optFields;

        private GetCompactRecordsRequestBuilder(String parent) {
            this.parent = parent;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set createdSince
         * @param createdSince Only return statuses that have been created since the given time. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder createdSince(OffsetDateTime createdSince) {
            this.createdSince = createdSince;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactRecordsCall(parent, optPretty, limit, offset, createdSince, optFields, _callback);
        }


        /**
         * Execute getCompactRecords request
         * @return StatusUpdatesGetCompactRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public StatusUpdatesGetCompactRecordsResponse execute() throws ApiException {
            ApiResponse<StatusUpdatesGetCompactRecordsResponse> localVarResp = getCompactRecordsWithHttpInfo(parent, optPretty, limit, offset, createdSince, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactRecords request with HTTP info returned
         * @return ApiResponse&lt;StatusUpdatesGetCompactRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusUpdatesGetCompactRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactRecordsWithHttpInfo(parent, optPretty, limit, offset, createdSince, optFields);
        }

        /**
         * Execute getCompactRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusUpdatesGetCompactRecordsResponse> _callback) throws ApiException {
            return getCompactRecordsAsync(parent, optPretty, limit, offset, createdSince, optFields, _callback);
        }
    }

    /**
     * Get status updates from an object
     * Returns the compact status update records for all updates on the object.
     * @param parent Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal. (required)
     * @return GetCompactRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRecordsRequestBuilder getCompactRecords(String parent) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
            

        return new GetCompactRecordsRequestBuilder(parent);
    }
    private okhttp3.Call getRecordByIdCall(String statusUpdateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status_updates/{status_update_gid}"
            .replace("{" + "status_update_gid" + "}", localVarApiClient.escapeString(statusUpdateGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordByIdValidateBeforeCall(String statusUpdateGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statusUpdateGid' is set
        if (statusUpdateGid == null) {
            throw new ApiException("Missing the required parameter 'statusUpdateGid' when calling getRecordById(Async)");
        }

        return getRecordByIdCall(statusUpdateGid, optPretty, optFields, _callback);

    }


    private ApiResponse<StatusUpdatesGetRecordByIdResponse> getRecordByIdWithHttpInfo(String statusUpdateGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(statusUpdateGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<StatusUpdatesGetRecordByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordByIdAsync(String statusUpdateGid, Boolean optPretty, List<String> optFields, final ApiCallback<StatusUpdatesGetRecordByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(statusUpdateGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<StatusUpdatesGetRecordByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordByIdRequestBuilder {
        private final String statusUpdateGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordByIdRequestBuilder(String statusUpdateGid) {
            this.statusUpdateGid = statusUpdateGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecordById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordByIdCall(statusUpdateGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecordById request
         * @return StatusUpdatesGetRecordByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public StatusUpdatesGetRecordByIdResponse execute() throws ApiException {
            ApiResponse<StatusUpdatesGetRecordByIdResponse> localVarResp = getRecordByIdWithHttpInfo(statusUpdateGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecordById request with HTTP info returned
         * @return ApiResponse&lt;StatusUpdatesGetRecordByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatusUpdatesGetRecordByIdResponse> executeWithHttpInfo() throws ApiException {
            return getRecordByIdWithHttpInfo(statusUpdateGid, optPretty, optFields);
        }

        /**
         * Execute getRecordById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatusUpdatesGetRecordByIdResponse> _callback) throws ApiException {
            return getRecordByIdAsync(statusUpdateGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a status update
     * Returns the complete record for a single status update.
     * @param statusUpdateGid The status update to get. (required)
     * @return GetRecordByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s status updates. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordByIdRequestBuilder getRecordById(String statusUpdateGid) throws IllegalArgumentException {
        if (statusUpdateGid == null) throw new IllegalArgumentException("\"statusUpdateGid\" is required but got null");
            

        return new GetRecordByIdRequestBuilder(statusUpdateGid);
    }
}
