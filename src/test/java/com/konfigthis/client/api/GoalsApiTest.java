/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.GoalMetricBase;
import com.konfigthis.client.model.GoalMetricCurrentValueRequest;
import com.konfigthis.client.model.GoalRequest;
import com.konfigthis.client.model.GoalUpdateRequest;
import com.konfigthis.client.model.GoalsAddCollaboratorsToGoalRequest;
import com.konfigthis.client.model.GoalsAddCollaboratorsToGoalResponse;
import com.konfigthis.client.model.GoalsCreateMetricRequest;
import com.konfigthis.client.model.GoalsCreateMetricResponse;
import com.konfigthis.client.model.GoalsCreateNewGoalRecordRequest;
import com.konfigthis.client.model.GoalsCreateNewGoalRecordResponse;
import com.konfigthis.client.model.GoalsDeleteRecordResponse;
import com.konfigthis.client.model.GoalsGetCompactRecordsResponse;
import com.konfigthis.client.model.GoalsGetGoalRecordResponse;
import com.konfigthis.client.model.GoalsGetParentGoalsResponse;
import com.konfigthis.client.model.GoalsRemoveFollowersFromGoalRequest;
import com.konfigthis.client.model.GoalsRemoveFollowersFromGoalResponse;
import com.konfigthis.client.model.GoalsUpdateGoalRecordRequest;
import com.konfigthis.client.model.GoalsUpdateGoalRecordResponse;
import com.konfigthis.client.model.GoalsUpdateMetricCurrentValueRequest;
import com.konfigthis.client.model.GoalsUpdateMetricCurrentValueResponse;
import com.konfigthis.client.model.TaskAddFollowersRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GoalsApi
 */
@Disabled
public class GoalsApiTest {

    private static GoalsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new GoalsApi(apiClient);
    }

    /**
     * Add a collaborator to a goal
     *
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCollaboratorsToGoalTest() throws ApiException {
        String goalGid = null;
        TaskAddFollowersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsAddCollaboratorsToGoalResponse response = api.addCollaboratorsToGoal(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a goal metric
     *
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMetricTest() throws ApiException {
        String goalGid = null;
        GoalMetricBase data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsCreateMetricResponse response = api.createMetric(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a goal
     *
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewGoalRecordTest() throws ApiException {
        GoalRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsCreateNewGoalRecordResponse response = api.createNewGoalRecord()
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a goal
     *
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        GoalsDeleteRecordResponse response = api.deleteRecord(goalGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Get goals
     *
     * Returns compact goal records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompactRecordsTest() throws ApiException {
        Boolean optPretty = null;
        String portfolio = null;
        String project = null;
        String task = null;
        Boolean isWorkspaceLevel = null;
        String team = null;
        String workspace = null;
        List<String> timePeriods = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        GoalsGetCompactRecordsResponse response = api.getCompactRecords()
                .optPretty(optPretty)
                .portfolio(portfolio)
                .project(project)
                .task(task)
                .isWorkspaceLevel(isWorkspaceLevel)
                .team(team)
                .workspace(workspace)
                .timePeriods(timePeriods)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a goal
     *
     * Returns the complete goal record for a single goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGoalRecordTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsGetGoalRecordResponse response = api.getGoalRecord(goalGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get parent goals from a goal
     *
     * Returns a compact representation of all of the parent goals of a goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParentGoalsTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsGetParentGoalsResponse response = api.getParentGoals(goalGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a collaborator from a goal
     *
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFollowersFromGoalTest() throws ApiException {
        String goalGid = null;
        TaskAddFollowersRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsRemoveFollowersFromGoalResponse response = api.removeFollowersFromGoal(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a goal
     *
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGoalRecordTest() throws ApiException {
        String goalGid = null;
        GoalUpdateRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsUpdateGoalRecordResponse response = api.updateGoalRecord(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a goal metric
     *
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMetricCurrentValueTest() throws ApiException {
        String goalGid = null;
        GoalMetricCurrentValueRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalsUpdateMetricCurrentValueResponse response = api.updateMetricCurrentValue(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
