/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TagCreateTagForWorkspaceRequest;
import com.konfigthis.client.model.TagRequest;
import com.konfigthis.client.model.TagsCreateNewTagRecordRequest;
import com.konfigthis.client.model.TagsCreateNewTagRecordResponse;
import com.konfigthis.client.model.TagsCreateTagInWorkspaceRequest;
import com.konfigthis.client.model.TagsCreateTagInWorkspaceResponse;
import com.konfigthis.client.model.TagsGetFilteredTagsResponse;
import com.konfigthis.client.model.TagsGetRecordResponse;
import com.konfigthis.client.model.TagsGetTaskTagsResponse;
import com.konfigthis.client.model.TagsListFilteredTagsResponse;
import com.konfigthis.client.model.TagsRemoveTagResponse;
import com.konfigthis.client.model.TagsUpdateTagRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTagRecordCall(TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsCreateNewTagRecordRequest;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTagRecordValidateBeforeCall(TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagsCreateNewTagRecordRequest' is set
        if (tagsCreateNewTagRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsCreateNewTagRecordRequest' when calling createNewTagRecord(Async)");
        }

        return createNewTagRecordCall(tagsCreateNewTagRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TagsCreateNewTagRecordResponse> createNewTagRecordWithHttpInfo(TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewTagRecordValidateBeforeCall(tagsCreateNewTagRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TagsCreateNewTagRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTagRecordAsync(TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TagsCreateNewTagRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTagRecordValidateBeforeCall(tagsCreateNewTagRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsCreateNewTagRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTagRecordRequestBuilder {
        private TagRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewTagRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewTagRecordRequestBuilder
         */
        public CreateNewTagRecordRequestBuilder data(TagRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewTagRecordRequestBuilder
         */
        public CreateNewTagRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewTagRecordRequestBuilder
         */
        public CreateNewTagRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewTagRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest = buildBodyParams();
            return createNewTagRecordCall(tagsCreateNewTagRecordRequest, optPretty, optFields, _callback);
        }

        private TagsCreateNewTagRecordRequest buildBodyParams() {
            TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest = new TagsCreateNewTagRecordRequest();
            tagsCreateNewTagRecordRequest.data(this.data);
            return tagsCreateNewTagRecordRequest;
        }

        /**
         * Execute createNewTagRecord request
         * @return TagsCreateNewTagRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TagsCreateNewTagRecordResponse execute() throws ApiException {
            TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest = buildBodyParams();
            ApiResponse<TagsCreateNewTagRecordResponse> localVarResp = createNewTagRecordWithHttpInfo(tagsCreateNewTagRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTagRecord request with HTTP info returned
         * @return ApiResponse&lt;TagsCreateNewTagRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsCreateNewTagRecordResponse> executeWithHttpInfo() throws ApiException {
            TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest = buildBodyParams();
            return createNewTagRecordWithHttpInfo(tagsCreateNewTagRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewTagRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsCreateNewTagRecordResponse> _callback) throws ApiException {
            TagsCreateNewTagRecordRequest tagsCreateNewTagRecordRequest = buildBodyParams();
            return createNewTagRecordAsync(tagsCreateNewTagRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a tag
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     * @param tagsCreateNewTagRecordRequest The tag to create. (required)
     * @return CreateNewTagRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTagRecordRequestBuilder createNewTagRecord() throws IllegalArgumentException {
        return new CreateNewTagRecordRequestBuilder();
    }
    private okhttp3.Call createTagInWorkspaceCall(String workspaceGid, TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsCreateTagInWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/tags"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagInWorkspaceValidateBeforeCall(String workspaceGid, TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling createTagInWorkspace(Async)");
        }

        // verify the required parameter 'tagsCreateTagInWorkspaceRequest' is set
        if (tagsCreateTagInWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsCreateTagInWorkspaceRequest' when calling createTagInWorkspace(Async)");
        }

        return createTagInWorkspaceCall(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TagsCreateTagInWorkspaceResponse> createTagInWorkspaceWithHttpInfo(String workspaceGid, TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createTagInWorkspaceValidateBeforeCall(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TagsCreateTagInWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTagInWorkspaceAsync(String workspaceGid, TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TagsCreateTagInWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagInWorkspaceValidateBeforeCall(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsCreateTagInWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTagInWorkspaceRequestBuilder {
        private final String workspaceGid;
        private TagCreateTagForWorkspaceRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateTagInWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateTagInWorkspaceRequestBuilder
         */
        public CreateTagInWorkspaceRequestBuilder data(TagCreateTagForWorkspaceRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateTagInWorkspaceRequestBuilder
         */
        public CreateTagInWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateTagInWorkspaceRequestBuilder
         */
        public CreateTagInWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createTagInWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest = buildBodyParams();
            return createTagInWorkspaceCall(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields, _callback);
        }

        private TagsCreateTagInWorkspaceRequest buildBodyParams() {
            TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest = new TagsCreateTagInWorkspaceRequest();
            tagsCreateTagInWorkspaceRequest.data(this.data);
            return tagsCreateTagInWorkspaceRequest;
        }

        /**
         * Execute createTagInWorkspace request
         * @return TagsCreateTagInWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TagsCreateTagInWorkspaceResponse execute() throws ApiException {
            TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest = buildBodyParams();
            ApiResponse<TagsCreateTagInWorkspaceResponse> localVarResp = createTagInWorkspaceWithHttpInfo(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTagInWorkspace request with HTTP info returned
         * @return ApiResponse&lt;TagsCreateTagInWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsCreateTagInWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest = buildBodyParams();
            return createTagInWorkspaceWithHttpInfo(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields);
        }

        /**
         * Execute createTagInWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsCreateTagInWorkspaceResponse> _callback) throws ApiException {
            TagsCreateTagInWorkspaceRequest tagsCreateTagInWorkspaceRequest = buildBodyParams();
            return createTagInWorkspaceAsync(workspaceGid, tagsCreateTagInWorkspaceRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a tag in a workspace
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param tagsCreateTagInWorkspaceRequest The tag to create. (required)
     * @return CreateTagInWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the newly specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTagInWorkspaceRequestBuilder createTagInWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new CreateTagInWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call getFilteredTagsCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/tags"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredTagsValidateBeforeCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getFilteredTags(Async)");
        }

        return getFilteredTagsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TagsGetFilteredTagsResponse> getFilteredTagsWithHttpInfo(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getFilteredTagsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TagsGetFilteredTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilteredTagsAsync(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TagsGetFilteredTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilteredTagsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsGetFilteredTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilteredTagsRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetFilteredTagsRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetFilteredTagsRequestBuilder
         */
        public GetFilteredTagsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetFilteredTagsRequestBuilder
         */
        public GetFilteredTagsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetFilteredTagsRequestBuilder
         */
        public GetFilteredTagsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetFilteredTagsRequestBuilder
         */
        public GetFilteredTagsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getFilteredTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilteredTagsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getFilteredTags request
         * @return TagsGetFilteredTagsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetFilteredTagsResponse execute() throws ApiException {
            ApiResponse<TagsGetFilteredTagsResponse> localVarResp = getFilteredTagsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFilteredTags request with HTTP info returned
         * @return ApiResponse&lt;TagsGetFilteredTagsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetFilteredTagsResponse> executeWithHttpInfo() throws ApiException {
            return getFilteredTagsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getFilteredTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetFilteredTagsResponse> _callback) throws ApiException {
            return getFilteredTagsAsync(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get tags in a workspace
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return GetFilteredTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
     </table>
     */
    public GetFilteredTagsRequestBuilder getFilteredTags(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new GetFilteredTagsRequestBuilder(workspaceGid);
    }
    private okhttp3.Call getRecordCall(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_gid}"
            .replace("{" + "tag_gid" + "}", localVarApiClient.escapeString(tagGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagGid' is set
        if (tagGid == null) {
            throw new ApiException("Missing the required parameter 'tagGid' when calling getRecord(Async)");
        }

        return getRecordCall(tagGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TagsGetRecordResponse> getRecordWithHttpInfo(String tagGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(tagGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TagsGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback<TagsGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(tagGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String tagGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String tagGid) {
            this.tagGid = tagGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(tagGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return TagsGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetRecordResponse execute() throws ApiException {
            ApiResponse<TagsGetRecordResponse> localVarResp = getRecordWithHttpInfo(tagGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;TagsGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(tagGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(tagGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a tag
     * Returns the complete tag record for a single tag.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String tagGid) throws IllegalArgumentException {
        if (tagGid == null) throw new IllegalArgumentException("\"tagGid\" is required but got null");
            

        return new GetRecordRequestBuilder(tagGid);
    }
    private okhttp3.Call getTaskTagsCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/tags"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskTagsValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getTaskTags(Async)");
        }

        return getTaskTagsCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TagsGetTaskTagsResponse> getTaskTagsWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTaskTagsValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TagsGetTaskTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskTagsAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TagsGetTaskTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskTagsValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsGetTaskTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskTagsRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetTaskTagsRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTaskTagsRequestBuilder
         */
        public GetTaskTagsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetTaskTagsRequestBuilder
         */
        public GetTaskTagsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetTaskTagsRequestBuilder
         */
        public GetTaskTagsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTaskTagsRequestBuilder
         */
        public GetTaskTagsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTaskTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tags for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskTagsCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getTaskTags request
         * @return TagsGetTaskTagsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tags for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetTaskTagsResponse execute() throws ApiException {
            ApiResponse<TagsGetTaskTagsResponse> localVarResp = getTaskTagsWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskTags request with HTTP info returned
         * @return ApiResponse&lt;TagsGetTaskTagsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tags for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetTaskTagsResponse> executeWithHttpInfo() throws ApiException {
            return getTaskTagsWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getTaskTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the tags for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetTaskTagsResponse> _callback) throws ApiException {
            return getTaskTagsAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get a task&#39;s tags
     * Get a compact representation of all of the tags the task has.
     * @param taskGid The task to operate on. (required)
     * @return GetTaskTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tags for the given task. </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskTagsRequestBuilder getTaskTags(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetTaskTagsRequestBuilder(taskGid);
    }
    private okhttp3.Call listFilteredTagsCall(Boolean optPretty, Integer limit, String offset, String workspace, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilteredTagsValidateBeforeCall(Boolean optPretty, Integer limit, String offset, String workspace, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listFilteredTagsCall(optPretty, limit, offset, workspace, optFields, _callback);

    }


    private ApiResponse<TagsListFilteredTagsResponse> listFilteredTagsWithHttpInfo(Boolean optPretty, Integer limit, String offset, String workspace, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listFilteredTagsValidateBeforeCall(optPretty, limit, offset, workspace, optFields, null);
        Type localVarReturnType = new TypeToken<TagsListFilteredTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFilteredTagsAsync(Boolean optPretty, Integer limit, String offset, String workspace, List<String> optFields, final ApiCallback<TagsListFilteredTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilteredTagsValidateBeforeCall(optPretty, limit, offset, workspace, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsListFilteredTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFilteredTagsRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String workspace;
        private List<String> optFields;

        private ListFilteredTagsRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListFilteredTagsRequestBuilder
         */
        public ListFilteredTagsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListFilteredTagsRequestBuilder
         */
        public ListFilteredTagsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListFilteredTagsRequestBuilder
         */
        public ListFilteredTagsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace The workspace to filter tags on. (optional)
         * @return ListFilteredTagsRequestBuilder
         */
        public ListFilteredTagsRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListFilteredTagsRequestBuilder
         */
        public ListFilteredTagsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listFilteredTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFilteredTagsCall(optPretty, limit, offset, workspace, optFields, _callback);
        }


        /**
         * Execute listFilteredTags request
         * @return TagsListFilteredTagsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public TagsListFilteredTagsResponse execute() throws ApiException {
            ApiResponse<TagsListFilteredTagsResponse> localVarResp = listFilteredTagsWithHttpInfo(optPretty, limit, offset, workspace, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFilteredTags request with HTTP info returned
         * @return ApiResponse&lt;TagsListFilteredTagsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListFilteredTagsResponse> executeWithHttpInfo() throws ApiException {
            return listFilteredTagsWithHttpInfo(optPretty, limit, offset, workspace, optFields);
        }

        /**
         * Execute listFilteredTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListFilteredTagsResponse> _callback) throws ApiException {
            return listFilteredTagsAsync(optPretty, limit, offset, workspace, optFields, _callback);
        }
    }

    /**
     * Get multiple tags
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     * @return ListFilteredTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified set of tags. </td><td>  -  </td></tr>
     </table>
     */
    public ListFilteredTagsRequestBuilder listFilteredTags() throws IllegalArgumentException {
        return new ListFilteredTagsRequestBuilder();
    }
    private okhttp3.Call removeTagCall(String tagGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_gid}"
            .replace("{" + "tag_gid" + "}", localVarApiClient.escapeString(tagGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagValidateBeforeCall(String tagGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagGid' is set
        if (tagGid == null) {
            throw new ApiException("Missing the required parameter 'tagGid' when calling removeTag(Async)");
        }

        return removeTagCall(tagGid, optPretty, _callback);

    }


    private ApiResponse<TagsRemoveTagResponse> removeTagWithHttpInfo(String tagGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeTagValidateBeforeCall(tagGid, optPretty, null);
        Type localVarReturnType = new TypeToken<TagsRemoveTagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTagAsync(String tagGid, Boolean optPretty, final ApiCallback<TagsRemoveTagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagValidateBeforeCall(tagGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TagsRemoveTagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTagRequestBuilder {
        private final String tagGid;
        private Boolean optPretty;

        private RemoveTagRequestBuilder(String tagGid) {
            this.tagGid = tagGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTagCall(tagGid, optPretty, _callback);
        }


        /**
         * Execute removeTag request
         * @return TagsRemoveTagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TagsRemoveTagResponse execute() throws ApiException {
            ApiResponse<TagsRemoveTagResponse> localVarResp = removeTagWithHttpInfo(tagGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTag request with HTTP info returned
         * @return ApiResponse&lt;TagsRemoveTagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsRemoveTagResponse> executeWithHttpInfo() throws ApiException {
            return removeTagWithHttpInfo(tagGid, optPretty);
        }

        /**
         * Execute removeTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsRemoveTagResponse> _callback) throws ApiException {
            return removeTagAsync(tagGid, optPretty, _callback);
        }
    }

    /**
     * Delete a tag
     * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @return RemoveTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagRequestBuilder removeTag(String tagGid) throws IllegalArgumentException {
        if (tagGid == null) throw new IllegalArgumentException("\"tagGid\" is required but got null");
            

        return new RemoveTagRequestBuilder(tagGid);
    }
    private okhttp3.Call updateTagRecordCall(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_gid}"
            .replace("{" + "tag_gid" + "}", localVarApiClient.escapeString(tagGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagRecordValidateBeforeCall(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagGid' is set
        if (tagGid == null) {
            throw new ApiException("Missing the required parameter 'tagGid' when calling updateTagRecord(Async)");
        }

        return updateTagRecordCall(tagGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TagsUpdateTagRecordResponse> updateTagRecordWithHttpInfo(String tagGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateTagRecordValidateBeforeCall(tagGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TagsUpdateTagRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTagRecordAsync(String tagGid, Boolean optPretty, List<String> optFields, final ApiCallback<TagsUpdateTagRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagRecordValidateBeforeCall(tagGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TagsUpdateTagRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTagRecordRequestBuilder {
        private final String tagGid;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateTagRecordRequestBuilder(String tagGid) {
            this.tagGid = tagGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateTagRecordRequestBuilder
         */
        public UpdateTagRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateTagRecordRequestBuilder
         */
        public UpdateTagRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateTagRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTagRecordCall(tagGid, optPretty, optFields, _callback);
        }


        /**
         * Execute updateTagRecord request
         * @return TagsUpdateTagRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public TagsUpdateTagRecordResponse execute() throws ApiException {
            ApiResponse<TagsUpdateTagRecordResponse> localVarResp = updateTagRecordWithHttpInfo(tagGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTagRecord request with HTTP info returned
         * @return ApiResponse&lt;TagsUpdateTagRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsUpdateTagRecordResponse> executeWithHttpInfo() throws ApiException {
            return updateTagRecordWithHttpInfo(tagGid, optPretty, optFields);
        }

        /**
         * Execute updateTagRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified tag. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsUpdateTagRecordResponse> _callback) throws ApiException {
            return updateTagRecordAsync(tagGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a tag
     * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @return UpdateTagRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified tag. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTagRecordRequestBuilder updateTagRecord(String tagGid) throws IllegalArgumentException {
        if (tagGid == null) throw new IllegalArgumentException("\"tagGid\" is required but got null");
            

        return new UpdateTagRecordRequestBuilder(tagGid);
    }
}
