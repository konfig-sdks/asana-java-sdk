/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A collection of rich text that will be displayed as a preview to another app.  This is read-only except for a small group of whitelisted apps.
 */
@ApiModel(description = "A collection of rich text that will be displayed as a preview to another app.  This is read-only except for a small group of whitelisted apps.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Preview {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_FALLBACK = "fallback";
  @SerializedName(SERIALIZED_NAME_FALLBACK)
  private String fallback;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private String footer;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_HEADER_LINK = "header_link";
  @SerializedName(SERIALIZED_NAME_HEADER_LINK)
  private String headerLink;

  public static final String SERIALIZED_NAME_HTML_TEXT = "html_text";
  @SerializedName(SERIALIZED_NAME_HTML_TEXT)
  private String htmlText;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE_LINK = "title_link";
  @SerializedName(SERIALIZED_NAME_TITLE_LINK)
  private String titleLink;

  public Preview() {
  }

  public Preview title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Text to display as the title.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Greg", value = "Text to display as the title.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Preview fallback(String fallback) {
    
    
    
    
    this.fallback = fallback;
    return this;
  }

   /**
   * Some fallback text to display if unable to display the full preview.
   * @return fallback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Greg: Great! I like this idea.\\n\\nhttps//a_company.slack.com/archives/ABCDEFG/12345678", value = "Some fallback text to display if unable to display the full preview.")

  public String getFallback() {
    return fallback;
  }


  public void setFallback(String fallback) {
    
    
    
    this.fallback = fallback;
  }


  public Preview footer(String footer) {
    
    
    
    
    this.footer = footer;
    return this;
  }

   /**
   * Text to display in the footer.
   * @return footer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mar 17, 2019 1:25 PM", value = "Text to display in the footer.")

  public String getFooter() {
    return footer;
  }


  public void setFooter(String footer) {
    
    
    
    this.footer = footer;
  }


  public Preview header(String header) {
    
    
    
    
    this.header = header;
    return this;
  }

   /**
   * Text to display in the header.
   * @return header
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Asana for Slack", value = "Text to display in the header.")

  public String getHeader() {
    return header;
  }


  public void setHeader(String header) {
    
    
    
    this.header = header;
  }


  public Preview headerLink(String headerLink) {
    
    
    
    
    this.headerLink = headerLink;
    return this;
  }

   /**
   * Where the header will link to.
   * @return headerLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://asana.comn/apps/slack", value = "Where the header will link to.")

  public String getHeaderLink() {
    return headerLink;
  }


  public void setHeaderLink(String headerLink) {
    
    
    
    this.headerLink = headerLink;
  }


  public Preview htmlText(String htmlText) {
    
    
    
    
    this.htmlText = htmlText;
    return this;
  }

   /**
   * HTML formatted text for the body of the preview.
   * @return htmlText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<body>Great! I like this idea.</body>", value = "HTML formatted text for the body of the preview.")

  public String getHtmlText() {
    return htmlText;
  }


  public void setHtmlText(String htmlText) {
    
    
    
    this.htmlText = htmlText;
  }


  public Preview text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Text for the body of the preview.
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Great! I like this idea.", value = "Text for the body of the preview.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public Preview titleLink(String titleLink) {
    
    
    
    
    this.titleLink = titleLink;
    return this;
  }

   /**
   * Where to title will link to.
   * @return titleLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://asana.slack.com/archives/ABCDEFG/12345678", value = "Where to title will link to.")

  public String getTitleLink() {
    return titleLink;
  }


  public void setTitleLink(String titleLink) {
    
    
    
    this.titleLink = titleLink;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Preview instance itself
   */
  public Preview putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Preview preview = (Preview) o;
    return Objects.equals(this.title, preview.title) &&
        Objects.equals(this.fallback, preview.fallback) &&
        Objects.equals(this.footer, preview.footer) &&
        Objects.equals(this.header, preview.header) &&
        Objects.equals(this.headerLink, preview.headerLink) &&
        Objects.equals(this.htmlText, preview.htmlText) &&
        Objects.equals(this.text, preview.text) &&
        Objects.equals(this.titleLink, preview.titleLink)&&
        Objects.equals(this.additionalProperties, preview.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, fallback, footer, header, headerLink, htmlText, text, titleLink, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Preview {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    fallback: ").append(toIndentedString(fallback)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    headerLink: ").append(toIndentedString(headerLink)).append("\n");
    sb.append("    htmlText: ").append(toIndentedString(htmlText)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    titleLink: ").append(toIndentedString(titleLink)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("fallback");
    openapiFields.add("footer");
    openapiFields.add("header");
    openapiFields.add("header_link");
    openapiFields.add("html_text");
    openapiFields.add("text");
    openapiFields.add("title_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Preview
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Preview.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Preview is not found in the empty JSON string", Preview.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("fallback") != null && !jsonObj.get("fallback").isJsonNull()) && !jsonObj.get("fallback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback").toString()));
      }
      if ((jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) && !jsonObj.get("footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer").toString()));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("header_link") != null && !jsonObj.get("header_link").isJsonNull()) && !jsonObj.get("header_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_link").toString()));
      }
      if ((jsonObj.get("html_text") != null && !jsonObj.get("html_text").isJsonNull()) && !jsonObj.get("html_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_text").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title_link") != null && !jsonObj.get("title_link").isJsonNull()) && !jsonObj.get("title_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Preview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Preview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Preview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Preview.class));

       return (TypeAdapter<T>) new TypeAdapter<Preview>() {
           @Override
           public void write(JsonWriter out, Preview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Preview read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Preview instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Preview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Preview
  * @throws IOException if the JSON string is invalid with respect to Preview
  */
  public static Preview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Preview.class);
  }

 /**
  * Convert an instance of Preview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

