/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TeamRequestAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TeamRequestAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HTML_DESCRIPTION = "html_description";
  @SerializedName(SERIALIZED_NAME_HTML_DESCRIPTION)
  private String htmlDescription;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  /**
   * The visibility of the team to users in the same organization 
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
 public enum VisibilityEnum {
    SECRET("secret"),
    
    REQUEST_TO_JOIN("request_to_join"),
    
    PUBLIC("public");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  /**
   * Controls who can edit team name and description 
   */
  @JsonAdapter(EditTeamNameOrDescriptionAccessLevelEnum.Adapter.class)
 public enum EditTeamNameOrDescriptionAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    EditTeamNameOrDescriptionAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditTeamNameOrDescriptionAccessLevelEnum fromValue(String value) {
      for (EditTeamNameOrDescriptionAccessLevelEnum b : EditTeamNameOrDescriptionAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditTeamNameOrDescriptionAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditTeamNameOrDescriptionAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditTeamNameOrDescriptionAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditTeamNameOrDescriptionAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL = "edit_team_name_or_description_access_level";
  @SerializedName(SERIALIZED_NAME_EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL)
  private EditTeamNameOrDescriptionAccessLevelEnum editTeamNameOrDescriptionAccessLevel;

  /**
   * Controls who can edit team visibility and trash teams 
   */
  @JsonAdapter(EditTeamVisibilityOrTrashTeamAccessLevelEnum.Adapter.class)
 public enum EditTeamVisibilityOrTrashTeamAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    EditTeamVisibilityOrTrashTeamAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditTeamVisibilityOrTrashTeamAccessLevelEnum fromValue(String value) {
      for (EditTeamVisibilityOrTrashTeamAccessLevelEnum b : EditTeamVisibilityOrTrashTeamAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditTeamVisibilityOrTrashTeamAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditTeamVisibilityOrTrashTeamAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditTeamVisibilityOrTrashTeamAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditTeamVisibilityOrTrashTeamAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL = "edit_team_visibility_or_trash_team_access_level";
  @SerializedName(SERIALIZED_NAME_EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL)
  private EditTeamVisibilityOrTrashTeamAccessLevelEnum editTeamVisibilityOrTrashTeamAccessLevel;

  /**
   * Controls who can accept or deny member invites for a given team 
   */
  @JsonAdapter(MemberInviteManagementAccessLevelEnum.Adapter.class)
 public enum MemberInviteManagementAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    MemberInviteManagementAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemberInviteManagementAccessLevelEnum fromValue(String value) {
      for (MemberInviteManagementAccessLevelEnum b : MemberInviteManagementAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemberInviteManagementAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberInviteManagementAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberInviteManagementAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemberInviteManagementAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL = "member_invite_management_access_level";
  @SerializedName(SERIALIZED_NAME_MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL)
  private MemberInviteManagementAccessLevelEnum memberInviteManagementAccessLevel;

  /**
   * Controls who can accept or deny guest invites for a given team 
   */
  @JsonAdapter(GuestInviteManagementAccessLevelEnum.Adapter.class)
 public enum GuestInviteManagementAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    GuestInviteManagementAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GuestInviteManagementAccessLevelEnum fromValue(String value) {
      for (GuestInviteManagementAccessLevelEnum b : GuestInviteManagementAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GuestInviteManagementAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GuestInviteManagementAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GuestInviteManagementAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GuestInviteManagementAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL = "guest_invite_management_access_level";
  @SerializedName(SERIALIZED_NAME_GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL)
  private GuestInviteManagementAccessLevelEnum guestInviteManagementAccessLevel;

  /**
   * Controls who can accept or deny join team requests for a Membership by Request team 
   */
  @JsonAdapter(JoinRequestManagementAccessLevelEnum.Adapter.class)
 public enum JoinRequestManagementAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    JoinRequestManagementAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JoinRequestManagementAccessLevelEnum fromValue(String value) {
      for (JoinRequestManagementAccessLevelEnum b : JoinRequestManagementAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JoinRequestManagementAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JoinRequestManagementAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JoinRequestManagementAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JoinRequestManagementAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL = "join_request_management_access_level";
  @SerializedName(SERIALIZED_NAME_JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL)
  private JoinRequestManagementAccessLevelEnum joinRequestManagementAccessLevel;

  /**
   * Controls who can remove team members 
   */
  @JsonAdapter(TeamMemberRemovalAccessLevelEnum.Adapter.class)
 public enum TeamMemberRemovalAccessLevelEnum {
    ALL_TEAM_MEMBERS("all_team_members"),
    
    ONLY_TEAM_ADMINS("only_team_admins");

    private String value;

    TeamMemberRemovalAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TeamMemberRemovalAccessLevelEnum fromValue(String value) {
      for (TeamMemberRemovalAccessLevelEnum b : TeamMemberRemovalAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TeamMemberRemovalAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TeamMemberRemovalAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TeamMemberRemovalAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TeamMemberRemovalAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEAM_MEMBER_REMOVAL_ACCESS_LEVEL = "team_member_removal_access_level";
  @SerializedName(SERIALIZED_NAME_TEAM_MEMBER_REMOVAL_ACCESS_LEVEL)
  private TeamMemberRemovalAccessLevelEnum teamMemberRemovalAccessLevel;

  public TeamRequestAllOf() {
  }

  
  public TeamRequestAllOf(
     EditTeamNameOrDescriptionAccessLevelEnum editTeamNameOrDescriptionAccessLevel, 
     EditTeamVisibilityOrTrashTeamAccessLevelEnum editTeamVisibilityOrTrashTeamAccessLevel, 
     MemberInviteManagementAccessLevelEnum memberInviteManagementAccessLevel, 
     GuestInviteManagementAccessLevelEnum guestInviteManagementAccessLevel, 
     JoinRequestManagementAccessLevelEnum joinRequestManagementAccessLevel, 
     TeamMemberRemovalAccessLevelEnum teamMemberRemovalAccessLevel
  ) {
    this();
    this.editTeamNameOrDescriptionAccessLevel = editTeamNameOrDescriptionAccessLevel;
    this.editTeamVisibilityOrTrashTeamAccessLevel = editTeamVisibilityOrTrashTeamAccessLevel;
    this.memberInviteManagementAccessLevel = memberInviteManagementAccessLevel;
    this.guestInviteManagementAccessLevel = guestInviteManagementAccessLevel;
    this.joinRequestManagementAccessLevel = joinRequestManagementAccessLevel;
    this.teamMemberRemovalAccessLevel = teamMemberRemovalAccessLevel;
  }

  public TeamRequestAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The description of the team. 
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "All developers should be members of this team.", value = "The description of the team. ")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TeamRequestAllOf htmlDescription(String htmlDescription) {
    
    
    
    
    this.htmlDescription = htmlDescription;
    return this;
  }

   /**
   * The description of the team with formatting as HTML. 
   * @return htmlDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<body><em>All</em> developers should be members of this team.</body>", value = "The description of the team with formatting as HTML. ")

  public String getHtmlDescription() {
    return htmlDescription;
  }


  public void setHtmlDescription(String htmlDescription) {
    
    
    
    this.htmlDescription = htmlDescription;
  }


  public TeamRequestAllOf organization(String organization) {
    
    
    
    
    this.organization = organization;
    return this;
  }

   /**
   * The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. 
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. ")

  public String getOrganization() {
    return organization;
  }


  public void setOrganization(String organization) {
    
    
    
    this.organization = organization;
  }


  public TeamRequestAllOf visibility(VisibilityEnum visibility) {
    
    
    
    
    this.visibility = visibility;
    return this;
  }

   /**
   * The visibility of the team to users in the same organization 
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The visibility of the team to users in the same organization ")

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  public void setVisibility(VisibilityEnum visibility) {
    
    
    
    this.visibility = visibility;
  }


   /**
   * Controls who can edit team name and description 
   * @return editTeamNameOrDescriptionAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can edit team name and description ")

  public EditTeamNameOrDescriptionAccessLevelEnum getEditTeamNameOrDescriptionAccessLevel() {
    return editTeamNameOrDescriptionAccessLevel;
  }




   /**
   * Controls who can edit team visibility and trash teams 
   * @return editTeamVisibilityOrTrashTeamAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can edit team visibility and trash teams ")

  public EditTeamVisibilityOrTrashTeamAccessLevelEnum getEditTeamVisibilityOrTrashTeamAccessLevel() {
    return editTeamVisibilityOrTrashTeamAccessLevel;
  }




   /**
   * Controls who can accept or deny member invites for a given team 
   * @return memberInviteManagementAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can accept or deny member invites for a given team ")

  public MemberInviteManagementAccessLevelEnum getMemberInviteManagementAccessLevel() {
    return memberInviteManagementAccessLevel;
  }




   /**
   * Controls who can accept or deny guest invites for a given team 
   * @return guestInviteManagementAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can accept or deny guest invites for a given team ")

  public GuestInviteManagementAccessLevelEnum getGuestInviteManagementAccessLevel() {
    return guestInviteManagementAccessLevel;
  }




   /**
   * Controls who can accept or deny join team requests for a Membership by Request team 
   * @return joinRequestManagementAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can accept or deny join team requests for a Membership by Request team ")

  public JoinRequestManagementAccessLevelEnum getJoinRequestManagementAccessLevel() {
    return joinRequestManagementAccessLevel;
  }




   /**
   * Controls who can remove team members 
   * @return teamMemberRemovalAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls who can remove team members ")

  public TeamMemberRemovalAccessLevelEnum getTeamMemberRemovalAccessLevel() {
    return teamMemberRemovalAccessLevel;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TeamRequestAllOf instance itself
   */
  public TeamRequestAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamRequestAllOf teamRequestAllOf = (TeamRequestAllOf) o;
    return Objects.equals(this.description, teamRequestAllOf.description) &&
        Objects.equals(this.htmlDescription, teamRequestAllOf.htmlDescription) &&
        Objects.equals(this.organization, teamRequestAllOf.organization) &&
        Objects.equals(this.visibility, teamRequestAllOf.visibility) &&
        Objects.equals(this.editTeamNameOrDescriptionAccessLevel, teamRequestAllOf.editTeamNameOrDescriptionAccessLevel) &&
        Objects.equals(this.editTeamVisibilityOrTrashTeamAccessLevel, teamRequestAllOf.editTeamVisibilityOrTrashTeamAccessLevel) &&
        Objects.equals(this.memberInviteManagementAccessLevel, teamRequestAllOf.memberInviteManagementAccessLevel) &&
        Objects.equals(this.guestInviteManagementAccessLevel, teamRequestAllOf.guestInviteManagementAccessLevel) &&
        Objects.equals(this.joinRequestManagementAccessLevel, teamRequestAllOf.joinRequestManagementAccessLevel) &&
        Objects.equals(this.teamMemberRemovalAccessLevel, teamRequestAllOf.teamMemberRemovalAccessLevel)&&
        Objects.equals(this.additionalProperties, teamRequestAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, htmlDescription, organization, visibility, editTeamNameOrDescriptionAccessLevel, editTeamVisibilityOrTrashTeamAccessLevel, memberInviteManagementAccessLevel, guestInviteManagementAccessLevel, joinRequestManagementAccessLevel, teamMemberRemovalAccessLevel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamRequestAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    htmlDescription: ").append(toIndentedString(htmlDescription)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    editTeamNameOrDescriptionAccessLevel: ").append(toIndentedString(editTeamNameOrDescriptionAccessLevel)).append("\n");
    sb.append("    editTeamVisibilityOrTrashTeamAccessLevel: ").append(toIndentedString(editTeamVisibilityOrTrashTeamAccessLevel)).append("\n");
    sb.append("    memberInviteManagementAccessLevel: ").append(toIndentedString(memberInviteManagementAccessLevel)).append("\n");
    sb.append("    guestInviteManagementAccessLevel: ").append(toIndentedString(guestInviteManagementAccessLevel)).append("\n");
    sb.append("    joinRequestManagementAccessLevel: ").append(toIndentedString(joinRequestManagementAccessLevel)).append("\n");
    sb.append("    teamMemberRemovalAccessLevel: ").append(toIndentedString(teamMemberRemovalAccessLevel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("html_description");
    openapiFields.add("organization");
    openapiFields.add("visibility");
    openapiFields.add("edit_team_name_or_description_access_level");
    openapiFields.add("edit_team_visibility_or_trash_team_access_level");
    openapiFields.add("member_invite_management_access_level");
    openapiFields.add("guest_invite_management_access_level");
    openapiFields.add("join_request_management_access_level");
    openapiFields.add("team_member_removal_access_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TeamRequestAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TeamRequestAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamRequestAllOf is not found in the empty JSON string", TeamRequestAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("html_description") != null && !jsonObj.get("html_description").isJsonNull()) && !jsonObj.get("html_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_description").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      if ((jsonObj.get("edit_team_name_or_description_access_level") != null && !jsonObj.get("edit_team_name_or_description_access_level").isJsonNull()) && !jsonObj.get("edit_team_name_or_description_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_team_name_or_description_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_team_name_or_description_access_level").toString()));
      }
      if ((jsonObj.get("edit_team_visibility_or_trash_team_access_level") != null && !jsonObj.get("edit_team_visibility_or_trash_team_access_level").isJsonNull()) && !jsonObj.get("edit_team_visibility_or_trash_team_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_team_visibility_or_trash_team_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_team_visibility_or_trash_team_access_level").toString()));
      }
      if ((jsonObj.get("member_invite_management_access_level") != null && !jsonObj.get("member_invite_management_access_level").isJsonNull()) && !jsonObj.get("member_invite_management_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_invite_management_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_invite_management_access_level").toString()));
      }
      if ((jsonObj.get("guest_invite_management_access_level") != null && !jsonObj.get("guest_invite_management_access_level").isJsonNull()) && !jsonObj.get("guest_invite_management_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guest_invite_management_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guest_invite_management_access_level").toString()));
      }
      if ((jsonObj.get("join_request_management_access_level") != null && !jsonObj.get("join_request_management_access_level").isJsonNull()) && !jsonObj.get("join_request_management_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_request_management_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_request_management_access_level").toString()));
      }
      if ((jsonObj.get("team_member_removal_access_level") != null && !jsonObj.get("team_member_removal_access_level").isJsonNull()) && !jsonObj.get("team_member_removal_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_member_removal_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_member_removal_access_level").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamRequestAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamRequestAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamRequestAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamRequestAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamRequestAllOf>() {
           @Override
           public void write(JsonWriter out, TeamRequestAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamRequestAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TeamRequestAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamRequestAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamRequestAllOf
  * @throws IOException if the JSON string is invalid with respect to TeamRequestAllOf
  */
  public static TeamRequestAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamRequestAllOf.class);
  }

 /**
  * Convert an instance of TeamRequestAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

