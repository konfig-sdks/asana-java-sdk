/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsersGetFavoritesForUserResponse;
import com.konfigthis.client.model.UsersGetUserRecordResponse;
import com.konfigthis.client.model.UsersListTeamUsersResponse;
import com.konfigthis.client.model.UsersListWorkspaceUsersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFavoritesForUserCall(String userGid, String resourceType, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_gid}/favorites"
            .replace("{" + "user_gid" + "}", localVarApiClient.escapeString(userGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (resourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_type", resourceType));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritesForUserValidateBeforeCall(String userGid, String resourceType, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGid' is set
        if (userGid == null) {
            throw new ApiException("Missing the required parameter 'userGid' when calling getFavoritesForUser(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling getFavoritesForUser(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getFavoritesForUser(Async)");
        }

        return getFavoritesForUserCall(userGid, resourceType, workspace, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<UsersGetFavoritesForUserResponse> getFavoritesForUserWithHttpInfo(String userGid, String resourceType, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getFavoritesForUserValidateBeforeCall(userGid, resourceType, workspace, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<UsersGetFavoritesForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFavoritesForUserAsync(String userGid, String resourceType, String workspace, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<UsersGetFavoritesForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritesForUserValidateBeforeCall(userGid, resourceType, workspace, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<UsersGetFavoritesForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFavoritesForUserRequestBuilder {
        private final String userGid;
        private final String resourceType;
        private final String workspace;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetFavoritesForUserRequestBuilder(String userGid, String resourceType, String workspace) {
            this.userGid = userGid;
            this.resourceType = resourceType;
            this.workspace = workspace;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetFavoritesForUserRequestBuilder
         */
        public GetFavoritesForUserRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetFavoritesForUserRequestBuilder
         */
        public GetFavoritesForUserRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetFavoritesForUserRequestBuilder
         */
        public GetFavoritesForUserRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetFavoritesForUserRequestBuilder
         */
        public GetFavoritesForUserRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getFavoritesForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the specified user&#39;s favorites. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFavoritesForUserCall(userGid, resourceType, workspace, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getFavoritesForUser request
         * @return UsersGetFavoritesForUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the specified user&#39;s favorites. </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetFavoritesForUserResponse execute() throws ApiException {
            ApiResponse<UsersGetFavoritesForUserResponse> localVarResp = getFavoritesForUserWithHttpInfo(userGid, resourceType, workspace, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFavoritesForUser request with HTTP info returned
         * @return ApiResponse&lt;UsersGetFavoritesForUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the specified user&#39;s favorites. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetFavoritesForUserResponse> executeWithHttpInfo() throws ApiException {
            return getFavoritesForUserWithHttpInfo(userGid, resourceType, workspace, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getFavoritesForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the specified user&#39;s favorites. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetFavoritesForUserResponse> _callback) throws ApiException {
            return getFavoritesForUserAsync(userGid, resourceType, workspace, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get a user&#39;s favorites
     * Returns all of a user&#39;s favorites in the given workspace, of the given type. Results are given in order (The same order as Asana&#39;s sidebar).
     * @param userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (required)
     * @param resourceType The resource type of favorites to be returned. (required)
     * @param workspace The workspace in which to get favorites. (required)
     * @return GetFavoritesForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the specified user&#39;s favorites. </td><td>  -  </td></tr>
     </table>
     */
    public GetFavoritesForUserRequestBuilder getFavoritesForUser(String userGid, String resourceType, String workspace) throws IllegalArgumentException {
        if (userGid == null) throw new IllegalArgumentException("\"userGid\" is required but got null");
            

        if (resourceType == null) throw new IllegalArgumentException("\"resourceType\" is required but got null");
            

        if (workspace == null) throw new IllegalArgumentException("\"workspace\" is required but got null");
            

        return new GetFavoritesForUserRequestBuilder(userGid, resourceType, workspace);
    }
    private okhttp3.Call getUserRecordCall(String userGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_gid}"
            .replace("{" + "user_gid" + "}", localVarApiClient.escapeString(userGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRecordValidateBeforeCall(String userGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGid' is set
        if (userGid == null) {
            throw new ApiException("Missing the required parameter 'userGid' when calling getUserRecord(Async)");
        }

        return getUserRecordCall(userGid, optPretty, optFields, _callback);

    }


    private ApiResponse<UsersGetUserRecordResponse> getUserRecordWithHttpInfo(String userGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getUserRecordValidateBeforeCall(userGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<UsersGetUserRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserRecordAsync(String userGid, Boolean optPretty, List<String> optFields, final ApiCallback<UsersGetUserRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRecordValidateBeforeCall(userGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserRecordRequestBuilder {
        private final String userGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetUserRecordRequestBuilder(String userGid) {
            this.userGid = userGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetUserRecordRequestBuilder
         */
        public GetUserRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetUserRecordRequestBuilder
         */
        public GetUserRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getUserRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserRecordCall(userGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getUserRecord request
         * @return UsersGetUserRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user specified. </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserRecordResponse execute() throws ApiException {
            ApiResponse<UsersGetUserRecordResponse> localVarResp = getUserRecordWithHttpInfo(userGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserRecord request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user specified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserRecordResponse> executeWithHttpInfo() throws ApiException {
            return getUserRecordWithHttpInfo(userGid, optPretty, optFields);
        }

        /**
         * Execute getUserRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user specified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserRecordResponse> _callback) throws ApiException {
            return getUserRecordAsync(userGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a user
     * Returns the full user record for the single user with the provided ID.
     * @param userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (required)
     * @return GetUserRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the user specified. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserRecordRequestBuilder getUserRecord(String userGid) throws IllegalArgumentException {
        if (userGid == null) throw new IllegalArgumentException("\"userGid\" is required but got null");
            

        return new GetUserRecordRequestBuilder(userGid);
    }
    private okhttp3.Call listMultipleUsersCall(String workspace, String team, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleUsersValidateBeforeCall(String workspace, String team, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleUsersCall(workspace, team, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<ErrorResponse> listMultipleUsersWithHttpInfo(String workspace, String team, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleUsersValidateBeforeCall(workspace, team, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ErrorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleUsersAsync(String workspace, String team, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<ErrorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleUsersValidateBeforeCall(workspace, team, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ErrorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleUsersRequestBuilder {
        private String workspace;
        private String team;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListMultipleUsersRequestBuilder() {
        }

        /**
         * Set workspace
         * @param workspace The workspace or organization ID to filter users on. (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set team
         * @param team The team ID to filter users on. (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleUsersRequestBuilder
         */
        public ListMultipleUsersRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultipleUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleUsersCall(workspace, team, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listMultipleUsers request
         * @return ErrorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ErrorResponse execute() throws ApiException {
            ApiResponse<ErrorResponse> localVarResp = listMultipleUsersWithHttpInfo(workspace, team, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultipleUsers request with HTTP info returned
         * @return ApiResponse&lt;ErrorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<ErrorResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleUsersWithHttpInfo(workspace, team, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listMultipleUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public okhttp3.Call executeAsync(final ApiCallback<ErrorResponse> _callback) throws ApiException {
            return listMultipleUsersAsync(workspace, team, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get multiple users
     * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     * @return ListMultipleUsersRequestBuilder
     */
    public ListMultipleUsersRequestBuilder listMultipleUsers() throws IllegalArgumentException {
        return new ListMultipleUsersRequestBuilder();
    }
    private okhttp3.Call listTeamUsersCall(String teamGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/users"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamUsersValidateBeforeCall(String teamGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling listTeamUsers(Async)");
        }

        return listTeamUsersCall(teamGid, optPretty, offset, optFields, _callback);

    }


    private ApiResponse<UsersListTeamUsersResponse> listTeamUsersWithHttpInfo(String teamGid, Boolean optPretty, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listTeamUsersValidateBeforeCall(teamGid, optPretty, offset, optFields, null);
        Type localVarReturnType = new TypeToken<UsersListTeamUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamUsersAsync(String teamGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback<UsersListTeamUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamUsersValidateBeforeCall(teamGid, optPretty, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<UsersListTeamUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamUsersRequestBuilder {
        private final String teamGid;
        private Boolean optPretty;
        private String offset;
        private List<String> optFields;

        private ListTeamUsersRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListTeamUsersRequestBuilder
         */
        public ListTeamUsersRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListTeamUsersRequestBuilder
         */
        public ListTeamUsersRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListTeamUsersRequestBuilder
         */
        public ListTeamUsersRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listTeamUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user records for all the members of the team, including guests and limited access users </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamUsersCall(teamGid, optPretty, offset, optFields, _callback);
        }


        /**
         * Execute listTeamUsers request
         * @return UsersListTeamUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user records for all the members of the team, including guests and limited access users </td><td>  -  </td></tr>
         </table>
         */
        public UsersListTeamUsersResponse execute() throws ApiException {
            ApiResponse<UsersListTeamUsersResponse> localVarResp = listTeamUsersWithHttpInfo(teamGid, optPretty, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersListTeamUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user records for all the members of the team, including guests and limited access users </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListTeamUsersResponse> executeWithHttpInfo() throws ApiException {
            return listTeamUsersWithHttpInfo(teamGid, optPretty, offset, optFields);
        }

        /**
         * Execute listTeamUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the user records for all the members of the team, including guests and limited access users </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListTeamUsersResponse> _callback) throws ApiException {
            return listTeamUsersAsync(teamGid, optPretty, offset, optFields, _callback);
        }
    }

    /**
     * Get users in a team
     * Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     * @param teamGid Globally unique identifier for the team. (required)
     * @return ListTeamUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the user records for all the members of the team, including guests and limited access users </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamUsersRequestBuilder listTeamUsers(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new ListTeamUsersRequestBuilder(teamGid);
    }
    private okhttp3.Call listWorkspaceUsersCall(String workspaceGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/users"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceUsersValidateBeforeCall(String workspaceGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling listWorkspaceUsers(Async)");
        }

        return listWorkspaceUsersCall(workspaceGid, optPretty, offset, optFields, _callback);

    }


    private ApiResponse<UsersListWorkspaceUsersResponse> listWorkspaceUsersWithHttpInfo(String workspaceGid, Boolean optPretty, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(workspaceGid, optPretty, offset, optFields, null);
        Type localVarReturnType = new TypeToken<UsersListWorkspaceUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspaceUsersAsync(String workspaceGid, Boolean optPretty, String offset, List<String> optFields, final ApiCallback<UsersListWorkspaceUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(workspaceGid, optPretty, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<UsersListWorkspaceUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkspaceUsersRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private String offset;
        private List<String> optFields;

        private ListWorkspaceUsersRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listWorkspaceUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the users in the specified workspace or org. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspaceUsersCall(workspaceGid, optPretty, offset, optFields, _callback);
        }


        /**
         * Execute listWorkspaceUsers request
         * @return UsersListWorkspaceUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the users in the specified workspace or org. </td><td>  -  </td></tr>
         </table>
         */
        public UsersListWorkspaceUsersResponse execute() throws ApiException {
            ApiResponse<UsersListWorkspaceUsersResponse> localVarResp = listWorkspaceUsersWithHttpInfo(workspaceGid, optPretty, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkspaceUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersListWorkspaceUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the users in the specified workspace or org. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListWorkspaceUsersResponse> executeWithHttpInfo() throws ApiException {
            return listWorkspaceUsersWithHttpInfo(workspaceGid, optPretty, offset, optFields);
        }

        /**
         * Execute listWorkspaceUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the users in the specified workspace or org. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListWorkspaceUsersResponse> _callback) throws ApiException {
            return listWorkspaceUsersAsync(workspaceGid, optPretty, offset, optFields, _callback);
        }
    }

    /**
     * Get users in a workspace or organization
     * Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return ListWorkspaceUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the users in the specified workspace or org. </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkspaceUsersRequestBuilder listWorkspaceUsers(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new ListWorkspaceUsersRequestBuilder(workspaceGid);
    }
}
