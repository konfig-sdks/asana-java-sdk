/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomFieldSettingResponse;
import com.konfigthis.client.model.ProjectStatusResponse;
import com.konfigthis.client.model.StatusUpdateCompact;
import com.konfigthis.client.model.UserCompact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProjectUpdateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectUpdateRequest {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  /**
   * Color of the project.
   */
  @JsonAdapter(ColorEnum.Adapter.class)
 public enum ColorEnum {
    DARK_PINK("dark-pink"),
    
    DARK_GREEN("dark-green"),
    
    DARK_BLUE("dark-blue"),
    
    DARK_RED("dark-red"),
    
    DARK_TEAL("dark-teal"),
    
    DARK_BROWN("dark-brown"),
    
    DARK_ORANGE("dark-orange"),
    
    DARK_PURPLE("dark-purple"),
    
    DARK_WARM_GRAY("dark-warm-gray"),
    
    LIGHT_PINK("light-pink"),
    
    LIGHT_GREEN("light-green"),
    
    LIGHT_BLUE("light-blue"),
    
    LIGHT_RED("light-red"),
    
    LIGHT_TEAL("light-teal"),
    
    LIGHT_BROWN("light-brown"),
    
    LIGHT_ORANGE("light-orange"),
    
    LIGHT_PURPLE("light-purple"),
    
    LIGHT_WARM_GRAY("light-warm-gray"),
    
    NONE("none"),
    
    NULL("null");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorEnum fromValue(String value) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private ColorEnum color;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "current_status";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private ProjectStatusResponse currentStatus;

  public static final String SERIALIZED_NAME_CURRENT_STATUS_UPDATE = "current_status_update";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS_UPDATE)
  private StatusUpdateCompact currentStatusUpdate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD_SETTINGS = "custom_field_settings";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD_SETTINGS)
  private List<CustomFieldSettingResponse> customFieldSettings = null;

  /**
   * The default view (list, board, calendar, or timeline) of a project.
   */
  @JsonAdapter(DefaultViewEnum.Adapter.class)
 public enum DefaultViewEnum {
    LIST("list"),
    
    BOARD("board"),
    
    CALENDAR("calendar"),
    
    TIMELINE("timeline");

    private String value;

    DefaultViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultViewEnum fromValue(String value) {
      for (DefaultViewEnum b : DefaultViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultViewEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_VIEW = "default_view";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIEW)
  private DefaultViewEnum defaultView;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private LocalDate dueDate;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private LocalDate dueOn;

  public static final String SERIALIZED_NAME_HTML_NOTES = "html_notes";
  @SerializedName(SERIALIZED_NAME_HTML_NOTES)
  private String htmlNotes;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<UserCompact> members = null;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private LocalDate startOn;

  /**
   * The default access for users or teams who join or are added as members to the project.
   */
  @JsonAdapter(DefaultAccessLevelEnum.Adapter.class)
 public enum DefaultAccessLevelEnum {
    ADMIN("admin"),
    
    EDITOR("editor"),
    
    COMMENTER("commenter"),
    
    VIEWER("viewer");

    private String value;

    DefaultAccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultAccessLevelEnum fromValue(String value) {
      for (DefaultAccessLevelEnum b : DefaultAccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultAccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultAccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultAccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultAccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_LEVEL = "default_access_level";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_LEVEL)
  private DefaultAccessLevelEnum defaultAccessLevel;

  /**
   * The minimum access level needed for project members to modify this project&#39;s workflow and appearance.
   */
  @JsonAdapter(MinimumAccessLevelForCustomizationEnum.Adapter.class)
 public enum MinimumAccessLevelForCustomizationEnum {
    ADMIN("admin"),
    
    EDITOR("editor");

    private String value;

    MinimumAccessLevelForCustomizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumAccessLevelForCustomizationEnum fromValue(String value) {
      for (MinimumAccessLevelForCustomizationEnum b : MinimumAccessLevelForCustomizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumAccessLevelForCustomizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumAccessLevelForCustomizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumAccessLevelForCustomizationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumAccessLevelForCustomizationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_ACCESS_LEVEL_FOR_CUSTOMIZATION = "minimum_access_level_for_customization";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ACCESS_LEVEL_FOR_CUSTOMIZATION)
  private MinimumAccessLevelForCustomizationEnum minimumAccessLevelForCustomization;

  /**
   * The minimum access level needed for project members to share the project and manage project memberships.
   */
  @JsonAdapter(MinimumAccessLevelForSharingEnum.Adapter.class)
 public enum MinimumAccessLevelForSharingEnum {
    ADMIN("admin"),
    
    EDITOR("editor");

    private String value;

    MinimumAccessLevelForSharingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumAccessLevelForSharingEnum fromValue(String value) {
      for (MinimumAccessLevelForSharingEnum b : MinimumAccessLevelForSharingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumAccessLevelForSharingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumAccessLevelForSharingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumAccessLevelForSharingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumAccessLevelForSharingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_ACCESS_LEVEL_FOR_SHARING = "minimum_access_level_for_sharing";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ACCESS_LEVEL_FOR_SHARING)
  private MinimumAccessLevelForSharingEnum minimumAccessLevelForSharing;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, String> customFields = null;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private String followers;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public ProjectUpdateRequest() {
  }

  
  public ProjectUpdateRequest(
     String gid, 
     String resourceType, 
     OffsetDateTime createdAt, 
     List<CustomFieldSettingResponse> customFieldSettings, 
     List<UserCompact> members, 
     OffsetDateTime modifiedAt
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.createdAt = createdAt;
    this.customFieldSettings = customFieldSettings;
    this.members = members;
    this.modifiedAt = modifiedAt;
  }

   /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "Globally unique identifier of the resource, as a string.")

  public String getGid() {
    return gid;
  }




   /**
   * The base type of this resource.
   * @return resourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "task", value = "The base type of this resource.")

  public String getResourceType() {
    return resourceType;
  }




  public ProjectUpdateRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Stuff to buy", value = "Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ProjectUpdateRequest archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public ProjectUpdateRequest color(ColorEnum color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Color of the project.
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LIGHT_GREEN", value = "Color of the project.")

  public ColorEnum getColor() {
    return color;
  }


  public void setColor(ColorEnum color) {
    
    
    
    this.color = color;
  }


   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this resource was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  public ProjectUpdateRequest currentStatus(ProjectStatusResponse currentStatus) {
    
    
    
    
    this.currentStatus = currentStatus;
    return this;
  }

   /**
   * Get currentStatus
   * @return currentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectStatusResponse getCurrentStatus() {
    return currentStatus;
  }


  public void setCurrentStatus(ProjectStatusResponse currentStatus) {
    
    
    
    this.currentStatus = currentStatus;
  }


  public ProjectUpdateRequest currentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    
    
    
    
    this.currentStatusUpdate = currentStatusUpdate;
    return this;
  }

   /**
   * Get currentStatusUpdate
   * @return currentStatusUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusUpdateCompact getCurrentStatusUpdate() {
    return currentStatusUpdate;
  }


  public void setCurrentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    
    
    
    this.currentStatusUpdate = currentStatusUpdate;
  }


   /**
   * Array of Custom Field Settings (in compact form).
   * @return customFieldSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of Custom Field Settings (in compact form).")

  public List<CustomFieldSettingResponse> getCustomFieldSettings() {
    return customFieldSettings;
  }




  public ProjectUpdateRequest defaultView(DefaultViewEnum defaultView) {
    
    
    
    
    this.defaultView = defaultView;
    return this;
  }

   /**
   * The default view (list, board, calendar, or timeline) of a project.
   * @return defaultView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CALENDAR", value = "The default view (list, board, calendar, or timeline) of a project.")

  public DefaultViewEnum getDefaultView() {
    return defaultView;
  }


  public void setDefaultView(DefaultViewEnum defaultView) {
    
    
    
    this.defaultView = defaultView;
  }


  public ProjectUpdateRequest dueDate(LocalDate dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * *Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sat Sep 14 17:00:00 PDT 2019", value = "*Deprecated: new integrations should prefer the `due_on` field.*")

  public LocalDate getDueDate() {
    return dueDate;
  }


  public void setDueDate(LocalDate dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public ProjectUpdateRequest dueOn(LocalDate dueOn) {
    
    
    
    
    this.dueOn = dueOn;
    return this;
  }

   /**
   * The day on which this project is due. This takes a date with format YYYY-MM-DD.
   * @return dueOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sat Sep 14 17:00:00 PDT 2019", value = "The day on which this project is due. This takes a date with format YYYY-MM-DD.")

  public LocalDate getDueOn() {
    return dueOn;
  }


  public void setDueOn(LocalDate dueOn) {
    
    
    
    this.dueOn = dueOn;
  }


  public ProjectUpdateRequest htmlNotes(String htmlNotes) {
    
    
    
    
    this.htmlNotes = htmlNotes;
    return this;
  }

   /**
   * [Opt In](https://raw.githubusercontent.com). The notes of the project with formatting as HTML.
   * @return htmlNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<body>These are things we need to purchase.</body>", value = "[Opt In](https://raw.githubusercontent.com). The notes of the project with formatting as HTML.")

  public String getHtmlNotes() {
    return htmlNotes;
  }


  public void setHtmlNotes(String htmlNotes) {
    
    
    
    this.htmlNotes = htmlNotes;
  }


   /**
   * Array of users who are members of this project.
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of users who are members of this project.")

  public List<UserCompact> getMembers() {
    return members;
  }




   /**
   * The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }




  public ProjectUpdateRequest notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Free-form textual information associated with the project (ie., its description).
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "These are things we need to purchase.", value = "Free-form textual information associated with the project (ie., its description).")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public ProjectUpdateRequest _public(Boolean _public) {
    
    
    
    
    this._public = _public;
    return this;
  }

   /**
   * True if the project is public to its team.
   * @return _public
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the project is public to its team.")

  public Boolean getPublic() {
    return _public;
  }


  public void setPublic(Boolean _public) {
    
    
    
    this._public = _public;
  }


  public ProjectUpdateRequest startOn(LocalDate startOn) {
    
    
    
    
    this.startOn = startOn;
    return this;
  }

   /**
   * The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
   * @return startOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Sep 13 17:00:00 PDT 2019", value = "The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*")

  public LocalDate getStartOn() {
    return startOn;
  }


  public void setStartOn(LocalDate startOn) {
    
    
    
    this.startOn = startOn;
  }


  public ProjectUpdateRequest defaultAccessLevel(DefaultAccessLevelEnum defaultAccessLevel) {
    
    
    
    
    this.defaultAccessLevel = defaultAccessLevel;
    return this;
  }

   /**
   * The default access for users or teams who join or are added as members to the project.
   * @return defaultAccessLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The default access for users or teams who join or are added as members to the project.")

  public DefaultAccessLevelEnum getDefaultAccessLevel() {
    return defaultAccessLevel;
  }


  public void setDefaultAccessLevel(DefaultAccessLevelEnum defaultAccessLevel) {
    
    
    
    this.defaultAccessLevel = defaultAccessLevel;
  }


  public ProjectUpdateRequest minimumAccessLevelForCustomization(MinimumAccessLevelForCustomizationEnum minimumAccessLevelForCustomization) {
    
    
    
    
    this.minimumAccessLevelForCustomization = minimumAccessLevelForCustomization;
    return this;
  }

   /**
   * The minimum access level needed for project members to modify this project&#39;s workflow and appearance.
   * @return minimumAccessLevelForCustomization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The minimum access level needed for project members to modify this project's workflow and appearance.")

  public MinimumAccessLevelForCustomizationEnum getMinimumAccessLevelForCustomization() {
    return minimumAccessLevelForCustomization;
  }


  public void setMinimumAccessLevelForCustomization(MinimumAccessLevelForCustomizationEnum minimumAccessLevelForCustomization) {
    
    
    
    this.minimumAccessLevelForCustomization = minimumAccessLevelForCustomization;
  }


  public ProjectUpdateRequest minimumAccessLevelForSharing(MinimumAccessLevelForSharingEnum minimumAccessLevelForSharing) {
    
    
    
    
    this.minimumAccessLevelForSharing = minimumAccessLevelForSharing;
    return this;
  }

   /**
   * The minimum access level needed for project members to share the project and manage project memberships.
   * @return minimumAccessLevelForSharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The minimum access level needed for project members to share the project and manage project memberships.")

  public MinimumAccessLevelForSharingEnum getMinimumAccessLevelForSharing() {
    return minimumAccessLevelForSharing;
  }


  public void setMinimumAccessLevelForSharing(MinimumAccessLevelForSharingEnum minimumAccessLevelForSharing) {
    
    
    
    this.minimumAccessLevelForSharing = minimumAccessLevelForSharing;
  }


  public ProjectUpdateRequest customFields(Map<String, String> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public ProjectUpdateRequest putCustomFieldsItem(String key, String customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, or object (depending on the custom field type). See the [custom fields guide](https://raw.githubusercontent.com) for details on creating and updating custom field values.
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"5678904321\":\"On Hold\",\"4578152156\":\"Not Started\"}", value = "An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, or object (depending on the custom field type). See the [custom fields guide](https://raw.githubusercontent.com) for details on creating and updating custom field values.")

  public Map<String, String> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, String> customFields) {
    
    
    
    this.customFields = customFields;
  }


  public ProjectUpdateRequest followers(String followers) {
    
    
    
    
    this.followers = followers;
    return this;
  }

   /**
   * *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project.
   * @return followers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345,23456", value = "*Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project.")

  public String getFollowers() {
    return followers;
  }


  public void setFollowers(String followers) {
    
    
    
    this.followers = followers;
  }


  public ProjectUpdateRequest owner(String owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * The current owner of the project, may be null.
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The current owner of the project, may be null.")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    
    
    
    this.owner = owner;
  }


  public ProjectUpdateRequest team(String team) {
    
    
    
    
    this.team = team;
    return this;
  }

   /**
   * The team that this project is shared with.
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "The team that this project is shared with.")

  public String getTeam() {
    return team;
  }


  public void setTeam(String team) {
    
    
    
    this.team = team;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectUpdateRequest instance itself
   */
  public ProjectUpdateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectUpdateRequest projectUpdateRequest = (ProjectUpdateRequest) o;
    return Objects.equals(this.gid, projectUpdateRequest.gid) &&
        Objects.equals(this.resourceType, projectUpdateRequest.resourceType) &&
        Objects.equals(this.name, projectUpdateRequest.name) &&
        Objects.equals(this.archived, projectUpdateRequest.archived) &&
        Objects.equals(this.color, projectUpdateRequest.color) &&
        Objects.equals(this.createdAt, projectUpdateRequest.createdAt) &&
        Objects.equals(this.currentStatus, projectUpdateRequest.currentStatus) &&
        Objects.equals(this.currentStatusUpdate, projectUpdateRequest.currentStatusUpdate) &&
        Objects.equals(this.customFieldSettings, projectUpdateRequest.customFieldSettings) &&
        Objects.equals(this.defaultView, projectUpdateRequest.defaultView) &&
        Objects.equals(this.dueDate, projectUpdateRequest.dueDate) &&
        Objects.equals(this.dueOn, projectUpdateRequest.dueOn) &&
        Objects.equals(this.htmlNotes, projectUpdateRequest.htmlNotes) &&
        Objects.equals(this.members, projectUpdateRequest.members) &&
        Objects.equals(this.modifiedAt, projectUpdateRequest.modifiedAt) &&
        Objects.equals(this.notes, projectUpdateRequest.notes) &&
        Objects.equals(this._public, projectUpdateRequest._public) &&
        Objects.equals(this.startOn, projectUpdateRequest.startOn) &&
        Objects.equals(this.defaultAccessLevel, projectUpdateRequest.defaultAccessLevel) &&
        Objects.equals(this.minimumAccessLevelForCustomization, projectUpdateRequest.minimumAccessLevelForCustomization) &&
        Objects.equals(this.minimumAccessLevelForSharing, projectUpdateRequest.minimumAccessLevelForSharing) &&
        Objects.equals(this.customFields, projectUpdateRequest.customFields) &&
        Objects.equals(this.followers, projectUpdateRequest.followers) &&
        Objects.equals(this.owner, projectUpdateRequest.owner) &&
        Objects.equals(this.team, projectUpdateRequest.team)&&
        Objects.equals(this.additionalProperties, projectUpdateRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, name, archived, color, createdAt, currentStatus, currentStatusUpdate, customFieldSettings, defaultView, dueDate, dueOn, htmlNotes, members, modifiedAt, notes, _public, startOn, defaultAccessLevel, minimumAccessLevelForCustomization, minimumAccessLevelForSharing, customFields, followers, owner, team, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectUpdateRequest {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    currentStatusUpdate: ").append(toIndentedString(currentStatusUpdate)).append("\n");
    sb.append("    customFieldSettings: ").append(toIndentedString(customFieldSettings)).append("\n");
    sb.append("    defaultView: ").append(toIndentedString(defaultView)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    defaultAccessLevel: ").append(toIndentedString(defaultAccessLevel)).append("\n");
    sb.append("    minimumAccessLevelForCustomization: ").append(toIndentedString(minimumAccessLevelForCustomization)).append("\n");
    sb.append("    minimumAccessLevelForSharing: ").append(toIndentedString(minimumAccessLevelForSharing)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("name");
    openapiFields.add("archived");
    openapiFields.add("color");
    openapiFields.add("created_at");
    openapiFields.add("current_status");
    openapiFields.add("current_status_update");
    openapiFields.add("custom_field_settings");
    openapiFields.add("default_view");
    openapiFields.add("due_date");
    openapiFields.add("due_on");
    openapiFields.add("html_notes");
    openapiFields.add("members");
    openapiFields.add("modified_at");
    openapiFields.add("notes");
    openapiFields.add("public");
    openapiFields.add("start_on");
    openapiFields.add("default_access_level");
    openapiFields.add("minimum_access_level_for_customization");
    openapiFields.add("minimum_access_level_for_sharing");
    openapiFields.add("custom_fields");
    openapiFields.add("followers");
    openapiFields.add("owner");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectUpdateRequest is not found in the empty JSON string", ProjectUpdateRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("color").isJsonNull() && (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `current_status`
      if (jsonObj.get("current_status") != null && !jsonObj.get("current_status").isJsonNull()) {
        ProjectStatusResponse.validateJsonObject(jsonObj.getAsJsonObject("current_status"));
      }
      // validate the optional field `current_status_update`
      if (jsonObj.get("current_status_update") != null && !jsonObj.get("current_status_update").isJsonNull()) {
        StatusUpdateCompact.validateJsonObject(jsonObj.getAsJsonObject("current_status_update"));
      }
      if (jsonObj.get("custom_field_settings") != null && !jsonObj.get("custom_field_settings").isJsonNull()) {
        JsonArray jsonArraycustomFieldSettings = jsonObj.getAsJsonArray("custom_field_settings");
        if (jsonArraycustomFieldSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_field_settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_field_settings` to be an array in the JSON string but got `%s`", jsonObj.get("custom_field_settings").toString()));
          }

          // validate the optional field `custom_field_settings` (array)
          for (int i = 0; i < jsonArraycustomFieldSettings.size(); i++) {
            CustomFieldSettingResponse.validateJsonObject(jsonArraycustomFieldSettings.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("default_view") != null && !jsonObj.get("default_view").isJsonNull()) && !jsonObj.get("default_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_view").toString()));
      }
      if ((jsonObj.get("html_notes") != null && !jsonObj.get("html_notes").isJsonNull()) && !jsonObj.get("html_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_notes").toString()));
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            UserCompact.validateJsonObject(jsonArraymembers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("default_access_level") != null && !jsonObj.get("default_access_level").isJsonNull()) && !jsonObj.get("default_access_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_access_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_access_level").toString()));
      }
      if ((jsonObj.get("minimum_access_level_for_customization") != null && !jsonObj.get("minimum_access_level_for_customization").isJsonNull()) && !jsonObj.get("minimum_access_level_for_customization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_access_level_for_customization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_access_level_for_customization").toString()));
      }
      if ((jsonObj.get("minimum_access_level_for_sharing") != null && !jsonObj.get("minimum_access_level_for_sharing").isJsonNull()) && !jsonObj.get("minimum_access_level_for_sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_access_level_for_sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_access_level_for_sharing").toString()));
      }
      if ((jsonObj.get("followers") != null && !jsonObj.get("followers").isJsonNull()) && !jsonObj.get("followers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followers").toString()));
      }
      if (!jsonObj.get("owner").isJsonNull() && (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectUpdateRequest>() {
           @Override
           public void write(JsonWriter out, ProjectUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectUpdateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to ProjectUpdateRequest
  */
  public static ProjectUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectUpdateRequest.class);
  }

 /**
  * Convert an instance of ProjectUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

