/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Like;
import com.konfigthis.client.model.ProjectCompact;
import com.konfigthis.client.model.UserCompact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * StatusUpdateResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StatusUpdateResponseAllOf {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserCompact author;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserCompact createdBy;

  public static final String SERIALIZED_NAME_HEARTED = "hearted";
  @SerializedName(SERIALIZED_NAME_HEARTED)
  private Boolean hearted;

  public static final String SERIALIZED_NAME_HEARTS = "hearts";
  @SerializedName(SERIALIZED_NAME_HEARTS)
  private List<Like> hearts = null;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = null;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NUM_HEARTS = "num_hearts";
  @SerializedName(SERIALIZED_NAME_NUM_HEARTS)
  private Integer numHearts;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private ProjectCompact parent;

  public StatusUpdateResponseAllOf() {
  }

  
  public StatusUpdateResponseAllOf(
     OffsetDateTime createdAt, 
     Boolean hearted, 
     List<Like> hearts, 
     List<Like> likes, 
     OffsetDateTime modifiedAt, 
     Integer numHearts, 
     Integer numLikes
  ) {
    this();
    this.createdAt = createdAt;
    this.hearted = hearted;
    this.hearts = hearts;
    this.likes = likes;
    this.modifiedAt = modifiedAt;
    this.numHearts = numHearts;
    this.numLikes = numLikes;
  }

  public StatusUpdateResponseAllOf author(UserCompact author) {
    
    
    
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserCompact getAuthor() {
    return author;
  }


  public void setAuthor(UserCompact author) {
    
    
    
    this.author = author;
  }


   /**
   * The time at which this resource was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this resource was created.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  public StatusUpdateResponseAllOf createdBy(UserCompact createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserCompact getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(UserCompact createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


   /**
   * *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
   * @return hearted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "*Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.")

  public Boolean getHearted() {
    return hearted;
  }




   /**
   * *Deprecated - please use likes instead* Array of likes for users who have hearted this status.
   * @return hearts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Deprecated - please use likes instead* Array of likes for users who have hearted this status.")

  public List<Like> getHearts() {
    return hearts;
  }




  public StatusUpdateResponseAllOf liked(Boolean liked) {
    
    
    
    
    this.liked = liked;
    return this;
  }

   /**
   * True if the status is liked by the authorized user, false if not.
   * @return liked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "True if the status is liked by the authorized user, false if not.")

  public Boolean getLiked() {
    return liked;
  }


  public void setLiked(Boolean liked) {
    
    
    
    this.liked = liked;
  }


   /**
   * Array of likes for users who have liked this status.
   * @return likes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of likes for users who have liked this status.")

  public List<Like> getLikes() {
    return likes;
  }




   /**
   * The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-02-22T02:06:58.147Z", value = "The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }




   /**
   * *Deprecated - please use likes instead* The number of users who have hearted this status.
   * @return numHearts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "*Deprecated - please use likes instead* The number of users who have hearted this status.")

  public Integer getNumHearts() {
    return numHearts;
  }




   /**
   * The number of users who have liked this status.
   * @return numLikes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "The number of users who have liked this status.")

  public Integer getNumLikes() {
    return numLikes;
  }




  public StatusUpdateResponseAllOf parent(ProjectCompact parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProjectCompact getParent() {
    return parent;
  }


  public void setParent(ProjectCompact parent) {
    
    
    
    this.parent = parent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StatusUpdateResponseAllOf instance itself
   */
  public StatusUpdateResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusUpdateResponseAllOf statusUpdateResponseAllOf = (StatusUpdateResponseAllOf) o;
    return Objects.equals(this.author, statusUpdateResponseAllOf.author) &&
        Objects.equals(this.createdAt, statusUpdateResponseAllOf.createdAt) &&
        Objects.equals(this.createdBy, statusUpdateResponseAllOf.createdBy) &&
        Objects.equals(this.hearted, statusUpdateResponseAllOf.hearted) &&
        Objects.equals(this.hearts, statusUpdateResponseAllOf.hearts) &&
        Objects.equals(this.liked, statusUpdateResponseAllOf.liked) &&
        Objects.equals(this.likes, statusUpdateResponseAllOf.likes) &&
        Objects.equals(this.modifiedAt, statusUpdateResponseAllOf.modifiedAt) &&
        Objects.equals(this.numHearts, statusUpdateResponseAllOf.numHearts) &&
        Objects.equals(this.numLikes, statusUpdateResponseAllOf.numLikes) &&
        Objects.equals(this.parent, statusUpdateResponseAllOf.parent)&&
        Objects.equals(this.additionalProperties, statusUpdateResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, createdAt, createdBy, hearted, hearts, liked, likes, modifiedAt, numHearts, numLikes, parent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusUpdateResponseAllOf {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("hearted");
    openapiFields.add("hearts");
    openapiFields.add("liked");
    openapiFields.add("likes");
    openapiFields.add("modified_at");
    openapiFields.add("num_hearts");
    openapiFields.add("num_likes");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatusUpdateResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatusUpdateResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusUpdateResponseAllOf is not found in the empty JSON string", StatusUpdateResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserCompact.validateJsonObject(jsonObj.getAsJsonObject("author"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserCompact.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      if (jsonObj.get("hearts") != null && !jsonObj.get("hearts").isJsonNull()) {
        JsonArray jsonArrayhearts = jsonObj.getAsJsonArray("hearts");
        if (jsonArrayhearts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hearts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hearts` to be an array in the JSON string but got `%s`", jsonObj.get("hearts").toString()));
          }

          // validate the optional field `hearts` (array)
          for (int i = 0; i < jsonArrayhearts.size(); i++) {
            Like.validateJsonObject(jsonArrayhearts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonObject(jsonArraylikes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        ProjectCompact.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusUpdateResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusUpdateResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusUpdateResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusUpdateResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusUpdateResponseAllOf>() {
           @Override
           public void write(JsonWriter out, StatusUpdateResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusUpdateResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StatusUpdateResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatusUpdateResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatusUpdateResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to StatusUpdateResponseAllOf
  */
  public static StatusUpdateResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusUpdateResponseAllOf.class);
  }

 /**
  * Convert an instance of StatusUpdateResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

