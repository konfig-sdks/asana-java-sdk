/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TimePeriodsGetCompactTimePeriodsResponse;
import com.konfigthis.client.model.TimePeriodsGetFullRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimePeriodsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimePeriodsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimePeriodsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCompactTimePeriodsCall(String workspace, Boolean optPretty, Integer limit, String offset, LocalDate startOn, LocalDate endOn, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (startOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on", startOn));
        }

        if (endOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_on", endOn));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactTimePeriodsValidateBeforeCall(String workspace, Boolean optPretty, Integer limit, String offset, LocalDate startOn, LocalDate endOn, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getCompactTimePeriods(Async)");
        }

        return getCompactTimePeriodsCall(workspace, optPretty, limit, offset, startOn, endOn, optFields, _callback);

    }


    private ApiResponse<TimePeriodsGetCompactTimePeriodsResponse> getCompactTimePeriodsWithHttpInfo(String workspace, Boolean optPretty, Integer limit, String offset, LocalDate startOn, LocalDate endOn, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactTimePeriodsValidateBeforeCall(workspace, optPretty, limit, offset, startOn, endOn, optFields, null);
        Type localVarReturnType = new TypeToken<TimePeriodsGetCompactTimePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactTimePeriodsAsync(String workspace, Boolean optPretty, Integer limit, String offset, LocalDate startOn, LocalDate endOn, List<String> optFields, final ApiCallback<TimePeriodsGetCompactTimePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactTimePeriodsValidateBeforeCall(workspace, optPretty, limit, offset, startOn, endOn, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimePeriodsGetCompactTimePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactTimePeriodsRequestBuilder {
        private final String workspace;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private LocalDate startOn;
        private LocalDate endOn;
        private List<String> optFields;

        private GetCompactTimePeriodsRequestBuilder(String workspace) {
            this.workspace = workspace;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set startOn
         * @param startOn ISO 8601 date string (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder startOn(LocalDate startOn) {
            this.startOn = startOn;
            return this;
        }
        
        /**
         * Set endOn
         * @param endOn ISO 8601 date string (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder endOn(LocalDate endOn) {
            this.endOn = endOn;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactTimePeriodsRequestBuilder
         */
        public GetCompactTimePeriodsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactTimePeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time periods. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactTimePeriodsCall(workspace, optPretty, limit, offset, startOn, endOn, optFields, _callback);
        }


        /**
         * Execute getCompactTimePeriods request
         * @return TimePeriodsGetCompactTimePeriodsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time periods. </td><td>  -  </td></tr>
         </table>
         */
        public TimePeriodsGetCompactTimePeriodsResponse execute() throws ApiException {
            ApiResponse<TimePeriodsGetCompactTimePeriodsResponse> localVarResp = getCompactTimePeriodsWithHttpInfo(workspace, optPretty, limit, offset, startOn, endOn, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactTimePeriods request with HTTP info returned
         * @return ApiResponse&lt;TimePeriodsGetCompactTimePeriodsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time periods. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimePeriodsGetCompactTimePeriodsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactTimePeriodsWithHttpInfo(workspace, optPretty, limit, offset, startOn, endOn, optFields);
        }

        /**
         * Execute getCompactTimePeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested time periods. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimePeriodsGetCompactTimePeriodsResponse> _callback) throws ApiException {
            return getCompactTimePeriodsAsync(workspace, optPretty, limit, offset, startOn, endOn, optFields, _callback);
        }
    }

    /**
     * Get time periods
     * Returns compact time period records.
     * @param workspace Globally unique identifier for the workspace. (required)
     * @return GetCompactTimePeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested time periods. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactTimePeriodsRequestBuilder getCompactTimePeriods(String workspace) throws IllegalArgumentException {
        if (workspace == null) throw new IllegalArgumentException("\"workspace\" is required but got null");
            

        return new GetCompactTimePeriodsRequestBuilder(workspace);
    }
    private okhttp3.Call getFullRecordCall(String timePeriodGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time_periods/{time_period_gid}"
            .replace("{" + "time_period_gid" + "}", localVarApiClient.escapeString(timePeriodGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFullRecordValidateBeforeCall(String timePeriodGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timePeriodGid' is set
        if (timePeriodGid == null) {
            throw new ApiException("Missing the required parameter 'timePeriodGid' when calling getFullRecord(Async)");
        }

        return getFullRecordCall(timePeriodGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TimePeriodsGetFullRecordResponse> getFullRecordWithHttpInfo(String timePeriodGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(timePeriodGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TimePeriodsGetFullRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFullRecordAsync(String timePeriodGid, Boolean optPretty, List<String> optFields, final ApiCallback<TimePeriodsGetFullRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(timePeriodGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TimePeriodsGetFullRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFullRecordRequestBuilder {
        private final String timePeriodGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetFullRecordRequestBuilder(String timePeriodGid) {
            this.timePeriodGid = timePeriodGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getFullRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single time period. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFullRecordCall(timePeriodGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getFullRecord request
         * @return TimePeriodsGetFullRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single time period. </td><td>  -  </td></tr>
         </table>
         */
        public TimePeriodsGetFullRecordResponse execute() throws ApiException {
            ApiResponse<TimePeriodsGetFullRecordResponse> localVarResp = getFullRecordWithHttpInfo(timePeriodGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFullRecord request with HTTP info returned
         * @return ApiResponse&lt;TimePeriodsGetFullRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single time period. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimePeriodsGetFullRecordResponse> executeWithHttpInfo() throws ApiException {
            return getFullRecordWithHttpInfo(timePeriodGid, optPretty, optFields);
        }

        /**
         * Execute getFullRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single time period. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimePeriodsGetFullRecordResponse> _callback) throws ApiException {
            return getFullRecordAsync(timePeriodGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a time period
     * Returns the full record for a single time period.
     * @param timePeriodGid Globally unique identifier for the time period. (required)
     * @return GetFullRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single time period. </td><td>  -  </td></tr>
     </table>
     */
    public GetFullRecordRequestBuilder getFullRecord(String timePeriodGid) throws IllegalArgumentException {
        if (timePeriodGid == null) throw new IllegalArgumentException("\"timePeriodGid\" is required but got null");
            

        return new GetFullRecordRequestBuilder(timePeriodGid);
    }
}
