/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddCustomFieldSettingRequest;
import com.konfigthis.client.model.AddFollowersRequest;
import com.konfigthis.client.model.AddMembersRequest;
import com.konfigthis.client.model.ProjectDuplicateRequest;
import com.konfigthis.client.model.ProjectRequest;
import com.konfigthis.client.model.ProjectSaveAsTemplateRequest;
import com.konfigthis.client.model.ProjectUpdateRequest;
import com.konfigthis.client.model.ProjectsAddCustomFieldSettingRequest;
import com.konfigthis.client.model.ProjectsAddCustomFieldSettingResponse;
import com.konfigthis.client.model.ProjectsAddFollowersToProjectRequest;
import com.konfigthis.client.model.ProjectsAddFollowersToProjectResponse;
import com.konfigthis.client.model.ProjectsAddMembersToProjectRequest;
import com.konfigthis.client.model.ProjectsAddMembersToProjectResponse;
import com.konfigthis.client.model.ProjectsCreateInWorkspaceRequest;
import com.konfigthis.client.model.ProjectsCreateInWorkspaceResponse;
import com.konfigthis.client.model.ProjectsCreateNewProjectRecordRequest;
import com.konfigthis.client.model.ProjectsCreateNewProjectRecordResponse;
import com.konfigthis.client.model.ProjectsCreateProjectForTeamRequest;
import com.konfigthis.client.model.ProjectsCreateProjectForTeamResponse;
import com.konfigthis.client.model.ProjectsCreateProjectTemplateJobRequest;
import com.konfigthis.client.model.ProjectsCreateProjectTemplateJobResponse;
import com.konfigthis.client.model.ProjectsDeleteProjectByIdResponse;
import com.konfigthis.client.model.ProjectsDuplicateProjectJobRequest;
import com.konfigthis.client.model.ProjectsDuplicateProjectJobResponse;
import com.konfigthis.client.model.ProjectsGetAllInWorkspaceResponse;
import com.konfigthis.client.model.ProjectsGetProjectRecordResponse;
import com.konfigthis.client.model.ProjectsGetTaskCountsResponse;
import com.konfigthis.client.model.ProjectsGetTeamProjectsResponse;
import com.konfigthis.client.model.ProjectsListMultipleResponse;
import com.konfigthis.client.model.ProjectsRemoveCustomFieldRequest;
import com.konfigthis.client.model.ProjectsRemoveCustomFieldResponse;
import com.konfigthis.client.model.ProjectsRemoveMembersFromProjectRequest;
import com.konfigthis.client.model.ProjectsRemoveMembersFromProjectResponse;
import com.konfigthis.client.model.ProjectsRemoveProjectFollowersRequest;
import com.konfigthis.client.model.ProjectsRemoveProjectFollowersResponse;
import com.konfigthis.client.model.ProjectsTaskProjectsListResponse;
import com.konfigthis.client.model.ProjectsUpdateProjectRecordRequest;
import com.konfigthis.client.model.ProjectsUpdateProjectRecordResponse;
import com.konfigthis.client.model.RemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.RemoveFollowersRequest;
import com.konfigthis.client.model.RemoveMembersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCustomFieldSettingCall(String projectGid, ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsAddCustomFieldSettingRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/addCustomFieldSetting"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomFieldSettingValidateBeforeCall(String projectGid, ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling addCustomFieldSetting(Async)");
        }

        // verify the required parameter 'projectsAddCustomFieldSettingRequest' is set
        if (projectsAddCustomFieldSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsAddCustomFieldSettingRequest' when calling addCustomFieldSetting(Async)");
        }

        return addCustomFieldSettingCall(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsAddCustomFieldSettingResponse> addCustomFieldSettingWithHttpInfo(String projectGid, ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addCustomFieldSettingValidateBeforeCall(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsAddCustomFieldSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomFieldSettingAsync(String projectGid, ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsAddCustomFieldSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomFieldSettingValidateBeforeCall(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsAddCustomFieldSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomFieldSettingRequestBuilder {
        private final String projectGid;
        private AddCustomFieldSettingRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddCustomFieldSettingRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddCustomFieldSettingRequestBuilder
         */
        public AddCustomFieldSettingRequestBuilder data(AddCustomFieldSettingRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddCustomFieldSettingRequestBuilder
         */
        public AddCustomFieldSettingRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddCustomFieldSettingRequestBuilder
         */
        public AddCustomFieldSettingRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addCustomFieldSetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingCall(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields, _callback);
        }

        private ProjectsAddCustomFieldSettingRequest buildBodyParams() {
            ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest = new ProjectsAddCustomFieldSettingRequest();
            projectsAddCustomFieldSettingRequest.data(this.data);
            return projectsAddCustomFieldSettingRequest;
        }

        /**
         * Execute addCustomFieldSetting request
         * @return ProjectsAddCustomFieldSettingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsAddCustomFieldSettingResponse execute() throws ApiException {
            ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest = buildBodyParams();
            ApiResponse<ProjectsAddCustomFieldSettingResponse> localVarResp = addCustomFieldSettingWithHttpInfo(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomFieldSetting request with HTTP info returned
         * @return ApiResponse&lt;ProjectsAddCustomFieldSettingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsAddCustomFieldSettingResponse> executeWithHttpInfo() throws ApiException {
            ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingWithHttpInfo(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields);
        }

        /**
         * Execute addCustomFieldSetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsAddCustomFieldSettingResponse> _callback) throws ApiException {
            ProjectsAddCustomFieldSettingRequest projectsAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingAsync(projectGid, projectsAddCustomFieldSettingRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add a custom field to a project
     * Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsAddCustomFieldSettingRequest Information about the custom field setting. (required)
     * @return AddCustomFieldSettingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the custom field to the project. </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomFieldSettingRequestBuilder addCustomFieldSetting(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new AddCustomFieldSettingRequestBuilder(projectGid);
    }
    private okhttp3.Call addFollowersToProjectCall(String projectGid, ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsAddFollowersToProjectRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/addFollowers"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFollowersToProjectValidateBeforeCall(String projectGid, ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling addFollowersToProject(Async)");
        }

        // verify the required parameter 'projectsAddFollowersToProjectRequest' is set
        if (projectsAddFollowersToProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsAddFollowersToProjectRequest' when calling addFollowersToProject(Async)");
        }

        return addFollowersToProjectCall(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsAddFollowersToProjectResponse> addFollowersToProjectWithHttpInfo(String projectGid, ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addFollowersToProjectValidateBeforeCall(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsAddFollowersToProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFollowersToProjectAsync(String projectGid, ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsAddFollowersToProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFollowersToProjectValidateBeforeCall(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsAddFollowersToProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFollowersToProjectRequestBuilder {
        private final String projectGid;
        private AddFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddFollowersToProjectRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddFollowersToProjectRequestBuilder
         */
        public AddFollowersToProjectRequestBuilder data(AddFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddFollowersToProjectRequestBuilder
         */
        public AddFollowersToProjectRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddFollowersToProjectRequestBuilder
         */
        public AddFollowersToProjectRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addFollowersToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added followers to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest = buildBodyParams();
            return addFollowersToProjectCall(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields, _callback);
        }

        private ProjectsAddFollowersToProjectRequest buildBodyParams() {
            ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest = new ProjectsAddFollowersToProjectRequest();
            projectsAddFollowersToProjectRequest.data(this.data);
            return projectsAddFollowersToProjectRequest;
        }

        /**
         * Execute addFollowersToProject request
         * @return ProjectsAddFollowersToProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added followers to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsAddFollowersToProjectResponse execute() throws ApiException {
            ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest = buildBodyParams();
            ApiResponse<ProjectsAddFollowersToProjectResponse> localVarResp = addFollowersToProjectWithHttpInfo(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFollowersToProject request with HTTP info returned
         * @return ApiResponse&lt;ProjectsAddFollowersToProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added followers to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsAddFollowersToProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest = buildBodyParams();
            return addFollowersToProjectWithHttpInfo(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields);
        }

        /**
         * Execute addFollowersToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added followers to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsAddFollowersToProjectResponse> _callback) throws ApiException {
            ProjectsAddFollowersToProjectRequest projectsAddFollowersToProjectRequest = buildBodyParams();
            return addFollowersToProjectAsync(projectGid, projectsAddFollowersToProjectRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add followers to a project
     * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \&quot;tasks added\&quot; notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsAddFollowersToProjectRequest Information about the followers being added. (required)
     * @return AddFollowersToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added followers to the project. </td><td>  -  </td></tr>
     </table>
     */
    public AddFollowersToProjectRequestBuilder addFollowersToProject(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new AddFollowersToProjectRequestBuilder(projectGid);
    }
    private okhttp3.Call addMembersToProjectCall(String projectGid, ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsAddMembersToProjectRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/addMembers"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersToProjectValidateBeforeCall(String projectGid, ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling addMembersToProject(Async)");
        }

        // verify the required parameter 'projectsAddMembersToProjectRequest' is set
        if (projectsAddMembersToProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsAddMembersToProjectRequest' when calling addMembersToProject(Async)");
        }

        return addMembersToProjectCall(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsAddMembersToProjectResponse> addMembersToProjectWithHttpInfo(String projectGid, ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addMembersToProjectValidateBeforeCall(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsAddMembersToProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMembersToProjectAsync(String projectGid, ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsAddMembersToProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersToProjectValidateBeforeCall(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsAddMembersToProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMembersToProjectRequestBuilder {
        private final String projectGid;
        private AddMembersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddMembersToProjectRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddMembersToProjectRequestBuilder
         */
        public AddMembersToProjectRequestBuilder data(AddMembersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddMembersToProjectRequestBuilder
         */
        public AddMembersToProjectRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddMembersToProjectRequestBuilder
         */
        public AddMembersToProjectRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addMembersToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest = buildBodyParams();
            return addMembersToProjectCall(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields, _callback);
        }

        private ProjectsAddMembersToProjectRequest buildBodyParams() {
            ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest = new ProjectsAddMembersToProjectRequest();
            projectsAddMembersToProjectRequest.data(this.data);
            return projectsAddMembersToProjectRequest;
        }

        /**
         * Execute addMembersToProject request
         * @return ProjectsAddMembersToProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsAddMembersToProjectResponse execute() throws ApiException {
            ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest = buildBodyParams();
            ApiResponse<ProjectsAddMembersToProjectResponse> localVarResp = addMembersToProjectWithHttpInfo(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMembersToProject request with HTTP info returned
         * @return ApiResponse&lt;ProjectsAddMembersToProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsAddMembersToProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest = buildBodyParams();
            return addMembersToProjectWithHttpInfo(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields);
        }

        /**
         * Execute addMembersToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsAddMembersToProjectResponse> _callback) throws ApiException {
            ProjectsAddMembersToProjectRequest projectsAddMembersToProjectRequest = buildBodyParams();
            return addMembersToProjectAsync(projectGid, projectsAddMembersToProjectRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add users to a project
     * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user&#39;s default notification settings (i.e., in the \&quot;Notifcations\&quot; tab of \&quot;My Profile Settings\&quot;) will override this endpoint&#39;s default behavior of setting \&quot;Tasks added\&quot; notifications to &#x60;false&#x60;. Returns the updated project record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsAddMembersToProjectRequest Information about the members being added. (required)
     * @return AddMembersToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added members to the project. </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersToProjectRequestBuilder addMembersToProject(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new AddMembersToProjectRequestBuilder(projectGid);
    }
    private okhttp3.Call createInWorkspaceCall(String workspaceGid, ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateInWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/projects"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInWorkspaceValidateBeforeCall(String workspaceGid, ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling createInWorkspace(Async)");
        }

        // verify the required parameter 'projectsCreateInWorkspaceRequest' is set
        if (projectsCreateInWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsCreateInWorkspaceRequest' when calling createInWorkspace(Async)");
        }

        return createInWorkspaceCall(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsCreateInWorkspaceResponse> createInWorkspaceWithHttpInfo(String workspaceGid, ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createInWorkspaceValidateBeforeCall(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateInWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInWorkspaceAsync(String workspaceGid, ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsCreateInWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInWorkspaceValidateBeforeCall(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateInWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInWorkspaceRequestBuilder {
        private final String workspaceGid;
        private ProjectRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateInWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateInWorkspaceRequestBuilder
         */
        public CreateInWorkspaceRequestBuilder data(ProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateInWorkspaceRequestBuilder
         */
        public CreateInWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateInWorkspaceRequestBuilder
         */
        public CreateInWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createInWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project in the specified workspace. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest = buildBodyParams();
            return createInWorkspaceCall(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields, _callback);
        }

        private ProjectsCreateInWorkspaceRequest buildBodyParams() {
            ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest = new ProjectsCreateInWorkspaceRequest();
            projectsCreateInWorkspaceRequest.data(this.data);
            return projectsCreateInWorkspaceRequest;
        }

        /**
         * Execute createInWorkspace request
         * @return ProjectsCreateInWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project in the specified workspace. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateInWorkspaceResponse execute() throws ApiException {
            ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest = buildBodyParams();
            ApiResponse<ProjectsCreateInWorkspaceResponse> localVarResp = createInWorkspaceWithHttpInfo(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInWorkspace request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateInWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project in the specified workspace. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateInWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest = buildBodyParams();
            return createInWorkspaceWithHttpInfo(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields);
        }

        /**
         * Execute createInWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project in the specified workspace. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateInWorkspaceResponse> _callback) throws ApiException {
            ProjectsCreateInWorkspaceRequest projectsCreateInWorkspaceRequest = buildBodyParams();
            return createInWorkspaceAsync(workspaceGid, projectsCreateInWorkspaceRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project in a workspace
     * Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param projectsCreateInWorkspaceRequest The new project to create. (required)
     * @return CreateInWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new project in the specified workspace. </td><td>  -  </td></tr>
     </table>
     */
    public CreateInWorkspaceRequestBuilder createInWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new CreateInWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call createNewProjectRecordCall(ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateNewProjectRecordRequest;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewProjectRecordValidateBeforeCall(ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectsCreateNewProjectRecordRequest' is set
        if (projectsCreateNewProjectRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsCreateNewProjectRecordRequest' when calling createNewProjectRecord(Async)");
        }

        return createNewProjectRecordCall(projectsCreateNewProjectRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsCreateNewProjectRecordResponse> createNewProjectRecordWithHttpInfo(ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewProjectRecordValidateBeforeCall(projectsCreateNewProjectRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateNewProjectRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewProjectRecordAsync(ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsCreateNewProjectRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewProjectRecordValidateBeforeCall(projectsCreateNewProjectRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateNewProjectRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewProjectRecordRequestBuilder {
        private ProjectRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewProjectRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewProjectRecordRequestBuilder
         */
        public CreateNewProjectRecordRequestBuilder data(ProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewProjectRecordRequestBuilder
         */
        public CreateNewProjectRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewProjectRecordRequestBuilder
         */
        public CreateNewProjectRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewProjectRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest = buildBodyParams();
            return createNewProjectRecordCall(projectsCreateNewProjectRecordRequest, optPretty, optFields, _callback);
        }

        private ProjectsCreateNewProjectRecordRequest buildBodyParams() {
            ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest = new ProjectsCreateNewProjectRecordRequest();
            projectsCreateNewProjectRecordRequest.data(this.data);
            return projectsCreateNewProjectRecordRequest;
        }

        /**
         * Execute createNewProjectRecord request
         * @return ProjectsCreateNewProjectRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateNewProjectRecordResponse execute() throws ApiException {
            ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest = buildBodyParams();
            ApiResponse<ProjectsCreateNewProjectRecordResponse> localVarResp = createNewProjectRecordWithHttpInfo(projectsCreateNewProjectRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewProjectRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateNewProjectRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateNewProjectRecordResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest = buildBodyParams();
            return createNewProjectRecordWithHttpInfo(projectsCreateNewProjectRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewProjectRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateNewProjectRecordResponse> _callback) throws ApiException {
            ProjectsCreateNewProjectRecordRequest projectsCreateNewProjectRecordRequest = buildBodyParams();
            return createNewProjectRecordAsync(projectsCreateNewProjectRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project
     * Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the &#x60;workspace&#x60; parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a &#x60;team&#x60; to share the project with.  Returns the full record of the newly created project.
     * @param projectsCreateNewProjectRecordRequest The project to create. (required)
     * @return CreateNewProjectRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewProjectRecordRequestBuilder createNewProjectRecord() throws IllegalArgumentException {
        return new CreateNewProjectRecordRequestBuilder();
    }
    private okhttp3.Call createProjectForTeamCall(String teamGid, ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateProjectForTeamRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/projects"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectForTeamValidateBeforeCall(String teamGid, ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling createProjectForTeam(Async)");
        }

        // verify the required parameter 'projectsCreateProjectForTeamRequest' is set
        if (projectsCreateProjectForTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsCreateProjectForTeamRequest' when calling createProjectForTeam(Async)");
        }

        return createProjectForTeamCall(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsCreateProjectForTeamResponse> createProjectForTeamWithHttpInfo(String teamGid, ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createProjectForTeamValidateBeforeCall(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectForTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectForTeamAsync(String teamGid, ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsCreateProjectForTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectForTeamValidateBeforeCall(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectForTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectForTeamRequestBuilder {
        private final String teamGid;
        private ProjectRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateProjectForTeamRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateProjectForTeamRequestBuilder
         */
        public CreateProjectForTeamRequestBuilder data(ProjectRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateProjectForTeamRequestBuilder
         */
        public CreateProjectForTeamRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateProjectForTeamRequestBuilder
         */
        public CreateProjectForTeamRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createProjectForTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest = buildBodyParams();
            return createProjectForTeamCall(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields, _callback);
        }

        private ProjectsCreateProjectForTeamRequest buildBodyParams() {
            ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest = new ProjectsCreateProjectForTeamRequest();
            projectsCreateProjectForTeamRequest.data(this.data);
            return projectsCreateProjectForTeamRequest;
        }

        /**
         * Execute createProjectForTeam request
         * @return ProjectsCreateProjectForTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateProjectForTeamResponse execute() throws ApiException {
            ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest = buildBodyParams();
            ApiResponse<ProjectsCreateProjectForTeamResponse> localVarResp = createProjectForTeamWithHttpInfo(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectForTeam request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateProjectForTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateProjectForTeamResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest = buildBodyParams();
            return createProjectForTeamWithHttpInfo(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields);
        }

        /**
         * Execute createProjectForTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateProjectForTeamResponse> _callback) throws ApiException {
            ProjectsCreateProjectForTeamRequest projectsCreateProjectForTeamRequest = buildBodyParams();
            return createProjectForTeamAsync(teamGid, projectsCreateProjectForTeamRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project in a team
     * Creates a project shared with the given team.  Returns the full record of the newly created project.
     * @param teamGid Globally unique identifier for the team. (required)
     * @param projectsCreateProjectForTeamRequest The new project to create. (required)
     * @return CreateProjectForTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified project. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectForTeamRequestBuilder createProjectForTeam(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new CreateProjectForTeamRequestBuilder(teamGid);
    }
    private okhttp3.Call createProjectTemplateJobCall(String projectGid, ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateProjectTemplateJobRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/saveAsTemplate"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectTemplateJobValidateBeforeCall(String projectGid, ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling createProjectTemplateJob(Async)");
        }

        // verify the required parameter 'projectsCreateProjectTemplateJobRequest' is set
        if (projectsCreateProjectTemplateJobRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsCreateProjectTemplateJobRequest' when calling createProjectTemplateJob(Async)");
        }

        return createProjectTemplateJobCall(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsCreateProjectTemplateJobResponse> createProjectTemplateJobWithHttpInfo(String projectGid, ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createProjectTemplateJobValidateBeforeCall(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectTemplateJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectTemplateJobAsync(String projectGid, ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsCreateProjectTemplateJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectTemplateJobValidateBeforeCall(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectTemplateJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectTemplateJobRequestBuilder {
        private final String projectGid;
        private ProjectSaveAsTemplateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateProjectTemplateJobRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateProjectTemplateJobRequestBuilder
         */
        public CreateProjectTemplateJobRequestBuilder data(ProjectSaveAsTemplateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateProjectTemplateJobRequestBuilder
         */
        public CreateProjectTemplateJobRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateProjectTemplateJobRequestBuilder
         */
        public CreateProjectTemplateJobRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createProjectTemplateJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project template creation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest = buildBodyParams();
            return createProjectTemplateJobCall(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields, _callback);
        }

        private ProjectsCreateProjectTemplateJobRequest buildBodyParams() {
            ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest = new ProjectsCreateProjectTemplateJobRequest();
            projectsCreateProjectTemplateJobRequest.data(this.data);
            return projectsCreateProjectTemplateJobRequest;
        }

        /**
         * Execute createProjectTemplateJob request
         * @return ProjectsCreateProjectTemplateJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project template creation. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateProjectTemplateJobResponse execute() throws ApiException {
            ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest = buildBodyParams();
            ApiResponse<ProjectsCreateProjectTemplateJobResponse> localVarResp = createProjectTemplateJobWithHttpInfo(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProjectTemplateJob request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateProjectTemplateJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project template creation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateProjectTemplateJobResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest = buildBodyParams();
            return createProjectTemplateJobWithHttpInfo(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields);
        }

        /**
         * Execute createProjectTemplateJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle project template creation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateProjectTemplateJobResponse> _callback) throws ApiException {
            ProjectsCreateProjectTemplateJobRequest projectsCreateProjectTemplateJobRequest = buildBodyParams();
            return createProjectTemplateJobAsync(projectGid, projectsCreateProjectTemplateJobRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project template from a project
     * Creates and returns a job that will asynchronously handle the project template creation. Note that while the resulting project template can be accessed with the API, it won&#39;t be visible in the Asana UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsCreateProjectTemplateJobRequest Describes the inputs used for creating a project template, such as the resulting project template&#39;s name, which team it should be created in. (required)
     * @return CreateProjectTemplateJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle project template creation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectTemplateJobRequestBuilder createProjectTemplateJob(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new CreateProjectTemplateJobRequestBuilder(projectGid);
    }
    private okhttp3.Call deleteProjectByIdCall(String projectGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectByIdValidateBeforeCall(String projectGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling deleteProjectById(Async)");
        }

        return deleteProjectByIdCall(projectGid, optPretty, _callback);

    }


    private ApiResponse<ProjectsDeleteProjectByIdResponse> deleteProjectByIdWithHttpInfo(String projectGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectByIdValidateBeforeCall(projectGid, optPretty, null);
        Type localVarReturnType = new TypeToken<ProjectsDeleteProjectByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteProjectByIdAsync(String projectGid, Boolean optPretty, final ApiCallback<ProjectsDeleteProjectByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectByIdValidateBeforeCall(projectGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<ProjectsDeleteProjectByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteProjectByIdRequestBuilder {
        private final String projectGid;
        private Boolean optPretty;

        private DeleteProjectByIdRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteProjectByIdRequestBuilder
         */
        public DeleteProjectByIdRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteProjectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectByIdCall(projectGid, optPretty, _callback);
        }


        /**
         * Execute deleteProjectById request
         * @return ProjectsDeleteProjectByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsDeleteProjectByIdResponse execute() throws ApiException {
            ApiResponse<ProjectsDeleteProjectByIdResponse> localVarResp = deleteProjectByIdWithHttpInfo(projectGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteProjectById request with HTTP info returned
         * @return ApiResponse&lt;ProjectsDeleteProjectByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsDeleteProjectByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteProjectByIdWithHttpInfo(projectGid, optPretty);
        }

        /**
         * Execute deleteProjectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsDeleteProjectByIdResponse> _callback) throws ApiException {
            return deleteProjectByIdAsync(projectGid, optPretty, _callback);
        }
    }

    /**
     * Delete a project
     * A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return DeleteProjectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified project. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectByIdRequestBuilder deleteProjectById(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new DeleteProjectByIdRequestBuilder(projectGid);
    }
    private okhttp3.Call duplicateProjectJobCall(String projectGid, Boolean optPretty, List<String> optFields, ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsDuplicateProjectJobRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/duplicate"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateProjectJobValidateBeforeCall(String projectGid, Boolean optPretty, List<String> optFields, ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling duplicateProjectJob(Async)");
        }

        return duplicateProjectJobCall(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest, _callback);

    }


    private ApiResponse<ProjectsDuplicateProjectJobResponse> duplicateProjectJobWithHttpInfo(String projectGid, Boolean optPretty, List<String> optFields, ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest) throws ApiException {
        okhttp3.Call localVarCall = duplicateProjectJobValidateBeforeCall(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsDuplicateProjectJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call duplicateProjectJobAsync(String projectGid, Boolean optPretty, List<String> optFields, ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest, final ApiCallback<ProjectsDuplicateProjectJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateProjectJobValidateBeforeCall(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsDuplicateProjectJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DuplicateProjectJobRequestBuilder {
        private final String projectGid;
        private ProjectDuplicateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private DuplicateProjectJobRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return DuplicateProjectJobRequestBuilder
         */
        public DuplicateProjectJobRequestBuilder data(ProjectDuplicateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DuplicateProjectJobRequestBuilder
         */
        public DuplicateProjectJobRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return DuplicateProjectJobRequestBuilder
         */
        public DuplicateProjectJobRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for duplicateProjectJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest = buildBodyParams();
            return duplicateProjectJobCall(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest, _callback);
        }

        private ProjectsDuplicateProjectJobRequest buildBodyParams() {
            ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest = new ProjectsDuplicateProjectJobRequest();
            projectsDuplicateProjectJobRequest.data(this.data);
            return projectsDuplicateProjectJobRequest;
        }

        /**
         * Execute duplicateProjectJob request
         * @return ProjectsDuplicateProjectJobResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsDuplicateProjectJobResponse execute() throws ApiException {
            ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest = buildBodyParams();
            ApiResponse<ProjectsDuplicateProjectJobResponse> localVarResp = duplicateProjectJobWithHttpInfo(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute duplicateProjectJob request with HTTP info returned
         * @return ApiResponse&lt;ProjectsDuplicateProjectJobResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsDuplicateProjectJobResponse> executeWithHttpInfo() throws ApiException {
            ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest = buildBodyParams();
            return duplicateProjectJobWithHttpInfo(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest);
        }

        /**
         * Execute duplicateProjectJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsDuplicateProjectJobResponse> _callback) throws ApiException {
            ProjectsDuplicateProjectJobRequest projectsDuplicateProjectJobRequest = buildBodyParams();
            return duplicateProjectJobAsync(projectGid, optPretty, optFields, projectsDuplicateProjectJobRequest, _callback);
        }
    }

    /**
     * Duplicate a project
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return DuplicateProjectJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
     </table>
     */
    public DuplicateProjectJobRequestBuilder duplicateProjectJob(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new DuplicateProjectJobRequestBuilder(projectGid);
    }
    private okhttp3.Call getAllInWorkspaceCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/projects"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInWorkspaceValidateBeforeCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getAllInWorkspace(Async)");
        }

        return getAllInWorkspaceCall(workspaceGid, optPretty, limit, offset, archived, optFields, _callback);

    }


    private ApiResponse<ProjectsGetAllInWorkspaceResponse> getAllInWorkspaceWithHttpInfo(String workspaceGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getAllInWorkspaceValidateBeforeCall(workspaceGid, optPretty, limit, offset, archived, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsGetAllInWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInWorkspaceAsync(String workspaceGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback<ProjectsGetAllInWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInWorkspaceValidateBeforeCall(workspaceGid, optPretty, limit, offset, archived, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetAllInWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllInWorkspaceRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private Boolean archived;
        private List<String> optFields;

        private GetAllInWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetAllInWorkspaceRequestBuilder
         */
        public GetAllInWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetAllInWorkspaceRequestBuilder
         */
        public GetAllInWorkspaceRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetAllInWorkspaceRequestBuilder
         */
        public GetAllInWorkspaceRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter. (optional)
         * @return GetAllInWorkspaceRequestBuilder
         */
        public GetAllInWorkspaceRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetAllInWorkspaceRequestBuilder
         */
        public GetAllInWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getAllInWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInWorkspaceCall(workspaceGid, optPretty, limit, offset, archived, optFields, _callback);
        }


        /**
         * Execute getAllInWorkspace request
         * @return ProjectsGetAllInWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsGetAllInWorkspaceResponse execute() throws ApiException {
            ApiResponse<ProjectsGetAllInWorkspaceResponse> localVarResp = getAllInWorkspaceWithHttpInfo(workspaceGid, optPretty, limit, offset, archived, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllInWorkspace request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetAllInWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetAllInWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            return getAllInWorkspaceWithHttpInfo(workspaceGid, optPretty, limit, offset, archived, optFields);
        }

        /**
         * Execute getAllInWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetAllInWorkspaceResponse> _callback) throws ApiException {
            return getAllInWorkspaceAsync(workspaceGid, optPretty, limit, offset, archived, optFields, _callback);
        }
    }

    /**
     * Get all projects in a workspace
     * Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the &#x60;/teams/{team_gid}/projects&#x60; endpoint.*
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return GetAllInWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s projects. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllInWorkspaceRequestBuilder getAllInWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new GetAllInWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call getProjectRecordCall(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectRecordValidateBeforeCall(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getProjectRecord(Async)");
        }

        return getProjectRecordCall(projectGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsGetProjectRecordResponse> getProjectRecordWithHttpInfo(String projectGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getProjectRecordValidateBeforeCall(projectGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsGetProjectRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectRecordAsync(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsGetProjectRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectRecordValidateBeforeCall(projectGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetProjectRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectRecordRequestBuilder {
        private final String projectGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetProjectRecordRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetProjectRecordRequestBuilder
         */
        public GetProjectRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetProjectRecordRequestBuilder
         */
        public GetProjectRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getProjectRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectRecordCall(projectGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getProjectRecord request
         * @return ProjectsGetProjectRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsGetProjectRecordResponse execute() throws ApiException {
            ApiResponse<ProjectsGetProjectRecordResponse> localVarResp = getProjectRecordWithHttpInfo(projectGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetProjectRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetProjectRecordResponse> executeWithHttpInfo() throws ApiException {
            return getProjectRecordWithHttpInfo(projectGid, optPretty, optFields);
        }

        /**
         * Execute getProjectRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetProjectRecordResponse> _callback) throws ApiException {
            return getProjectRecordAsync(projectGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a project
     * Returns the complete project record for a single project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return GetProjectRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectRecordRequestBuilder getProjectRecord(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new GetProjectRecordRequestBuilder(projectGid);
    }
    private okhttp3.Call getTaskCountsCall(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/task_counts"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskCountsValidateBeforeCall(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getTaskCounts(Async)");
        }

        return getTaskCountsCall(projectGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsGetTaskCountsResponse> getTaskCountsWithHttpInfo(String projectGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTaskCountsValidateBeforeCall(projectGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsGetTaskCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskCountsAsync(String projectGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsGetTaskCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskCountsValidateBeforeCall(projectGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetTaskCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskCountsRequestBuilder {
        private final String projectGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetTaskCountsRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTaskCountsRequestBuilder
         */
        public GetTaskCountsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTaskCountsRequestBuilder
         */
        public GetTaskCountsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTaskCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s task counts. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskCountsCall(projectGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getTaskCounts request
         * @return ProjectsGetTaskCountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s task counts. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsGetTaskCountsResponse execute() throws ApiException {
            ApiResponse<ProjectsGetTaskCountsResponse> localVarResp = getTaskCountsWithHttpInfo(projectGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskCounts request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetTaskCountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s task counts. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetTaskCountsResponse> executeWithHttpInfo() throws ApiException {
            return getTaskCountsWithHttpInfo(projectGid, optPretty, optFields);
        }

        /**
         * Execute getTaskCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s task counts. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetTaskCountsResponse> _callback) throws ApiException {
            return getTaskCountsAsync(projectGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get task count of a project
     * Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](https://developers.asana.com/reference/rest-api-reference) using &#x60;opt_fields&#x60; to get any information from this endpoint.  This endpoint has an additional [rate limit](https://developers.asana.com/reference/rest-api-reference) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the &#x60;num_tasks&#x60;, &#x60;num_incomplete_tasks&#x60;, and &#x60;num_completed_tasks&#x60; counts.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return GetTaskCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s task counts. </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskCountsRequestBuilder getTaskCounts(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new GetTaskCountsRequestBuilder(projectGid);
    }
    private okhttp3.Call getTeamProjectsCall(String teamGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/projects"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamProjectsValidateBeforeCall(String teamGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling getTeamProjects(Async)");
        }

        return getTeamProjectsCall(teamGid, optPretty, limit, offset, archived, optFields, _callback);

    }


    private ApiResponse<ProjectsGetTeamProjectsResponse> getTeamProjectsWithHttpInfo(String teamGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTeamProjectsValidateBeforeCall(teamGid, optPretty, limit, offset, archived, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsGetTeamProjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamProjectsAsync(String teamGid, Boolean optPretty, Integer limit, String offset, Boolean archived, List<String> optFields, final ApiCallback<ProjectsGetTeamProjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamProjectsValidateBeforeCall(teamGid, optPretty, limit, offset, archived, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetTeamProjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeamProjectsRequestBuilder {
        private final String teamGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private Boolean archived;
        private List<String> optFields;

        private GetTeamProjectsRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTeamProjectsRequestBuilder
         */
        public GetTeamProjectsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetTeamProjectsRequestBuilder
         */
        public GetTeamProjectsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetTeamProjectsRequestBuilder
         */
        public GetTeamProjectsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter. (optional)
         * @return GetTeamProjectsRequestBuilder
         */
        public GetTeamProjectsRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTeamProjectsRequestBuilder
         */
        public GetTeamProjectsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTeamProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamProjectsCall(teamGid, optPretty, limit, offset, archived, optFields, _callback);
        }


        /**
         * Execute getTeamProjects request
         * @return ProjectsGetTeamProjectsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsGetTeamProjectsResponse execute() throws ApiException {
            ApiResponse<ProjectsGetTeamProjectsResponse> localVarResp = getTeamProjectsWithHttpInfo(teamGid, optPretty, limit, offset, archived, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeamProjects request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetTeamProjectsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetTeamProjectsResponse> executeWithHttpInfo() throws ApiException {
            return getTeamProjectsWithHttpInfo(teamGid, optPretty, limit, offset, archived, optFields);
        }

        /**
         * Execute getTeamProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetTeamProjectsResponse> _callback) throws ApiException {
            return getTeamProjectsAsync(teamGid, optPretty, limit, offset, archived, optFields, _callback);
        }
    }

    /**
     * Get a team&#39;s projects
     * Returns the compact project records for all projects in the team.
     * @param teamGid Globally unique identifier for the team. (required)
     * @return GetTeamProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested team&#39;s projects. </td><td>  -  </td></tr>
     </table>
     */
    public GetTeamProjectsRequestBuilder getTeamProjects(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new GetTeamProjectsRequestBuilder(teamGid);
    }
    private okhttp3.Call listMultipleCall(Boolean optPretty, Integer limit, String offset, String workspace, String team, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleValidateBeforeCall(Boolean optPretty, Integer limit, String offset, String workspace, String team, Boolean archived, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleCall(optPretty, limit, offset, workspace, team, archived, optFields, _callback);

    }


    private ApiResponse<ProjectsListMultipleResponse> listMultipleWithHttpInfo(Boolean optPretty, Integer limit, String offset, String workspace, String team, Boolean archived, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, workspace, team, archived, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsListMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleAsync(Boolean optPretty, Integer limit, String offset, String workspace, String team, Boolean archived, List<String> optFields, final ApiCallback<ProjectsListMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, workspace, team, archived, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsListMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String workspace;
        private String team;
        private Boolean archived;
        private List<String> optFields;

        private ListMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set workspace
         * @param workspace The workspace or organization to filter projects on. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder workspace(String workspace) {
            this.workspace = workspace;
            return this;
        }
        
        /**
         * Set team
         * @param team The team to filter projects on. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Set archived
         * @param archived Only return projects whose &#x60;archived&#x60; field takes on the value of this parameter. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleCall(optPretty, limit, offset, workspace, team, archived, optFields, _callback);
        }


        /**
         * Execute listMultiple request
         * @return ProjectsListMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsListMultipleResponse execute() throws ApiException {
            ApiResponse<ProjectsListMultipleResponse> localVarResp = listMultipleWithHttpInfo(optPretty, limit, offset, workspace, team, archived, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultiple request with HTTP info returned
         * @return ApiResponse&lt;ProjectsListMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsListMultipleResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleWithHttpInfo(optPretty, limit, offset, workspace, team, archived, optFields);
        }

        /**
         * Execute listMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsListMultipleResponse> _callback) throws ApiException {
            return listMultipleAsync(optPretty, limit, offset, workspace, team, archived, optFields, _callback);
        }
    }

    /**
     * Get multiple projects
     * Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
     * @return ListMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved projects. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleRequestBuilder listMultiple() throws IllegalArgumentException {
        return new ListMultipleRequestBuilder();
    }
    private okhttp3.Call removeCustomFieldCall(String projectGid, ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsRemoveCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/removeCustomFieldSetting"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomFieldValidateBeforeCall(String projectGid, ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling removeCustomField(Async)");
        }

        // verify the required parameter 'projectsRemoveCustomFieldRequest' is set
        if (projectsRemoveCustomFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsRemoveCustomFieldRequest' when calling removeCustomField(Async)");
        }

        return removeCustomFieldCall(projectGid, projectsRemoveCustomFieldRequest, optPretty, _callback);

    }


    private ApiResponse<ProjectsRemoveCustomFieldResponse> removeCustomFieldWithHttpInfo(String projectGid, ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeCustomFieldValidateBeforeCall(projectGid, projectsRemoveCustomFieldRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<ProjectsRemoveCustomFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCustomFieldAsync(String projectGid, ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest, Boolean optPretty, final ApiCallback<ProjectsRemoveCustomFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomFieldValidateBeforeCall(projectGid, projectsRemoveCustomFieldRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<ProjectsRemoveCustomFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCustomFieldRequestBuilder {
        private final String projectGid;
        private RemoveCustomFieldSettingRequest data;
        private Boolean optPretty;

        private RemoveCustomFieldRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveCustomFieldRequestBuilder
         */
        public RemoveCustomFieldRequestBuilder data(RemoveCustomFieldSettingRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveCustomFieldRequestBuilder
         */
        public RemoveCustomFieldRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeCustomField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest = buildBodyParams();
            return removeCustomFieldCall(projectGid, projectsRemoveCustomFieldRequest, optPretty, _callback);
        }

        private ProjectsRemoveCustomFieldRequest buildBodyParams() {
            ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest = new ProjectsRemoveCustomFieldRequest();
            projectsRemoveCustomFieldRequest.data(this.data);
            return projectsRemoveCustomFieldRequest;
        }

        /**
         * Execute removeCustomField request
         * @return ProjectsRemoveCustomFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsRemoveCustomFieldResponse execute() throws ApiException {
            ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest = buildBodyParams();
            ApiResponse<ProjectsRemoveCustomFieldResponse> localVarResp = removeCustomFieldWithHttpInfo(projectGid, projectsRemoveCustomFieldRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCustomField request with HTTP info returned
         * @return ApiResponse&lt;ProjectsRemoveCustomFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsRemoveCustomFieldResponse> executeWithHttpInfo() throws ApiException {
            ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest = buildBodyParams();
            return removeCustomFieldWithHttpInfo(projectGid, projectsRemoveCustomFieldRequest, optPretty);
        }

        /**
         * Execute removeCustomField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsRemoveCustomFieldResponse> _callback) throws ApiException {
            ProjectsRemoveCustomFieldRequest projectsRemoveCustomFieldRequest = buildBodyParams();
            return removeCustomFieldAsync(projectGid, projectsRemoveCustomFieldRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a custom field from a project
     * Removes a custom field setting from a project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsRemoveCustomFieldRequest Information about the custom field setting being removed. (required)
     * @return RemoveCustomFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the custom field from the project. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomFieldRequestBuilder removeCustomField(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new RemoveCustomFieldRequestBuilder(projectGid);
    }
    private okhttp3.Call removeMembersFromProjectCall(String projectGid, ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsRemoveMembersFromProjectRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/removeMembers"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMembersFromProjectValidateBeforeCall(String projectGid, ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling removeMembersFromProject(Async)");
        }

        // verify the required parameter 'projectsRemoveMembersFromProjectRequest' is set
        if (projectsRemoveMembersFromProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsRemoveMembersFromProjectRequest' when calling removeMembersFromProject(Async)");
        }

        return removeMembersFromProjectCall(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsRemoveMembersFromProjectResponse> removeMembersFromProjectWithHttpInfo(String projectGid, ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeMembersFromProjectValidateBeforeCall(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsRemoveMembersFromProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMembersFromProjectAsync(String projectGid, ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsRemoveMembersFromProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMembersFromProjectValidateBeforeCall(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsRemoveMembersFromProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMembersFromProjectRequestBuilder {
        private final String projectGid;
        private RemoveMembersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private RemoveMembersFromProjectRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveMembersFromProjectRequestBuilder
         */
        public RemoveMembersFromProjectRequestBuilder data(RemoveMembersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveMembersFromProjectRequestBuilder
         */
        public RemoveMembersFromProjectRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return RemoveMembersFromProjectRequestBuilder
         */
        public RemoveMembersFromProjectRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for removeMembersFromProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest = buildBodyParams();
            return removeMembersFromProjectCall(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields, _callback);
        }

        private ProjectsRemoveMembersFromProjectRequest buildBodyParams() {
            ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest = new ProjectsRemoveMembersFromProjectRequest();
            projectsRemoveMembersFromProjectRequest.data(this.data);
            return projectsRemoveMembersFromProjectRequest;
        }

        /**
         * Execute removeMembersFromProject request
         * @return ProjectsRemoveMembersFromProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsRemoveMembersFromProjectResponse execute() throws ApiException {
            ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest = buildBodyParams();
            ApiResponse<ProjectsRemoveMembersFromProjectResponse> localVarResp = removeMembersFromProjectWithHttpInfo(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMembersFromProject request with HTTP info returned
         * @return ApiResponse&lt;ProjectsRemoveMembersFromProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsRemoveMembersFromProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest = buildBodyParams();
            return removeMembersFromProjectWithHttpInfo(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields);
        }

        /**
         * Execute removeMembersFromProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsRemoveMembersFromProjectResponse> _callback) throws ApiException {
            ProjectsRemoveMembersFromProjectRequest projectsRemoveMembersFromProjectRequest = buildBodyParams();
            return removeMembersFromProjectAsync(projectGid, projectsRemoveMembersFromProjectRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Remove users from a project
     * Removes the specified list of users from members of the project. Returns the updated project record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsRemoveMembersFromProjectRequest Information about the members being removed. (required)
     * @return RemoveMembersFromProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the members from the project. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMembersFromProjectRequestBuilder removeMembersFromProject(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new RemoveMembersFromProjectRequestBuilder(projectGid);
    }
    private okhttp3.Call removeProjectFollowersCall(String projectGid, ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsRemoveProjectFollowersRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/removeFollowers"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectFollowersValidateBeforeCall(String projectGid, ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling removeProjectFollowers(Async)");
        }

        // verify the required parameter 'projectsRemoveProjectFollowersRequest' is set
        if (projectsRemoveProjectFollowersRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsRemoveProjectFollowersRequest' when calling removeProjectFollowers(Async)");
        }

        return removeProjectFollowersCall(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsRemoveProjectFollowersResponse> removeProjectFollowersWithHttpInfo(String projectGid, ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeProjectFollowersValidateBeforeCall(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsRemoveProjectFollowersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeProjectFollowersAsync(String projectGid, ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsRemoveProjectFollowersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectFollowersValidateBeforeCall(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsRemoveProjectFollowersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveProjectFollowersRequestBuilder {
        private final String projectGid;
        private RemoveFollowersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private RemoveProjectFollowersRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveProjectFollowersRequestBuilder
         */
        public RemoveProjectFollowersRequestBuilder data(RemoveFollowersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveProjectFollowersRequestBuilder
         */
        public RemoveProjectFollowersRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return RemoveProjectFollowersRequestBuilder
         */
        public RemoveProjectFollowersRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for removeProjectFollowers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed followers from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest = buildBodyParams();
            return removeProjectFollowersCall(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields, _callback);
        }

        private ProjectsRemoveProjectFollowersRequest buildBodyParams() {
            ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest = new ProjectsRemoveProjectFollowersRequest();
            projectsRemoveProjectFollowersRequest.data(this.data);
            return projectsRemoveProjectFollowersRequest;
        }

        /**
         * Execute removeProjectFollowers request
         * @return ProjectsRemoveProjectFollowersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed followers from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsRemoveProjectFollowersResponse execute() throws ApiException {
            ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest = buildBodyParams();
            ApiResponse<ProjectsRemoveProjectFollowersResponse> localVarResp = removeProjectFollowersWithHttpInfo(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeProjectFollowers request with HTTP info returned
         * @return ApiResponse&lt;ProjectsRemoveProjectFollowersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed followers from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsRemoveProjectFollowersResponse> executeWithHttpInfo() throws ApiException {
            ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest = buildBodyParams();
            return removeProjectFollowersWithHttpInfo(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields);
        }

        /**
         * Execute removeProjectFollowers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed followers from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsRemoveProjectFollowersResponse> _callback) throws ApiException {
            ProjectsRemoveProjectFollowersRequest projectsRemoveProjectFollowersRequest = buildBodyParams();
            return removeProjectFollowersAsync(projectGid, projectsRemoveProjectFollowersRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Remove followers from a project
     * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsRemoveProjectFollowersRequest Information about the followers being removed. (required)
     * @return RemoveProjectFollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed followers from the project. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProjectFollowersRequestBuilder removeProjectFollowers(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new RemoveProjectFollowersRequestBuilder(projectGid);
    }
    private okhttp3.Call taskProjectsListCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/projects"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskProjectsListValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling taskProjectsList(Async)");
        }

        return taskProjectsListCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<ProjectsTaskProjectsListResponse> taskProjectsListWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = taskProjectsListValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsTaskProjectsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call taskProjectsListAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<ProjectsTaskProjectsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskProjectsListValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsTaskProjectsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TaskProjectsListRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private TaskProjectsListRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return TaskProjectsListRequestBuilder
         */
        public TaskProjectsListRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return TaskProjectsListRequestBuilder
         */
        public TaskProjectsListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return TaskProjectsListRequestBuilder
         */
        public TaskProjectsListRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return TaskProjectsListRequestBuilder
         */
        public TaskProjectsListRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for taskProjectsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the projects for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return taskProjectsListCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute taskProjectsList request
         * @return ProjectsTaskProjectsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the projects for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsTaskProjectsListResponse execute() throws ApiException {
            ApiResponse<ProjectsTaskProjectsListResponse> localVarResp = taskProjectsListWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute taskProjectsList request with HTTP info returned
         * @return ApiResponse&lt;ProjectsTaskProjectsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the projects for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsTaskProjectsListResponse> executeWithHttpInfo() throws ApiException {
            return taskProjectsListWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute taskProjectsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the projects for the given task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsTaskProjectsListResponse> _callback) throws ApiException {
            return taskProjectsListAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get projects a task is in
     * Returns a compact representation of all of the projects the task is in.
     * @param taskGid The task to operate on. (required)
     * @return TaskProjectsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the projects for the given task. </td><td>  -  </td></tr>
     </table>
     */
    public TaskProjectsListRequestBuilder taskProjectsList(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new TaskProjectsListRequestBuilder(taskGid);
    }
    private okhttp3.Call updateProjectRecordCall(String projectGid, ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsUpdateProjectRecordRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectRecordValidateBeforeCall(String projectGid, ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling updateProjectRecord(Async)");
        }

        // verify the required parameter 'projectsUpdateProjectRecordRequest' is set
        if (projectsUpdateProjectRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsUpdateProjectRecordRequest' when calling updateProjectRecord(Async)");
        }

        return updateProjectRecordCall(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectsUpdateProjectRecordResponse> updateProjectRecordWithHttpInfo(String projectGid, ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateProjectRecordValidateBeforeCall(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectsUpdateProjectRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectRecordAsync(String projectGid, ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectsUpdateProjectRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectRecordValidateBeforeCall(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectsUpdateProjectRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectRecordRequestBuilder {
        private final String projectGid;
        private ProjectUpdateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateProjectRecordRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateProjectRecordRequestBuilder
         */
        public UpdateProjectRecordRequestBuilder data(ProjectUpdateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateProjectRecordRequestBuilder
         */
        public UpdateProjectRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateProjectRecordRequestBuilder
         */
        public UpdateProjectRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateProjectRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest = buildBodyParams();
            return updateProjectRecordCall(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields, _callback);
        }

        private ProjectsUpdateProjectRecordRequest buildBodyParams() {
            ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest = new ProjectsUpdateProjectRecordRequest();
            projectsUpdateProjectRecordRequest.data(this.data);
            return projectsUpdateProjectRecordRequest;
        }

        /**
         * Execute updateProjectRecord request
         * @return ProjectsUpdateProjectRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsUpdateProjectRecordResponse execute() throws ApiException {
            ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest = buildBodyParams();
            ApiResponse<ProjectsUpdateProjectRecordResponse> localVarResp = updateProjectRecordWithHttpInfo(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectsUpdateProjectRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsUpdateProjectRecordResponse> executeWithHttpInfo() throws ApiException {
            ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest = buildBodyParams();
            return updateProjectRecordWithHttpInfo(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateProjectRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsUpdateProjectRecordResponse> _callback) throws ApiException {
            ProjectsUpdateProjectRecordRequest projectsUpdateProjectRecordRequest = buildBodyParams();
            return updateProjectRecordAsync(projectGid, projectsUpdateProjectRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a project
     * A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectsUpdateProjectRecordRequest The updated fields for the project. (required)
     * @return UpdateProjectRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the project. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectRecordRequestBuilder updateProjectRecord(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new UpdateProjectRecordRequestBuilder(projectGid);
    }
}
