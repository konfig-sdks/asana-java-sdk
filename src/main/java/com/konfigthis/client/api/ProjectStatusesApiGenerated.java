/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectStatusBase;
import com.konfigthis.client.model.ProjectStatusesCreateNewStatusUpdateRecordRequest;
import com.konfigthis.client.model.ProjectStatusesCreateNewStatusUpdateRecordResponse;
import com.konfigthis.client.model.ProjectStatusesDeleteSpecificStatusUpdateResponse;
import com.konfigthis.client.model.ProjectStatusesGetProjectUpdatesResponse;
import com.konfigthis.client.model.ProjectStatusesGetStatusUpdateRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectStatusesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectStatusesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectStatusesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewStatusUpdateRecordCall(String projectGid, ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectStatusesCreateNewStatusUpdateRecordRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/project_statuses"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewStatusUpdateRecordValidateBeforeCall(String projectGid, ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling createNewStatusUpdateRecord(Async)");
        }

        // verify the required parameter 'projectStatusesCreateNewStatusUpdateRecordRequest' is set
        if (projectStatusesCreateNewStatusUpdateRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'projectStatusesCreateNewStatusUpdateRecordRequest' when calling createNewStatusUpdateRecord(Async)");
        }

        return createNewStatusUpdateRecordCall(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectStatusesCreateNewStatusUpdateRecordResponse> createNewStatusUpdateRecordWithHttpInfo(String projectGid, ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewStatusUpdateRecordValidateBeforeCall(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectStatusesCreateNewStatusUpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewStatusUpdateRecordAsync(String projectGid, ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectStatusesCreateNewStatusUpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewStatusUpdateRecordValidateBeforeCall(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusesCreateNewStatusUpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewStatusUpdateRecordRequestBuilder {
        private final String projectGid;
        private ProjectStatusBase data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewStatusUpdateRecordRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder data(ProjectStatusBase data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewStatusUpdateRecordRequestBuilder
         */
        public CreateNewStatusUpdateRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewStatusUpdateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordCall(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields, _callback);
        }

        private ProjectStatusesCreateNewStatusUpdateRecordRequest buildBodyParams() {
            ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest = new ProjectStatusesCreateNewStatusUpdateRecordRequest();
            projectStatusesCreateNewStatusUpdateRecordRequest.data(this.data);
            return projectStatusesCreateNewStatusUpdateRecordRequest;
        }

        /**
         * Execute createNewStatusUpdateRecord request
         * @return ProjectStatusesCreateNewStatusUpdateRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectStatusesCreateNewStatusUpdateRecordResponse execute() throws ApiException {
            ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            ApiResponse<ProjectStatusesCreateNewStatusUpdateRecordResponse> localVarResp = createNewStatusUpdateRecordWithHttpInfo(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewStatusUpdateRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectStatusesCreateNewStatusUpdateRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectStatusesCreateNewStatusUpdateRecordResponse> executeWithHttpInfo() throws ApiException {
            ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordWithHttpInfo(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewStatusUpdateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectStatusesCreateNewStatusUpdateRecordResponse> _callback) throws ApiException {
            ProjectStatusesCreateNewStatusUpdateRecordRequest projectStatusesCreateNewStatusUpdateRecordRequest = buildBodyParams();
            return createNewStatusUpdateRecordAsync(projectGid, projectStatusesCreateNewStatusUpdateRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project status
     * *Deprecated: new integrations should prefer the &#x60;/status_updates&#x60; route.*  Creates a new status update on the project.  Returns the full record of the newly created project status update.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectStatusesCreateNewStatusUpdateRecordRequest The project status to create. (required)
     * @return CreateNewStatusUpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewStatusUpdateRecordRequestBuilder createNewStatusUpdateRecord(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new CreateNewStatusUpdateRecordRequestBuilder(projectGid);
    }
    private okhttp3.Call deleteSpecificStatusUpdateCall(String projectStatusGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_statuses/{project_status_gid}"
            .replace("{" + "project_status_gid" + "}", localVarApiClient.escapeString(projectStatusGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificStatusUpdateValidateBeforeCall(String projectStatusGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectStatusGid' is set
        if (projectStatusGid == null) {
            throw new ApiException("Missing the required parameter 'projectStatusGid' when calling deleteSpecificStatusUpdate(Async)");
        }

        return deleteSpecificStatusUpdateCall(projectStatusGid, optPretty, _callback);

    }


    private ApiResponse<ProjectStatusesDeleteSpecificStatusUpdateResponse> deleteSpecificStatusUpdateWithHttpInfo(String projectStatusGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificStatusUpdateValidateBeforeCall(projectStatusGid, optPretty, null);
        Type localVarReturnType = new TypeToken<ProjectStatusesDeleteSpecificStatusUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSpecificStatusUpdateAsync(String projectStatusGid, Boolean optPretty, final ApiCallback<ProjectStatusesDeleteSpecificStatusUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificStatusUpdateValidateBeforeCall(projectStatusGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusesDeleteSpecificStatusUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSpecificStatusUpdateRequestBuilder {
        private final String projectStatusGid;
        private Boolean optPretty;

        private DeleteSpecificStatusUpdateRequestBuilder(String projectStatusGid) {
            this.projectStatusGid = projectStatusGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteSpecificStatusUpdateRequestBuilder
         */
        public DeleteSpecificStatusUpdateRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteSpecificStatusUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificStatusUpdateCall(projectStatusGid, optPretty, _callback);
        }


        /**
         * Execute deleteSpecificStatusUpdate request
         * @return ProjectStatusesDeleteSpecificStatusUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project status. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectStatusesDeleteSpecificStatusUpdateResponse execute() throws ApiException {
            ApiResponse<ProjectStatusesDeleteSpecificStatusUpdateResponse> localVarResp = deleteSpecificStatusUpdateWithHttpInfo(projectStatusGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSpecificStatusUpdate request with HTTP info returned
         * @return ApiResponse&lt;ProjectStatusesDeleteSpecificStatusUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project status. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectStatusesDeleteSpecificStatusUpdateResponse> executeWithHttpInfo() throws ApiException {
            return deleteSpecificStatusUpdateWithHttpInfo(projectStatusGid, optPretty);
        }

        /**
         * Execute deleteSpecificStatusUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project status. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectStatusesDeleteSpecificStatusUpdateResponse> _callback) throws ApiException {
            return deleteSpecificStatusUpdateAsync(projectStatusGid, optPretty, _callback);
        }
    }

    /**
     * Delete a project status
     * *Deprecated: new integrations should prefer the &#x60;/status_updates/{status_gid}&#x60; route.*  Deletes a specific, existing project status update.  Returns an empty data record.
     * @param projectStatusGid The project status update to get. (required)
     * @return DeleteSpecificStatusUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified project status. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificStatusUpdateRequestBuilder deleteSpecificStatusUpdate(String projectStatusGid) throws IllegalArgumentException {
        if (projectStatusGid == null) throw new IllegalArgumentException("\"projectStatusGid\" is required but got null");
            

        return new DeleteSpecificStatusUpdateRequestBuilder(projectStatusGid);
    }
    private okhttp3.Call getProjectUpdatesCall(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/project_statuses"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectUpdatesValidateBeforeCall(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getProjectUpdates(Async)");
        }

        return getProjectUpdatesCall(projectGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<ProjectStatusesGetProjectUpdatesResponse> getProjectUpdatesWithHttpInfo(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getProjectUpdatesValidateBeforeCall(projectGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectStatusesGetProjectUpdatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectUpdatesAsync(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<ProjectStatusesGetProjectUpdatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectUpdatesValidateBeforeCall(projectGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusesGetProjectUpdatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectUpdatesRequestBuilder {
        private final String projectGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetProjectUpdatesRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetProjectUpdatesRequestBuilder
         */
        public GetProjectUpdatesRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetProjectUpdatesRequestBuilder
         */
        public GetProjectUpdatesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetProjectUpdatesRequestBuilder
         */
        public GetProjectUpdatesRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetProjectUpdatesRequestBuilder
         */
        public GetProjectUpdatesRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getProjectUpdates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectUpdatesCall(projectGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getProjectUpdates request
         * @return ProjectStatusesGetProjectUpdatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectStatusesGetProjectUpdatesResponse execute() throws ApiException {
            ApiResponse<ProjectStatusesGetProjectUpdatesResponse> localVarResp = getProjectUpdatesWithHttpInfo(projectGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectUpdates request with HTTP info returned
         * @return ApiResponse&lt;ProjectStatusesGetProjectUpdatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectStatusesGetProjectUpdatesResponse> executeWithHttpInfo() throws ApiException {
            return getProjectUpdatesWithHttpInfo(projectGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getProjectUpdates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectStatusesGetProjectUpdatesResponse> _callback) throws ApiException {
            return getProjectUpdatesAsync(projectGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get statuses from a project
     * *Deprecated: new integrations should prefer the &#x60;/status_updates&#x60; route.*  Returns the compact project status update records for all updates on the project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return GetProjectUpdatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectUpdatesRequestBuilder getProjectUpdates(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new GetProjectUpdatesRequestBuilder(projectGid);
    }
    private okhttp3.Call getStatusUpdateRecordCall(String projectStatusGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_statuses/{project_status_gid}"
            .replace("{" + "project_status_gid" + "}", localVarApiClient.escapeString(projectStatusGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusUpdateRecordValidateBeforeCall(String projectStatusGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectStatusGid' is set
        if (projectStatusGid == null) {
            throw new ApiException("Missing the required parameter 'projectStatusGid' when calling getStatusUpdateRecord(Async)");
        }

        return getStatusUpdateRecordCall(projectStatusGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectStatusesGetStatusUpdateRecordResponse> getStatusUpdateRecordWithHttpInfo(String projectStatusGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getStatusUpdateRecordValidateBeforeCall(projectStatusGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectStatusesGetStatusUpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusUpdateRecordAsync(String projectStatusGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectStatusesGetStatusUpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusUpdateRecordValidateBeforeCall(projectStatusGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectStatusesGetStatusUpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusUpdateRecordRequestBuilder {
        private final String projectStatusGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetStatusUpdateRecordRequestBuilder(String projectStatusGid) {
            this.projectStatusGid = projectStatusGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetStatusUpdateRecordRequestBuilder
         */
        public GetStatusUpdateRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetStatusUpdateRecordRequestBuilder
         */
        public GetStatusUpdateRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getStatusUpdateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusUpdateRecordCall(projectStatusGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getStatusUpdateRecord request
         * @return ProjectStatusesGetStatusUpdateRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectStatusesGetStatusUpdateRecordResponse execute() throws ApiException {
            ApiResponse<ProjectStatusesGetStatusUpdateRecordResponse> localVarResp = getStatusUpdateRecordWithHttpInfo(projectStatusGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatusUpdateRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectStatusesGetStatusUpdateRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectStatusesGetStatusUpdateRecordResponse> executeWithHttpInfo() throws ApiException {
            return getStatusUpdateRecordWithHttpInfo(projectStatusGid, optPretty, optFields);
        }

        /**
         * Execute getStatusUpdateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectStatusesGetStatusUpdateRecordResponse> _callback) throws ApiException {
            return getStatusUpdateRecordAsync(projectStatusGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a project status
     * *Deprecated: new integrations should prefer the &#x60;/status_updates/{status_gid}&#x60; route.*  Returns the complete record for a single status update.
     * @param projectStatusGid The project status update to get. (required)
     * @return GetStatusUpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified project&#39;s status updates. </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusUpdateRecordRequestBuilder getStatusUpdateRecord(String projectStatusGid) throws IllegalArgumentException {
        if (projectStatusGid == null) throw new IllegalArgumentException("\"projectStatusGid\" is required but got null");
            

        return new GetStatusUpdateRecordRequestBuilder(projectStatusGid);
    }
}
