/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
 */
@ApiModel(description = "A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserBaseResponseAllOfPhoto {
  public static final String SERIALIZED_NAME_IMAGE21X21 = "image_21x21";
  @SerializedName(SERIALIZED_NAME_IMAGE21X21)
  private URI image21x21;

  public static final String SERIALIZED_NAME_IMAGE27X27 = "image_27x27";
  @SerializedName(SERIALIZED_NAME_IMAGE27X27)
  private URI image27x27;

  public static final String SERIALIZED_NAME_IMAGE36X36 = "image_36x36";
  @SerializedName(SERIALIZED_NAME_IMAGE36X36)
  private URI image36x36;

  public static final String SERIALIZED_NAME_IMAGE60X60 = "image_60x60";
  @SerializedName(SERIALIZED_NAME_IMAGE60X60)
  private URI image60x60;

  public static final String SERIALIZED_NAME_IMAGE128X128 = "image_128x128";
  @SerializedName(SERIALIZED_NAME_IMAGE128X128)
  private URI image128x128;

  public static final String SERIALIZED_NAME_IMAGE1024X1024 = "image_1024x1024";
  @SerializedName(SERIALIZED_NAME_IMAGE1024X1024)
  private URI image1024x1024;

  public UserBaseResponseAllOfPhoto() {
  }

  public UserBaseResponseAllOfPhoto image21x21(URI image21x21) {
    
    
    
    
    this.image21x21 = image21x21;
    return this;
  }

   /**
   * Get image21x21
   * @return image21x21
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage21x21() {
    return image21x21;
  }


  public void setImage21x21(URI image21x21) {
    
    
    
    this.image21x21 = image21x21;
  }


  public UserBaseResponseAllOfPhoto image27x27(URI image27x27) {
    
    
    
    
    this.image27x27 = image27x27;
    return this;
  }

   /**
   * Get image27x27
   * @return image27x27
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage27x27() {
    return image27x27;
  }


  public void setImage27x27(URI image27x27) {
    
    
    
    this.image27x27 = image27x27;
  }


  public UserBaseResponseAllOfPhoto image36x36(URI image36x36) {
    
    
    
    
    this.image36x36 = image36x36;
    return this;
  }

   /**
   * Get image36x36
   * @return image36x36
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage36x36() {
    return image36x36;
  }


  public void setImage36x36(URI image36x36) {
    
    
    
    this.image36x36 = image36x36;
  }


  public UserBaseResponseAllOfPhoto image60x60(URI image60x60) {
    
    
    
    
    this.image60x60 = image60x60;
    return this;
  }

   /**
   * Get image60x60
   * @return image60x60
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage60x60() {
    return image60x60;
  }


  public void setImage60x60(URI image60x60) {
    
    
    
    this.image60x60 = image60x60;
  }


  public UserBaseResponseAllOfPhoto image128x128(URI image128x128) {
    
    
    
    
    this.image128x128 = image128x128;
    return this;
  }

   /**
   * Get image128x128
   * @return image128x128
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage128x128() {
    return image128x128;
  }


  public void setImage128x128(URI image128x128) {
    
    
    
    this.image128x128 = image128x128;
  }


  public UserBaseResponseAllOfPhoto image1024x1024(URI image1024x1024) {
    
    
    
    
    this.image1024x1024 = image1024x1024;
    return this;
  }

   /**
   * Get image1024x1024
   * @return image1024x1024
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://...", value = "")

  public URI getImage1024x1024() {
    return image1024x1024;
  }


  public void setImage1024x1024(URI image1024x1024) {
    
    
    
    this.image1024x1024 = image1024x1024;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserBaseResponseAllOfPhoto instance itself
   */
  public UserBaseResponseAllOfPhoto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserBaseResponseAllOfPhoto userBaseResponseAllOfPhoto = (UserBaseResponseAllOfPhoto) o;
    return Objects.equals(this.image21x21, userBaseResponseAllOfPhoto.image21x21) &&
        Objects.equals(this.image27x27, userBaseResponseAllOfPhoto.image27x27) &&
        Objects.equals(this.image36x36, userBaseResponseAllOfPhoto.image36x36) &&
        Objects.equals(this.image60x60, userBaseResponseAllOfPhoto.image60x60) &&
        Objects.equals(this.image128x128, userBaseResponseAllOfPhoto.image128x128) &&
        Objects.equals(this.image1024x1024, userBaseResponseAllOfPhoto.image1024x1024)&&
        Objects.equals(this.additionalProperties, userBaseResponseAllOfPhoto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image21x21, image27x27, image36x36, image60x60, image128x128, image1024x1024, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserBaseResponseAllOfPhoto {\n");
    sb.append("    image21x21: ").append(toIndentedString(image21x21)).append("\n");
    sb.append("    image27x27: ").append(toIndentedString(image27x27)).append("\n");
    sb.append("    image36x36: ").append(toIndentedString(image36x36)).append("\n");
    sb.append("    image60x60: ").append(toIndentedString(image60x60)).append("\n");
    sb.append("    image128x128: ").append(toIndentedString(image128x128)).append("\n");
    sb.append("    image1024x1024: ").append(toIndentedString(image1024x1024)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_21x21");
    openapiFields.add("image_27x27");
    openapiFields.add("image_36x36");
    openapiFields.add("image_60x60");
    openapiFields.add("image_128x128");
    openapiFields.add("image_1024x1024");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserBaseResponseAllOfPhoto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserBaseResponseAllOfPhoto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserBaseResponseAllOfPhoto is not found in the empty JSON string", UserBaseResponseAllOfPhoto.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("image_21x21") != null && !jsonObj.get("image_21x21").isJsonNull()) && !jsonObj.get("image_21x21").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_21x21` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_21x21").toString()));
      }
      if ((jsonObj.get("image_27x27") != null && !jsonObj.get("image_27x27").isJsonNull()) && !jsonObj.get("image_27x27").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_27x27` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_27x27").toString()));
      }
      if ((jsonObj.get("image_36x36") != null && !jsonObj.get("image_36x36").isJsonNull()) && !jsonObj.get("image_36x36").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_36x36` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_36x36").toString()));
      }
      if ((jsonObj.get("image_60x60") != null && !jsonObj.get("image_60x60").isJsonNull()) && !jsonObj.get("image_60x60").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_60x60` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_60x60").toString()));
      }
      if ((jsonObj.get("image_128x128") != null && !jsonObj.get("image_128x128").isJsonNull()) && !jsonObj.get("image_128x128").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_128x128` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_128x128").toString()));
      }
      if ((jsonObj.get("image_1024x1024") != null && !jsonObj.get("image_1024x1024").isJsonNull()) && !jsonObj.get("image_1024x1024").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_1024x1024` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_1024x1024").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserBaseResponseAllOfPhoto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserBaseResponseAllOfPhoto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserBaseResponseAllOfPhoto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserBaseResponseAllOfPhoto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserBaseResponseAllOfPhoto>() {
           @Override
           public void write(JsonWriter out, UserBaseResponseAllOfPhoto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserBaseResponseAllOfPhoto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserBaseResponseAllOfPhoto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserBaseResponseAllOfPhoto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserBaseResponseAllOfPhoto
  * @throws IOException if the JSON string is invalid with respect to UserBaseResponseAllOfPhoto
  */
  public static UserBaseResponseAllOfPhoto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserBaseResponseAllOfPhoto.class);
  }

 /**
  * Convert an instance of UserBaseResponseAllOfPhoto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

