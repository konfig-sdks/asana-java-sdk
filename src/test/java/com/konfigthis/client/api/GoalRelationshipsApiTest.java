/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.GoalAddSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsCreateSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsCreateSupportingRelationshipResponse;
import com.konfigthis.client.model.GoalRelationshipsGetCompactRecordsResponse;
import com.konfigthis.client.model.GoalRelationshipsGetRecordByIdResponse;
import com.konfigthis.client.model.GoalRelationshipsRemoveSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsRemoveSupportingRelationshipResponse;
import com.konfigthis.client.model.GoalRelationshipsUpdateGoalRelationshipRecordRequest;
import com.konfigthis.client.model.GoalRelationshipsUpdateGoalRelationshipRecordResponse;
import com.konfigthis.client.model.GoalRemoveSupportingRelationshipRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GoalRelationshipsApi
 */
@Disabled
public class GoalRelationshipsApiTest {

    private static GoalRelationshipsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new GoalRelationshipsApi(apiClient);
    }

    /**
     * Add a supporting goal relationship
     *
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSupportingRelationshipTest() throws ApiException {
        String goalGid = null;
        GoalAddSupportingRelationshipRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalRelationshipsCreateSupportingRelationshipResponse response = api.createSupportingRelationship(goalGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get goal relationships
     *
     * Returns compact goal relationship records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompactRecordsTest() throws ApiException {
        String supportedGoal = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        String resourceSubtype = null;
        List<String> optFields = null;
        GoalRelationshipsGetCompactRecordsResponse response = api.getCompactRecords(supportedGoal)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .resourceSubtype(resourceSubtype)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a goal relationship
     *
     * Returns the complete updated goal relationship record for a single goal relationship.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordByIdTest() throws ApiException {
        String goalRelationshipGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalRelationshipsGetRecordByIdResponse response = api.getRecordById(goalRelationshipGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes a supporting goal relationship
     *
     * Removes a goal relationship for a given parent goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSupportingRelationshipTest() throws ApiException {
        String goalGid = null;
        GoalRemoveSupportingRelationshipRequest data = null;
        Boolean optPretty = null;
        GoalRelationshipsRemoveSupportingRelationshipResponse response = api.removeSupportingRelationship(goalGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a goal relationship
     *
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGoalRelationshipRecordTest() throws ApiException {
        String goalRelationshipGid = null;
        GoalRelationshipRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GoalRelationshipsUpdateGoalRelationshipRecordResponse response = api.updateGoalRelationshipRecord(goalRelationshipGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
