/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.UsersGetFavoritesForUserResponse;
import com.konfigthis.client.model.UsersGetUserRecordResponse;
import com.konfigthis.client.model.UsersListTeamUsersResponse;
import com.konfigthis.client.model.UsersListWorkspaceUsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Get a user&#39;s favorites
     *
     * Returns all of a user&#39;s favorites in the given workspace, of the given type. Results are given in order (The same order as Asana&#39;s sidebar).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritesForUserTest() throws ApiException {
        String userGid = null;
        String resourceType = null;
        String workspace = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        UsersGetFavoritesForUserResponse response = api.getFavoritesForUser(userGid, resourceType, workspace)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a user
     *
     * Returns the full user record for the single user with the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRecordTest() throws ApiException {
        String userGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        UsersGetUserRecordResponse response = api.getUserRecord(userGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple users
     *
     * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultipleUsersTest() throws ApiException {
        String workspace = null;
        String team = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        ErrorResponse response = api.listMultipleUsers()
                .workspace(workspace)
                .team(team)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get users in a team
     *
     * Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamUsersTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        String offset = null;
        List<String> optFields = null;
        UsersListTeamUsersResponse response = api.listTeamUsers(teamGid)
                .optPretty(optPretty)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get users in a workspace or organization
     *
     * Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspaceUsersTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        String offset = null;
        List<String> optFields = null;
        UsersListWorkspaceUsersResponse response = api.listWorkspaceUsers(workspaceGid)
                .optPretty(optPretty)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
