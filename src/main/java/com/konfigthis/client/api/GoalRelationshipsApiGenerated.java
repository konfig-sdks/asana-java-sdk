/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GoalAddSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsCreateSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsCreateSupportingRelationshipResponse;
import com.konfigthis.client.model.GoalRelationshipsGetCompactRecordsResponse;
import com.konfigthis.client.model.GoalRelationshipsGetRecordByIdResponse;
import com.konfigthis.client.model.GoalRelationshipsRemoveSupportingRelationshipRequest;
import com.konfigthis.client.model.GoalRelationshipsRemoveSupportingRelationshipResponse;
import com.konfigthis.client.model.GoalRelationshipsUpdateGoalRelationshipRecordRequest;
import com.konfigthis.client.model.GoalRelationshipsUpdateGoalRelationshipRecordResponse;
import com.konfigthis.client.model.GoalRemoveSupportingRelationshipRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalRelationshipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalRelationshipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalRelationshipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSupportingRelationshipCall(String goalGid, GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalRelationshipsCreateSupportingRelationshipRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/addSupportingRelationship"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSupportingRelationshipValidateBeforeCall(String goalGid, GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling createSupportingRelationship(Async)");
        }

        // verify the required parameter 'goalRelationshipsCreateSupportingRelationshipRequest' is set
        if (goalRelationshipsCreateSupportingRelationshipRequest == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipsCreateSupportingRelationshipRequest' when calling createSupportingRelationship(Async)");
        }

        return createSupportingRelationshipCall(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalRelationshipsCreateSupportingRelationshipResponse> createSupportingRelationshipWithHttpInfo(String goalGid, GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createSupportingRelationshipValidateBeforeCall(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalRelationshipsCreateSupportingRelationshipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSupportingRelationshipAsync(String goalGid, GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalRelationshipsCreateSupportingRelationshipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSupportingRelationshipValidateBeforeCall(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalRelationshipsCreateSupportingRelationshipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSupportingRelationshipRequestBuilder {
        private final String goalGid;
        private GoalAddSupportingRelationshipRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateSupportingRelationshipRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateSupportingRelationshipRequestBuilder
         */
        public CreateSupportingRelationshipRequestBuilder data(GoalAddSupportingRelationshipRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateSupportingRelationshipRequestBuilder
         */
        public CreateSupportingRelationshipRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateSupportingRelationshipRequestBuilder
         */
        public CreateSupportingRelationshipRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createSupportingRelationship
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest = buildBodyParams();
            return createSupportingRelationshipCall(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields, _callback);
        }

        private GoalRelationshipsCreateSupportingRelationshipRequest buildBodyParams() {
            GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest = new GoalRelationshipsCreateSupportingRelationshipRequest();
            goalRelationshipsCreateSupportingRelationshipRequest.data(this.data);
            return goalRelationshipsCreateSupportingRelationshipRequest;
        }

        /**
         * Execute createSupportingRelationship request
         * @return GoalRelationshipsCreateSupportingRelationshipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public GoalRelationshipsCreateSupportingRelationshipResponse execute() throws ApiException {
            GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest = buildBodyParams();
            ApiResponse<GoalRelationshipsCreateSupportingRelationshipResponse> localVarResp = createSupportingRelationshipWithHttpInfo(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSupportingRelationship request with HTTP info returned
         * @return ApiResponse&lt;GoalRelationshipsCreateSupportingRelationshipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalRelationshipsCreateSupportingRelationshipResponse> executeWithHttpInfo() throws ApiException {
            GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest = buildBodyParams();
            return createSupportingRelationshipWithHttpInfo(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields);
        }

        /**
         * Execute createSupportingRelationship request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalRelationshipsCreateSupportingRelationshipResponse> _callback) throws ApiException {
            GoalRelationshipsCreateSupportingRelationshipRequest goalRelationshipsCreateSupportingRelationshipRequest = buildBodyParams();
            return createSupportingRelationshipAsync(goalGid, goalRelationshipsCreateSupportingRelationshipRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add a supporting goal relationship
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalRelationshipsCreateSupportingRelationshipRequest The supporting resource to be added to the goal (required)
     * @return CreateSupportingRelationshipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSupportingRelationshipRequestBuilder createSupportingRelationship(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new CreateSupportingRelationshipRequestBuilder(goalGid);
    }
    private okhttp3.Call getCompactRecordsCall(String supportedGoal, Boolean optPretty, Integer limit, String offset, String resourceSubtype, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_relationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (supportedGoal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supported_goal", supportedGoal));
        }

        if (resourceSubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_subtype", resourceSubtype));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactRecordsValidateBeforeCall(String supportedGoal, Boolean optPretty, Integer limit, String offset, String resourceSubtype, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportedGoal' is set
        if (supportedGoal == null) {
            throw new ApiException("Missing the required parameter 'supportedGoal' when calling getCompactRecords(Async)");
        }

        return getCompactRecordsCall(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, _callback);

    }


    private ApiResponse<GoalRelationshipsGetCompactRecordsResponse> getCompactRecordsWithHttpInfo(String supportedGoal, Boolean optPretty, Integer limit, String offset, String resourceSubtype, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, null);
        Type localVarReturnType = new TypeToken<GoalRelationshipsGetCompactRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactRecordsAsync(String supportedGoal, Boolean optPretty, Integer limit, String offset, String resourceSubtype, List<String> optFields, final ApiCallback<GoalRelationshipsGetCompactRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalRelationshipsGetCompactRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRecordsRequestBuilder {
        private final String supportedGoal;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String resourceSubtype;
        private List<String> optFields;

        private GetCompactRecordsRequestBuilder(String supportedGoal) {
            this.supportedGoal = supportedGoal;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set resourceSubtype
         * @param resourceSubtype If provided, filter to goal relationships with a given resource_subtype. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder resourceSubtype(String resourceSubtype) {
            this.resourceSubtype = resourceSubtype;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactRecordsCall(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, _callback);
        }


        /**
         * Execute getCompactRecords request
         * @return GoalRelationshipsGetCompactRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
         </table>
         */
        public GoalRelationshipsGetCompactRecordsResponse execute() throws ApiException {
            ApiResponse<GoalRelationshipsGetCompactRecordsResponse> localVarResp = getCompactRecordsWithHttpInfo(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactRecords request with HTTP info returned
         * @return ApiResponse&lt;GoalRelationshipsGetCompactRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalRelationshipsGetCompactRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactRecordsWithHttpInfo(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields);
        }

        /**
         * Execute getCompactRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalRelationshipsGetCompactRecordsResponse> _callback) throws ApiException {
            return getCompactRecordsAsync(supportedGoal, optPretty, limit, offset, resourceSubtype, optFields, _callback);
        }
    }

    /**
     * Get goal relationships
     * Returns compact goal relationship records.
     * @param supportedGoal Globally unique identifier for the supported goal in the goal relationship. (required)
     * @return GetCompactRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRecordsRequestBuilder getCompactRecords(String supportedGoal) throws IllegalArgumentException {
        if (supportedGoal == null) throw new IllegalArgumentException("\"supportedGoal\" is required but got null");
            

        return new GetCompactRecordsRequestBuilder(supportedGoal);
    }
    private okhttp3.Call getRecordByIdCall(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_relationships/{goal_relationship_gid}"
            .replace("{" + "goal_relationship_gid" + "}", localVarApiClient.escapeString(goalRelationshipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordByIdValidateBeforeCall(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalRelationshipGid' is set
        if (goalRelationshipGid == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipGid' when calling getRecordById(Async)");
        }

        return getRecordByIdCall(goalRelationshipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalRelationshipsGetRecordByIdResponse> getRecordByIdWithHttpInfo(String goalRelationshipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(goalRelationshipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalRelationshipsGetRecordByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordByIdAsync(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback<GoalRelationshipsGetRecordByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(goalRelationshipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalRelationshipsGetRecordByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordByIdRequestBuilder {
        private final String goalRelationshipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordByIdRequestBuilder(String goalRelationshipGid) {
            this.goalRelationshipGid = goalRelationshipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecordById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordByIdCall(goalRelationshipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecordById request
         * @return GoalRelationshipsGetRecordByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public GoalRelationshipsGetRecordByIdResponse execute() throws ApiException {
            ApiResponse<GoalRelationshipsGetRecordByIdResponse> localVarResp = getRecordByIdWithHttpInfo(goalRelationshipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecordById request with HTTP info returned
         * @return ApiResponse&lt;GoalRelationshipsGetRecordByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalRelationshipsGetRecordByIdResponse> executeWithHttpInfo() throws ApiException {
            return getRecordByIdWithHttpInfo(goalRelationshipGid, optPretty, optFields);
        }

        /**
         * Execute getRecordById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalRelationshipsGetRecordByIdResponse> _callback) throws ApiException {
            return getRecordByIdAsync(goalRelationshipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a goal relationship
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @return GetRecordByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordByIdRequestBuilder getRecordById(String goalRelationshipGid) throws IllegalArgumentException {
        if (goalRelationshipGid == null) throw new IllegalArgumentException("\"goalRelationshipGid\" is required but got null");
            

        return new GetRecordByIdRequestBuilder(goalRelationshipGid);
    }
    private okhttp3.Call removeSupportingRelationshipCall(String goalGid, GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalRelationshipsRemoveSupportingRelationshipRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/removeSupportingRelationship"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSupportingRelationshipValidateBeforeCall(String goalGid, GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling removeSupportingRelationship(Async)");
        }

        // verify the required parameter 'goalRelationshipsRemoveSupportingRelationshipRequest' is set
        if (goalRelationshipsRemoveSupportingRelationshipRequest == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipsRemoveSupportingRelationshipRequest' when calling removeSupportingRelationship(Async)");
        }

        return removeSupportingRelationshipCall(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty, _callback);

    }


    private ApiResponse<GoalRelationshipsRemoveSupportingRelationshipResponse> removeSupportingRelationshipWithHttpInfo(String goalGid, GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeSupportingRelationshipValidateBeforeCall(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<GoalRelationshipsRemoveSupportingRelationshipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSupportingRelationshipAsync(String goalGid, GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest, Boolean optPretty, final ApiCallback<GoalRelationshipsRemoveSupportingRelationshipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSupportingRelationshipValidateBeforeCall(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<GoalRelationshipsRemoveSupportingRelationshipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSupportingRelationshipRequestBuilder {
        private final String goalGid;
        private GoalRemoveSupportingRelationshipRequest data;
        private Boolean optPretty;

        private RemoveSupportingRelationshipRequestBuilder(String goalGid) {
            this.goalGid = goalGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveSupportingRelationshipRequestBuilder
         */
        public RemoveSupportingRelationshipRequestBuilder data(GoalRemoveSupportingRelationshipRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveSupportingRelationshipRequestBuilder
         */
        public RemoveSupportingRelationshipRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeSupportingRelationship
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest = buildBodyParams();
            return removeSupportingRelationshipCall(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty, _callback);
        }

        private GoalRelationshipsRemoveSupportingRelationshipRequest buildBodyParams() {
            GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest = new GoalRelationshipsRemoveSupportingRelationshipRequest();
            goalRelationshipsRemoveSupportingRelationshipRequest.data(this.data);
            return goalRelationshipsRemoveSupportingRelationshipRequest;
        }

        /**
         * Execute removeSupportingRelationship request
         * @return GoalRelationshipsRemoveSupportingRelationshipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public GoalRelationshipsRemoveSupportingRelationshipResponse execute() throws ApiException {
            GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest = buildBodyParams();
            ApiResponse<GoalRelationshipsRemoveSupportingRelationshipResponse> localVarResp = removeSupportingRelationshipWithHttpInfo(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSupportingRelationship request with HTTP info returned
         * @return ApiResponse&lt;GoalRelationshipsRemoveSupportingRelationshipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalRelationshipsRemoveSupportingRelationshipResponse> executeWithHttpInfo() throws ApiException {
            GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest = buildBodyParams();
            return removeSupportingRelationshipWithHttpInfo(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty);
        }

        /**
         * Execute removeSupportingRelationship request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalRelationshipsRemoveSupportingRelationshipResponse> _callback) throws ApiException {
            GoalRelationshipsRemoveSupportingRelationshipRequest goalRelationshipsRemoveSupportingRelationshipRequest = buildBodyParams();
            return removeSupportingRelationshipAsync(goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, optPretty, _callback);
        }
    }

    /**
     * Removes a supporting goal relationship
     * Removes a goal relationship for a given parent goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param goalRelationshipsRemoveSupportingRelationshipRequest The supporting resource to be removed from the goal (required)
     * @return RemoveSupportingRelationshipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSupportingRelationshipRequestBuilder removeSupportingRelationship(String goalGid) throws IllegalArgumentException {
        if (goalGid == null) throw new IllegalArgumentException("\"goalGid\" is required but got null");
            

        return new RemoveSupportingRelationshipRequestBuilder(goalGid);
    }
    private okhttp3.Call updateGoalRelationshipRecordCall(String goalRelationshipGid, GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goalRelationshipsUpdateGoalRelationshipRecordRequest;

        // create path and map variables
        String localVarPath = "/goal_relationships/{goal_relationship_gid}"
            .replace("{" + "goal_relationship_gid" + "}", localVarApiClient.escapeString(goalRelationshipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalRelationshipRecordValidateBeforeCall(String goalRelationshipGid, GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalRelationshipGid' is set
        if (goalRelationshipGid == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipGid' when calling updateGoalRelationshipRecord(Async)");
        }

        // verify the required parameter 'goalRelationshipsUpdateGoalRelationshipRecordRequest' is set
        if (goalRelationshipsUpdateGoalRelationshipRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipsUpdateGoalRelationshipRecordRequest' when calling updateGoalRelationshipRecord(Async)");
        }

        return updateGoalRelationshipRecordCall(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<GoalRelationshipsUpdateGoalRelationshipRecordResponse> updateGoalRelationshipRecordWithHttpInfo(String goalRelationshipGid, GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateGoalRelationshipRecordValidateBeforeCall(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GoalRelationshipsUpdateGoalRelationshipRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGoalRelationshipRecordAsync(String goalRelationshipGid, GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GoalRelationshipsUpdateGoalRelationshipRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalRelationshipRecordValidateBeforeCall(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GoalRelationshipsUpdateGoalRelationshipRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGoalRelationshipRecordRequestBuilder {
        private final String goalRelationshipGid;
        private GoalRelationshipRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateGoalRelationshipRecordRequestBuilder(String goalRelationshipGid) {
            this.goalRelationshipGid = goalRelationshipGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateGoalRelationshipRecordRequestBuilder
         */
        public UpdateGoalRelationshipRecordRequestBuilder data(GoalRelationshipRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateGoalRelationshipRecordRequestBuilder
         */
        public UpdateGoalRelationshipRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateGoalRelationshipRecordRequestBuilder
         */
        public UpdateGoalRelationshipRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateGoalRelationshipRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest = buildBodyParams();
            return updateGoalRelationshipRecordCall(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields, _callback);
        }

        private GoalRelationshipsUpdateGoalRelationshipRecordRequest buildBodyParams() {
            GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest = new GoalRelationshipsUpdateGoalRelationshipRecordRequest();
            goalRelationshipsUpdateGoalRelationshipRecordRequest.data(this.data);
            return goalRelationshipsUpdateGoalRelationshipRecordRequest;
        }

        /**
         * Execute updateGoalRelationshipRecord request
         * @return GoalRelationshipsUpdateGoalRelationshipRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public GoalRelationshipsUpdateGoalRelationshipRecordResponse execute() throws ApiException {
            GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest = buildBodyParams();
            ApiResponse<GoalRelationshipsUpdateGoalRelationshipRecordResponse> localVarResp = updateGoalRelationshipRecordWithHttpInfo(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGoalRelationshipRecord request with HTTP info returned
         * @return ApiResponse&lt;GoalRelationshipsUpdateGoalRelationshipRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GoalRelationshipsUpdateGoalRelationshipRecordResponse> executeWithHttpInfo() throws ApiException {
            GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest = buildBodyParams();
            return updateGoalRelationshipRecordWithHttpInfo(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateGoalRelationshipRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GoalRelationshipsUpdateGoalRelationshipRecordResponse> _callback) throws ApiException {
            GoalRelationshipsUpdateGoalRelationshipRecordRequest goalRelationshipsUpdateGoalRelationshipRecordRequest = buildBodyParams();
            return updateGoalRelationshipRecordAsync(goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a goal relationship
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param goalRelationshipsUpdateGoalRelationshipRecordRequest The updated fields for the goal relationship. (required)
     * @return UpdateGoalRelationshipRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGoalRelationshipRecordRequestBuilder updateGoalRelationshipRecord(String goalRelationshipGid) throws IllegalArgumentException {
        if (goalRelationshipGid == null) throw new IllegalArgumentException("\"goalRelationshipGid\" is required but got null");
            

        return new UpdateGoalRelationshipRecordRequestBuilder(goalRelationshipGid);
    }
}
