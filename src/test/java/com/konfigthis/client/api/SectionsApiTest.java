/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ProjectSectionInsertRequest;
import com.konfigthis.client.model.SectionRequest;
import com.konfigthis.client.model.SectionTaskInsertRequest;
import com.konfigthis.client.model.SectionsAddTaskToSectionRequest;
import com.konfigthis.client.model.SectionsAddTaskToSectionResponse;
import com.konfigthis.client.model.SectionsCreateNewSectionRequest;
import com.konfigthis.client.model.SectionsCreateNewSectionResponse;
import com.konfigthis.client.model.SectionsDeleteSectionResponse;
import com.konfigthis.client.model.SectionsGetRecordResponse;
import com.konfigthis.client.model.SectionsListProjectSectionsResponse;
import com.konfigthis.client.model.SectionsMoveOrInsertRequest;
import com.konfigthis.client.model.SectionsMoveOrInsertResponse;
import com.konfigthis.client.model.SectionsUpdateSectionRecordRequest;
import com.konfigthis.client.model.SectionsUpdateSectionRecordResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SectionsApi
 */
@Disabled
public class SectionsApiTest {

    private static SectionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SectionsApi(apiClient);
    }

    /**
     * Add task to section
     *
     * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaskToSectionTest() throws ApiException {
        String sectionGid = null;
        SectionTaskInsertRequest data = null;
        Boolean optPretty = null;
        SectionsAddTaskToSectionResponse response = api.addTaskToSection(sectionGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a section in a project
     *
     * Creates a new section in a project. Returns the full record of the newly created section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewSectionTest() throws ApiException {
        String projectGid = null;
        SectionRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        SectionsCreateNewSectionResponse response = api.createNewSection(projectGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a section
     *
     * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSectionTest() throws ApiException {
        String sectionGid = null;
        Boolean optPretty = null;
        SectionsDeleteSectionResponse response = api.deleteSection(sectionGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a section
     *
     * Returns the complete record for a single section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String sectionGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        SectionsGetRecordResponse response = api.getRecord(sectionGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sections in a project
     *
     * Returns the compact records for all sections in the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectSectionsTest() throws ApiException {
        String projectGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        SectionsListProjectSectionsResponse response = api.listProjectSections(projectGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Move or Insert sections
     *
     * Move sections relative to each other. One of &#x60;before_section&#x60; or &#x60;after_section&#x60; is required.  Sections cannot be moved between projects.  Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveOrInsertTest() throws ApiException {
        String projectGid = null;
        ProjectSectionInsertRequest data = null;
        Boolean optPretty = null;
        SectionsMoveOrInsertResponse response = api.moveOrInsert(projectGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a section
     *
     * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the &#x60;name&#x60; field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSectionRecordTest() throws ApiException {
        String sectionGid = null;
        SectionRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        SectionsUpdateSectionRecordResponse response = api.updateSectionRecord(sectionGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
