/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkspaceAddUserRequest;
import com.konfigthis.client.model.WorkspaceCompact;
import com.konfigthis.client.model.WorkspaceRemoveUserRequest;
import com.konfigthis.client.model.WorkspacesAddUserToWorkspaceRequest;
import com.konfigthis.client.model.WorkspacesAddUserToWorkspaceResponse;
import com.konfigthis.client.model.WorkspacesGetWorkspaceRecordResponse;
import com.konfigthis.client.model.WorkspacesListMultipleResponse;
import com.konfigthis.client.model.WorkspacesRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.WorkspacesRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.WorkspacesUpdateWorkspaceRecordRequest;
import com.konfigthis.client.model.WorkspacesUpdateWorkspaceRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkspacesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspacesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspacesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserToWorkspaceCall(String workspaceGid, WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspacesAddUserToWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/addUser"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToWorkspaceValidateBeforeCall(String workspaceGid, WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling addUserToWorkspace(Async)");
        }

        // verify the required parameter 'workspacesAddUserToWorkspaceRequest' is set
        if (workspacesAddUserToWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'workspacesAddUserToWorkspaceRequest' when calling addUserToWorkspace(Async)");
        }

        return addUserToWorkspaceCall(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<WorkspacesAddUserToWorkspaceResponse> addUserToWorkspaceWithHttpInfo(String workspaceGid, WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addUserToWorkspaceValidateBeforeCall(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspacesAddUserToWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserToWorkspaceAsync(String workspaceGid, WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest, Boolean optPretty, List<String> optFields, final ApiCallback<WorkspacesAddUserToWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToWorkspaceValidateBeforeCall(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspacesAddUserToWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserToWorkspaceRequestBuilder {
        private final String workspaceGid;
        private WorkspaceAddUserRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddUserToWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddUserToWorkspaceRequestBuilder
         */
        public AddUserToWorkspaceRequestBuilder data(WorkspaceAddUserRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddUserToWorkspaceRequestBuilder
         */
        public AddUserToWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddUserToWorkspaceRequestBuilder
         */
        public AddUserToWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addUserToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user was added successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest = buildBodyParams();
            return addUserToWorkspaceCall(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields, _callback);
        }

        private WorkspacesAddUserToWorkspaceRequest buildBodyParams() {
            WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest = new WorkspacesAddUserToWorkspaceRequest();
            workspacesAddUserToWorkspaceRequest.data(this.data);
            return workspacesAddUserToWorkspaceRequest;
        }

        /**
         * Execute addUserToWorkspace request
         * @return WorkspacesAddUserToWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user was added successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspacesAddUserToWorkspaceResponse execute() throws ApiException {
            WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest = buildBodyParams();
            ApiResponse<WorkspacesAddUserToWorkspaceResponse> localVarResp = addUserToWorkspaceWithHttpInfo(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;WorkspacesAddUserToWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user was added successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspacesAddUserToWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest = buildBodyParams();
            return addUserToWorkspaceWithHttpInfo(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields);
        }

        /**
         * Execute addUserToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The user was added successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspacesAddUserToWorkspaceResponse> _callback) throws ApiException {
            WorkspacesAddUserToWorkspaceRequest workspacesAddUserToWorkspaceRequest = buildBodyParams();
            return addUserToWorkspaceAsync(workspaceGid, workspacesAddUserToWorkspaceRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add a user to a workspace or organization
     * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param workspacesAddUserToWorkspaceRequest The user to add to the workspace. (required)
     * @return AddUserToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user was added successfully to the workspace or organization. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserToWorkspaceRequestBuilder addUserToWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new AddUserToWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call getWorkspaceRecordCall(String workspaceGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceRecordValidateBeforeCall(String workspaceGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getWorkspaceRecord(Async)");
        }

        return getWorkspaceRecordCall(workspaceGid, optPretty, optFields, _callback);

    }


    private ApiResponse<WorkspacesGetWorkspaceRecordResponse> getWorkspaceRecordWithHttpInfo(String workspaceGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceRecordValidateBeforeCall(workspaceGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspacesGetWorkspaceRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkspaceRecordAsync(String workspaceGid, Boolean optPretty, List<String> optFields, final ApiCallback<WorkspacesGetWorkspaceRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceRecordValidateBeforeCall(workspaceGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspacesGetWorkspaceRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkspaceRecordRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetWorkspaceRecordRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetWorkspaceRecordRequestBuilder
         */
        public GetWorkspaceRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetWorkspaceRecordRequestBuilder
         */
        public GetWorkspaceRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getWorkspaceRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the full workspace record. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkspaceRecordCall(workspaceGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getWorkspaceRecord request
         * @return WorkspacesGetWorkspaceRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the full workspace record. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspacesGetWorkspaceRecordResponse execute() throws ApiException {
            ApiResponse<WorkspacesGetWorkspaceRecordResponse> localVarResp = getWorkspaceRecordWithHttpInfo(workspaceGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkspaceRecord request with HTTP info returned
         * @return ApiResponse&lt;WorkspacesGetWorkspaceRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the full workspace record. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspacesGetWorkspaceRecordResponse> executeWithHttpInfo() throws ApiException {
            return getWorkspaceRecordWithHttpInfo(workspaceGid, optPretty, optFields);
        }

        /**
         * Execute getWorkspaceRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the full workspace record. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspacesGetWorkspaceRecordResponse> _callback) throws ApiException {
            return getWorkspaceRecordAsync(workspaceGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a workspace
     * Returns the full workspace record for a single workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return GetWorkspaceRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the full workspace record. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkspaceRecordRequestBuilder getWorkspaceRecord(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new GetWorkspaceRecordRequestBuilder(workspaceGid);
    }
    private okhttp3.Call listMultipleCall(Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleValidateBeforeCall(Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        return listMultipleCall(optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<WorkspacesListMultipleResponse> listMultipleWithHttpInfo(Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspacesListMultipleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleAsync(Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<WorkspacesListMultipleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleValidateBeforeCall(optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspacesListMultipleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleRequestBuilder {
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListMultipleRequestBuilder() {
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleRequestBuilder
         */
        public ListMultipleRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return all workspaces visible to the authorized user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleCall(optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listMultiple request
         * @return WorkspacesListMultipleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return all workspaces visible to the authorized user. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspacesListMultipleResponse execute() throws ApiException {
            ApiResponse<WorkspacesListMultipleResponse> localVarResp = listMultipleWithHttpInfo(optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultiple request with HTTP info returned
         * @return ApiResponse&lt;WorkspacesListMultipleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return all workspaces visible to the authorized user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspacesListMultipleResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleWithHttpInfo(optPretty, limit, offset, optFields);
        }

        /**
         * Execute listMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return all workspaces visible to the authorized user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspacesListMultipleResponse> _callback) throws ApiException {
            return listMultipleAsync(optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get multiple workspaces
     * Returns the compact records for all workspaces visible to the authorized user.
     * @return ListMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return all workspaces visible to the authorized user. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleRequestBuilder listMultiple() throws IllegalArgumentException {
        return new ListMultipleRequestBuilder();
    }
    private okhttp3.Call removeUserFromWorkspaceCall(String workspaceGid, WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspacesRemoveUserFromWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/removeUser"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromWorkspaceValidateBeforeCall(String workspaceGid, WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'workspacesRemoveUserFromWorkspaceRequest' is set
        if (workspacesRemoveUserFromWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'workspacesRemoveUserFromWorkspaceRequest' when calling removeUserFromWorkspace(Async)");
        }

        return removeUserFromWorkspaceCall(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty, _callback);

    }


    private ApiResponse<WorkspacesRemoveUserFromWorkspaceResponse> removeUserFromWorkspaceWithHttpInfo(String workspaceGid, WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<WorkspacesRemoveUserFromWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserFromWorkspaceAsync(String workspaceGid, WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest, Boolean optPretty, final ApiCallback<WorkspacesRemoveUserFromWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<WorkspacesRemoveUserFromWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserFromWorkspaceRequestBuilder {
        private final String workspaceGid;
        private WorkspaceRemoveUserRequest data;
        private Boolean optPretty;

        private RemoveUserFromWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveUserFromWorkspaceRequestBuilder
         */
        public RemoveUserFromWorkspaceRequestBuilder data(WorkspaceRemoveUserRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveUserFromWorkspaceRequestBuilder
         */
        public RemoveUserFromWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeUserFromWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was removed successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceCall(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty, _callback);
        }

        private WorkspacesRemoveUserFromWorkspaceRequest buildBodyParams() {
            WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest = new WorkspacesRemoveUserFromWorkspaceRequest();
            workspacesRemoveUserFromWorkspaceRequest.data(this.data);
            return workspacesRemoveUserFromWorkspaceRequest;
        }

        /**
         * Execute removeUserFromWorkspace request
         * @return WorkspacesRemoveUserFromWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was removed successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspacesRemoveUserFromWorkspaceResponse execute() throws ApiException {
            WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest = buildBodyParams();
            ApiResponse<WorkspacesRemoveUserFromWorkspaceResponse> localVarResp = removeUserFromWorkspaceWithHttpInfo(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUserFromWorkspace request with HTTP info returned
         * @return ApiResponse&lt;WorkspacesRemoveUserFromWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was removed successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspacesRemoveUserFromWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceWithHttpInfo(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty);
        }

        /**
         * Execute removeUserFromWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user was removed successfully to the workspace or organization. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspacesRemoveUserFromWorkspaceResponse> _callback) throws ApiException {
            WorkspacesRemoveUserFromWorkspaceRequest workspacesRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceAsync(workspaceGid, workspacesRemoveUserFromWorkspaceRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a user from a workspace or organization
     * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param workspacesRemoveUserFromWorkspaceRequest The user to remove from the workspace. (required)
     * @return RemoveUserFromWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was removed successfully to the workspace or organization. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromWorkspaceRequestBuilder removeUserFromWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new RemoveUserFromWorkspaceRequestBuilder(workspaceGid);
    }
    private okhttp3.Call updateWorkspaceRecordCall(String workspaceGid, WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspacesUpdateWorkspaceRecordRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceRecordValidateBeforeCall(String workspaceGid, WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling updateWorkspaceRecord(Async)");
        }

        // verify the required parameter 'workspacesUpdateWorkspaceRecordRequest' is set
        if (workspacesUpdateWorkspaceRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'workspacesUpdateWorkspaceRecordRequest' when calling updateWorkspaceRecord(Async)");
        }

        return updateWorkspaceRecordCall(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<WorkspacesUpdateWorkspaceRecordResponse> updateWorkspaceRecordWithHttpInfo(String workspaceGid, WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceRecordValidateBeforeCall(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspacesUpdateWorkspaceRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkspaceRecordAsync(String workspaceGid, WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<WorkspacesUpdateWorkspaceRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceRecordValidateBeforeCall(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspacesUpdateWorkspaceRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkspaceRecordRequestBuilder {
        private final String workspaceGid;
        private WorkspaceCompact data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateWorkspaceRecordRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateWorkspaceRecordRequestBuilder
         */
        public UpdateWorkspaceRecordRequestBuilder data(WorkspaceCompact data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateWorkspaceRecordRequestBuilder
         */
        public UpdateWorkspaceRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateWorkspaceRecordRequestBuilder
         */
        public UpdateWorkspaceRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateWorkspaceRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update for the workspace was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest = buildBodyParams();
            return updateWorkspaceRecordCall(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields, _callback);
        }

        private WorkspacesUpdateWorkspaceRecordRequest buildBodyParams() {
            WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest = new WorkspacesUpdateWorkspaceRecordRequest();
            workspacesUpdateWorkspaceRecordRequest.data(this.data);
            return workspacesUpdateWorkspaceRecordRequest;
        }

        /**
         * Execute updateWorkspaceRecord request
         * @return WorkspacesUpdateWorkspaceRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update for the workspace was successful. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspacesUpdateWorkspaceRecordResponse execute() throws ApiException {
            WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest = buildBodyParams();
            ApiResponse<WorkspacesUpdateWorkspaceRecordResponse> localVarResp = updateWorkspaceRecordWithHttpInfo(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkspaceRecord request with HTTP info returned
         * @return ApiResponse&lt;WorkspacesUpdateWorkspaceRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update for the workspace was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspacesUpdateWorkspaceRecordResponse> executeWithHttpInfo() throws ApiException {
            WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest = buildBodyParams();
            return updateWorkspaceRecordWithHttpInfo(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateWorkspaceRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update for the workspace was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspacesUpdateWorkspaceRecordResponse> _callback) throws ApiException {
            WorkspacesUpdateWorkspaceRecordRequest workspacesUpdateWorkspaceRecordRequest = buildBodyParams();
            return updateWorkspaceRecordAsync(workspaceGid, workspacesUpdateWorkspaceRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a workspace
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param workspacesUpdateWorkspaceRecordRequest The workspace object with all updated properties. (required)
     * @return UpdateWorkspaceRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update for the workspace was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkspaceRecordRequestBuilder updateWorkspaceRecord(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new UpdateWorkspaceRecordRequestBuilder(workspaceGid);
    }
}
