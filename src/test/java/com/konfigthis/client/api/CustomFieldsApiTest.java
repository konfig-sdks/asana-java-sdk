/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CustomFieldRequest;
import com.konfigthis.client.model.CustomFieldsAddEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsAddEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsCreateNewFieldRecordRequest;
import com.konfigthis.client.model.CustomFieldsCreateNewFieldRecordResponse;
import com.konfigthis.client.model.CustomFieldsDeleteFieldRecordResponse;
import com.konfigthis.client.model.CustomFieldsGetMetadataResponse;
import com.konfigthis.client.model.CustomFieldsListWorkspaceCustomFieldsResponse;
import com.konfigthis.client.model.CustomFieldsReorderEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsReorderEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsUpdateEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsUpdateEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsUpdateFieldRecordRequest;
import com.konfigthis.client.model.CustomFieldsUpdateFieldRecordResponse;
import com.konfigthis.client.model.EnumOption;
import com.konfigthis.client.model.EnumOptionInsertRequest;
import com.konfigthis.client.model.EnumOptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomFieldsApi
 */
@Disabled
public class CustomFieldsApiTest {

    private static CustomFieldsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CustomFieldsApi(apiClient);
    }

    /**
     * Create an enum option
     *
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEnumOptionTest() throws ApiException {
        String customFieldGid = null;
        EnumOptionRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsAddEnumOptionResponse response = api.addEnumOption(customFieldGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a custom field
     *
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as &#x60;Due Date&#x60; or &#x60;Assignee&#x60;. A custom field’s type must be one of &#x60;text&#x60;, &#x60;enum&#x60;, &#x60;multi_enum&#x60;, &#x60;number&#x60;, &#x60;date&#x60;, or &#x60;people&#x60;.  Returns the full record of the newly created custom field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFieldRecordTest() throws ApiException {
        CustomFieldRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsCreateNewFieldRecordResponse response = api.createNewFieldRecord()
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a custom field
     *
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldRecordTest() throws ApiException {
        String customFieldGid = null;
        Boolean optPretty = null;
        CustomFieldsDeleteFieldRecordResponse response = api.deleteFieldRecord(customFieldGid)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a custom field
     *
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataTest() throws ApiException {
        String customFieldGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsGetMetadataResponse response = api.getMetadata(customFieldGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a workspace&#39;s custom fields
     *
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspaceCustomFieldsTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        CustomFieldsListWorkspaceCustomFieldsResponse response = api.listWorkspaceCustomFields(workspaceGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Reorder a custom field&#39;s enum
     *
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reorderEnumOptionTest() throws ApiException {
        String customFieldGid = null;
        EnumOptionInsertRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsReorderEnumOptionResponse response = api.reorderEnumOption(customFieldGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an enum option
     *
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnumOptionTest() throws ApiException {
        String enumOptionGid = null;
        EnumOption data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsUpdateEnumOptionResponse response = api.updateEnumOption(enumOptionGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a custom field
     *
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldRecordTest() throws ApiException {
        String customFieldGid = null;
        CustomFieldRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CustomFieldsUpdateFieldRecordResponse response = api.updateFieldRecord(customFieldGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
