/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectMembershipsGetCompactRecordsResponse;
import com.konfigthis.client.model.ProjectMembershipsGetRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectMembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectMembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectMembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCompactRecordsCall(String projectGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/project_memberships"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompactRecordsValidateBeforeCall(String projectGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getCompactRecords(Async)");
        }

        return getCompactRecordsCall(projectGid, user, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<ProjectMembershipsGetCompactRecordsResponse> getCompactRecordsWithHttpInfo(String projectGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(projectGid, user, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectMembershipsGetCompactRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompactRecordsAsync(String projectGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<ProjectMembershipsGetCompactRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompactRecordsValidateBeforeCall(projectGid, user, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectMembershipsGetCompactRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompactRecordsRequestBuilder {
        private final String projectGid;
        private String user;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetCompactRecordsRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set user
         * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetCompactRecordsRequestBuilder
         */
        public GetCompactRecordsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getCompactRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompactRecordsCall(projectGid, user, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getCompactRecords request
         * @return ProjectMembershipsGetCompactRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectMembershipsGetCompactRecordsResponse execute() throws ApiException {
            ApiResponse<ProjectMembershipsGetCompactRecordsResponse> localVarResp = getCompactRecordsWithHttpInfo(projectGid, user, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompactRecords request with HTTP info returned
         * @return ApiResponse&lt;ProjectMembershipsGetCompactRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectMembershipsGetCompactRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getCompactRecordsWithHttpInfo(projectGid, user, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getCompactRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectMembershipsGetCompactRecordsResponse> _callback) throws ApiException {
            return getCompactRecordsAsync(projectGid, user, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get memberships from a project
     * Returns the compact project membership records for the project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return GetCompactRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompactRecordsRequestBuilder getCompactRecords(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new GetCompactRecordsRequestBuilder(projectGid);
    }
    private okhttp3.Call getRecordCall(String projectMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_memberships/{project_membership_gid}"
            .replace("{" + "project_membership_gid" + "}", localVarApiClient.escapeString(projectMembershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String projectMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectMembershipGid' is set
        if (projectMembershipGid == null) {
            throw new ApiException("Missing the required parameter 'projectMembershipGid' when calling getRecord(Async)");
        }

        return getRecordCall(projectMembershipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectMembershipsGetRecordResponse> getRecordWithHttpInfo(String projectMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(projectMembershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectMembershipsGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String projectMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectMembershipsGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(projectMembershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectMembershipsGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String projectMembershipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String projectMembershipGid) {
            this.projectMembershipGid = projectMembershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(projectMembershipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return ProjectMembershipsGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project membership. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectMembershipsGetRecordResponse execute() throws ApiException {
            ApiResponse<ProjectMembershipsGetRecordResponse> localVarResp = getRecordWithHttpInfo(projectMembershipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectMembershipsGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectMembershipsGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(projectMembershipGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested project membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectMembershipsGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(projectMembershipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a project membership
     * Returns the complete project record for a single project membership.
     * @param projectMembershipGid  (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String projectMembershipGid) throws IllegalArgumentException {
        if (projectMembershipGid == null) throw new IllegalArgumentException("\"projectMembershipGid\" is required but got null");
            

        return new GetRecordRequestBuilder(projectMembershipGid);
    }
}
