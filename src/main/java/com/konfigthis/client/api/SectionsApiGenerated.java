/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectSectionInsertRequest;
import com.konfigthis.client.model.SectionRequest;
import com.konfigthis.client.model.SectionTaskInsertRequest;
import com.konfigthis.client.model.SectionsAddTaskToSectionRequest;
import com.konfigthis.client.model.SectionsAddTaskToSectionResponse;
import com.konfigthis.client.model.SectionsCreateNewSectionRequest;
import com.konfigthis.client.model.SectionsCreateNewSectionResponse;
import com.konfigthis.client.model.SectionsDeleteSectionResponse;
import com.konfigthis.client.model.SectionsGetRecordResponse;
import com.konfigthis.client.model.SectionsListProjectSectionsResponse;
import com.konfigthis.client.model.SectionsMoveOrInsertRequest;
import com.konfigthis.client.model.SectionsMoveOrInsertResponse;
import com.konfigthis.client.model.SectionsUpdateSectionRecordRequest;
import com.konfigthis.client.model.SectionsUpdateSectionRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SectionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SectionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SectionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTaskToSectionCall(String sectionGid, Boolean optPretty, SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sectionsAddTaskToSectionRequest;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}/addTask"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTaskToSectionValidateBeforeCall(String sectionGid, Boolean optPretty, SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling addTaskToSection(Async)");
        }

        return addTaskToSectionCall(sectionGid, optPretty, sectionsAddTaskToSectionRequest, _callback);

    }


    private ApiResponse<SectionsAddTaskToSectionResponse> addTaskToSectionWithHttpInfo(String sectionGid, Boolean optPretty, SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest) throws ApiException {
        okhttp3.Call localVarCall = addTaskToSectionValidateBeforeCall(sectionGid, optPretty, sectionsAddTaskToSectionRequest, null);
        Type localVarReturnType = new TypeToken<SectionsAddTaskToSectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTaskToSectionAsync(String sectionGid, Boolean optPretty, SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest, final ApiCallback<SectionsAddTaskToSectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTaskToSectionValidateBeforeCall(sectionGid, optPretty, sectionsAddTaskToSectionRequest, _callback);
        Type localVarReturnType = new TypeToken<SectionsAddTaskToSectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTaskToSectionRequestBuilder {
        private final String sectionGid;
        private SectionTaskInsertRequest data;
        private Boolean optPretty;

        private AddTaskToSectionRequestBuilder(String sectionGid) {
            this.sectionGid = sectionGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddTaskToSectionRequestBuilder
         */
        public AddTaskToSectionRequestBuilder data(SectionTaskInsertRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddTaskToSectionRequestBuilder
         */
        public AddTaskToSectionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for addTaskToSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest = buildBodyParams();
            return addTaskToSectionCall(sectionGid, optPretty, sectionsAddTaskToSectionRequest, _callback);
        }

        private SectionsAddTaskToSectionRequest buildBodyParams() {
            SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest = new SectionsAddTaskToSectionRequest();
            sectionsAddTaskToSectionRequest.data(this.data);
            return sectionsAddTaskToSectionRequest;
        }

        /**
         * Execute addTaskToSection request
         * @return SectionsAddTaskToSectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the task. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsAddTaskToSectionResponse execute() throws ApiException {
            SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest = buildBodyParams();
            ApiResponse<SectionsAddTaskToSectionResponse> localVarResp = addTaskToSectionWithHttpInfo(sectionGid, optPretty, sectionsAddTaskToSectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTaskToSection request with HTTP info returned
         * @return ApiResponse&lt;SectionsAddTaskToSectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the task. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsAddTaskToSectionResponse> executeWithHttpInfo() throws ApiException {
            SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest = buildBodyParams();
            return addTaskToSectionWithHttpInfo(sectionGid, optPretty, sectionsAddTaskToSectionRequest);
        }

        /**
         * Execute addTaskToSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the task. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsAddTaskToSectionResponse> _callback) throws ApiException {
            SectionsAddTaskToSectionRequest sectionsAddTaskToSectionRequest = buildBodyParams();
            return addTaskToSectionAsync(sectionGid, optPretty, sectionsAddTaskToSectionRequest, _callback);
        }
    }

    /**
     * Add task to section
     * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
     * @param sectionGid The globally unique identifier for the section. (required)
     * @return AddTaskToSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the task. </td><td>  -  </td></tr>
     </table>
     */
    public AddTaskToSectionRequestBuilder addTaskToSection(String sectionGid) throws IllegalArgumentException {
        if (sectionGid == null) throw new IllegalArgumentException("\"sectionGid\" is required but got null");
            

        return new AddTaskToSectionRequestBuilder(sectionGid);
    }
    private okhttp3.Call createNewSectionCall(String projectGid, Boolean optPretty, List<String> optFields, SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sectionsCreateNewSectionRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/sections"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSectionValidateBeforeCall(String projectGid, Boolean optPretty, List<String> optFields, SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling createNewSection(Async)");
        }

        return createNewSectionCall(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest, _callback);

    }


    private ApiResponse<SectionsCreateNewSectionResponse> createNewSectionWithHttpInfo(String projectGid, Boolean optPretty, List<String> optFields, SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewSectionValidateBeforeCall(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest, null);
        Type localVarReturnType = new TypeToken<SectionsCreateNewSectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewSectionAsync(String projectGid, Boolean optPretty, List<String> optFields, SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest, final ApiCallback<SectionsCreateNewSectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSectionValidateBeforeCall(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest, _callback);
        Type localVarReturnType = new TypeToken<SectionsCreateNewSectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewSectionRequestBuilder {
        private final String projectGid;
        private SectionRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewSectionRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewSectionRequestBuilder
         */
        public CreateNewSectionRequestBuilder data(SectionRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewSectionRequestBuilder
         */
        public CreateNewSectionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewSectionRequestBuilder
         */
        public CreateNewSectionRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest = buildBodyParams();
            return createNewSectionCall(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest, _callback);
        }

        private SectionsCreateNewSectionRequest buildBodyParams() {
            SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest = new SectionsCreateNewSectionRequest();
            sectionsCreateNewSectionRequest.data(this.data);
            return sectionsCreateNewSectionRequest;
        }

        /**
         * Execute createNewSection request
         * @return SectionsCreateNewSectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsCreateNewSectionResponse execute() throws ApiException {
            SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest = buildBodyParams();
            ApiResponse<SectionsCreateNewSectionResponse> localVarResp = createNewSectionWithHttpInfo(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSection request with HTTP info returned
         * @return ApiResponse&lt;SectionsCreateNewSectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsCreateNewSectionResponse> executeWithHttpInfo() throws ApiException {
            SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest = buildBodyParams();
            return createNewSectionWithHttpInfo(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest);
        }

        /**
         * Execute createNewSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsCreateNewSectionResponse> _callback) throws ApiException {
            SectionsCreateNewSectionRequest sectionsCreateNewSectionRequest = buildBodyParams();
            return createNewSectionAsync(projectGid, optPretty, optFields, sectionsCreateNewSectionRequest, _callback);
        }
    }

    /**
     * Create a section in a project
     * Creates a new section in a project. Returns the full record of the newly created section.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return CreateNewSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified section. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSectionRequestBuilder createNewSection(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new CreateNewSectionRequestBuilder(projectGid);
    }
    private okhttp3.Call deleteSectionCall(String sectionGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSectionValidateBeforeCall(String sectionGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling deleteSection(Async)");
        }

        return deleteSectionCall(sectionGid, optPretty, _callback);

    }


    private ApiResponse<SectionsDeleteSectionResponse> deleteSectionWithHttpInfo(String sectionGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteSectionValidateBeforeCall(sectionGid, optPretty, null);
        Type localVarReturnType = new TypeToken<SectionsDeleteSectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSectionAsync(String sectionGid, Boolean optPretty, final ApiCallback<SectionsDeleteSectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSectionValidateBeforeCall(sectionGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<SectionsDeleteSectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSectionRequestBuilder {
        private final String sectionGid;
        private Boolean optPretty;

        private DeleteSectionRequestBuilder(String sectionGid) {
            this.sectionGid = sectionGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteSectionRequestBuilder
         */
        public DeleteSectionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteSection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSectionCall(sectionGid, optPretty, _callback);
        }


        /**
         * Execute deleteSection request
         * @return SectionsDeleteSectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsDeleteSectionResponse execute() throws ApiException {
            ApiResponse<SectionsDeleteSectionResponse> localVarResp = deleteSectionWithHttpInfo(sectionGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSection request with HTTP info returned
         * @return ApiResponse&lt;SectionsDeleteSectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsDeleteSectionResponse> executeWithHttpInfo() throws ApiException {
            return deleteSectionWithHttpInfo(sectionGid, optPretty);
        }

        /**
         * Execute deleteSection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsDeleteSectionResponse> _callback) throws ApiException {
            return deleteSectionAsync(sectionGid, optPretty, _callback);
        }
    }

    /**
     * Delete a section
     * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @return DeleteSectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified section. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSectionRequestBuilder deleteSection(String sectionGid) throws IllegalArgumentException {
        if (sectionGid == null) throw new IllegalArgumentException("\"sectionGid\" is required but got null");
            

        return new DeleteSectionRequestBuilder(sectionGid);
    }
    private okhttp3.Call getRecordCall(String sectionGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String sectionGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling getRecord(Async)");
        }

        return getRecordCall(sectionGid, optPretty, optFields, _callback);

    }


    private ApiResponse<SectionsGetRecordResponse> getRecordWithHttpInfo(String sectionGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(sectionGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<SectionsGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String sectionGid, Boolean optPretty, List<String> optFields, final ApiCallback<SectionsGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(sectionGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<SectionsGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String sectionGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String sectionGid) {
            this.sectionGid = sectionGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(sectionGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return SectionsGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved section. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsGetRecordResponse execute() throws ApiException {
            ApiResponse<SectionsGetRecordResponse> localVarResp = getRecordWithHttpInfo(sectionGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;SectionsGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved section. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(sectionGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(sectionGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a section
     * Returns the complete record for a single section.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved section. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String sectionGid) throws IllegalArgumentException {
        if (sectionGid == null) throw new IllegalArgumentException("\"sectionGid\" is required but got null");
            

        return new GetRecordRequestBuilder(sectionGid);
    }
    private okhttp3.Call listProjectSectionsCall(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/sections"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectSectionsValidateBeforeCall(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling listProjectSections(Async)");
        }

        return listProjectSectionsCall(projectGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<SectionsListProjectSectionsResponse> listProjectSectionsWithHttpInfo(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listProjectSectionsValidateBeforeCall(projectGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<SectionsListProjectSectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProjectSectionsAsync(String projectGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<SectionsListProjectSectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectSectionsValidateBeforeCall(projectGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<SectionsListProjectSectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProjectSectionsRequestBuilder {
        private final String projectGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListProjectSectionsRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListProjectSectionsRequestBuilder
         */
        public ListProjectSectionsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListProjectSectionsRequestBuilder
         */
        public ListProjectSectionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListProjectSectionsRequestBuilder
         */
        public ListProjectSectionsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListProjectSectionsRequestBuilder
         */
        public ListProjectSectionsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listProjectSections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved sections in project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProjectSectionsCall(projectGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listProjectSections request
         * @return SectionsListProjectSectionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved sections in project. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsListProjectSectionsResponse execute() throws ApiException {
            ApiResponse<SectionsListProjectSectionsResponse> localVarResp = listProjectSectionsWithHttpInfo(projectGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProjectSections request with HTTP info returned
         * @return ApiResponse&lt;SectionsListProjectSectionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved sections in project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsListProjectSectionsResponse> executeWithHttpInfo() throws ApiException {
            return listProjectSectionsWithHttpInfo(projectGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listProjectSections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved sections in project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsListProjectSectionsResponse> _callback) throws ApiException {
            return listProjectSectionsAsync(projectGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get sections in a project
     * Returns the compact records for all sections in the specified project.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return ListProjectSectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved sections in project. </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectSectionsRequestBuilder listProjectSections(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new ListProjectSectionsRequestBuilder(projectGid);
    }
    private okhttp3.Call moveOrInsertCall(String projectGid, Boolean optPretty, SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sectionsMoveOrInsertRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/sections/insert"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveOrInsertValidateBeforeCall(String projectGid, Boolean optPretty, SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling moveOrInsert(Async)");
        }

        return moveOrInsertCall(projectGid, optPretty, sectionsMoveOrInsertRequest, _callback);

    }


    private ApiResponse<SectionsMoveOrInsertResponse> moveOrInsertWithHttpInfo(String projectGid, Boolean optPretty, SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest) throws ApiException {
        okhttp3.Call localVarCall = moveOrInsertValidateBeforeCall(projectGid, optPretty, sectionsMoveOrInsertRequest, null);
        Type localVarReturnType = new TypeToken<SectionsMoveOrInsertResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call moveOrInsertAsync(String projectGid, Boolean optPretty, SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest, final ApiCallback<SectionsMoveOrInsertResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveOrInsertValidateBeforeCall(projectGid, optPretty, sectionsMoveOrInsertRequest, _callback);
        Type localVarReturnType = new TypeToken<SectionsMoveOrInsertResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MoveOrInsertRequestBuilder {
        private final String projectGid;
        private ProjectSectionInsertRequest data;
        private Boolean optPretty;

        private MoveOrInsertRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return MoveOrInsertRequestBuilder
         */
        public MoveOrInsertRequestBuilder data(ProjectSectionInsertRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return MoveOrInsertRequestBuilder
         */
        public MoveOrInsertRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for moveOrInsert
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully moved the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest = buildBodyParams();
            return moveOrInsertCall(projectGid, optPretty, sectionsMoveOrInsertRequest, _callback);
        }

        private SectionsMoveOrInsertRequest buildBodyParams() {
            SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest = new SectionsMoveOrInsertRequest();
            sectionsMoveOrInsertRequest.data(this.data);
            return sectionsMoveOrInsertRequest;
        }

        /**
         * Execute moveOrInsert request
         * @return SectionsMoveOrInsertResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully moved the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsMoveOrInsertResponse execute() throws ApiException {
            SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest = buildBodyParams();
            ApiResponse<SectionsMoveOrInsertResponse> localVarResp = moveOrInsertWithHttpInfo(projectGid, optPretty, sectionsMoveOrInsertRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute moveOrInsert request with HTTP info returned
         * @return ApiResponse&lt;SectionsMoveOrInsertResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully moved the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsMoveOrInsertResponse> executeWithHttpInfo() throws ApiException {
            SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest = buildBodyParams();
            return moveOrInsertWithHttpInfo(projectGid, optPretty, sectionsMoveOrInsertRequest);
        }

        /**
         * Execute moveOrInsert request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully moved the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsMoveOrInsertResponse> _callback) throws ApiException {
            SectionsMoveOrInsertRequest sectionsMoveOrInsertRequest = buildBodyParams();
            return moveOrInsertAsync(projectGid, optPretty, sectionsMoveOrInsertRequest, _callback);
        }
    }

    /**
     * Move or Insert sections
     * Move sections relative to each other. One of &#x60;before_section&#x60; or &#x60;after_section&#x60; is required.  Sections cannot be moved between projects.  Returns an empty data block.
     * @param projectGid Globally unique identifier for the project. (required)
     * @return MoveOrInsertRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully moved the specified section. </td><td>  -  </td></tr>
     </table>
     */
    public MoveOrInsertRequestBuilder moveOrInsert(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new MoveOrInsertRequestBuilder(projectGid);
    }
    private okhttp3.Call updateSectionRecordCall(String sectionGid, Boolean optPretty, List<String> optFields, SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sectionsUpdateSectionRecordRequest;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSectionRecordValidateBeforeCall(String sectionGid, Boolean optPretty, List<String> optFields, SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling updateSectionRecord(Async)");
        }

        return updateSectionRecordCall(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest, _callback);

    }


    private ApiResponse<SectionsUpdateSectionRecordResponse> updateSectionRecordWithHttpInfo(String sectionGid, Boolean optPretty, List<String> optFields, SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSectionRecordValidateBeforeCall(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest, null);
        Type localVarReturnType = new TypeToken<SectionsUpdateSectionRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSectionRecordAsync(String sectionGid, Boolean optPretty, List<String> optFields, SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest, final ApiCallback<SectionsUpdateSectionRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSectionRecordValidateBeforeCall(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<SectionsUpdateSectionRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSectionRecordRequestBuilder {
        private final String sectionGid;
        private SectionRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateSectionRecordRequestBuilder(String sectionGid) {
            this.sectionGid = sectionGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateSectionRecordRequestBuilder
         */
        public UpdateSectionRecordRequestBuilder data(SectionRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateSectionRecordRequestBuilder
         */
        public UpdateSectionRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateSectionRecordRequestBuilder
         */
        public UpdateSectionRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateSectionRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest = buildBodyParams();
            return updateSectionRecordCall(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest, _callback);
        }

        private SectionsUpdateSectionRecordRequest buildBodyParams() {
            SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest = new SectionsUpdateSectionRecordRequest();
            sectionsUpdateSectionRecordRequest.data(this.data);
            return sectionsUpdateSectionRecordRequest;
        }

        /**
         * Execute updateSectionRecord request
         * @return SectionsUpdateSectionRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public SectionsUpdateSectionRecordResponse execute() throws ApiException {
            SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest = buildBodyParams();
            ApiResponse<SectionsUpdateSectionRecordResponse> localVarResp = updateSectionRecordWithHttpInfo(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSectionRecord request with HTTP info returned
         * @return ApiResponse&lt;SectionsUpdateSectionRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SectionsUpdateSectionRecordResponse> executeWithHttpInfo() throws ApiException {
            SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest = buildBodyParams();
            return updateSectionRecordWithHttpInfo(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest);
        }

        /**
         * Execute updateSectionRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified section. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SectionsUpdateSectionRecordResponse> _callback) throws ApiException {
            SectionsUpdateSectionRecordRequest sectionsUpdateSectionRecordRequest = buildBodyParams();
            return updateSectionRecordAsync(sectionGid, optPretty, optFields, sectionsUpdateSectionRecordRequest, _callback);
        }
    }

    /**
     * Update a section
     * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the &#x60;name&#x60; field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @return UpdateSectionRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified section. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSectionRecordRequestBuilder updateSectionRecord(String sectionGid) throws IllegalArgumentException {
        if (sectionGid == null) throw new IllegalArgumentException("\"sectionGid\" is required but got null");
            

        return new UpdateSectionRecordRequestBuilder(sectionGid);
    }
}
