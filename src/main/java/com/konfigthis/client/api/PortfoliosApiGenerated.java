/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddCustomFieldSettingRequest;
import com.konfigthis.client.model.AddMembersRequest;
import com.konfigthis.client.model.PortfolioAddItemRequest;
import com.konfigthis.client.model.PortfolioRemoveItemRequest;
import com.konfigthis.client.model.PortfolioRequest;
import com.konfigthis.client.model.PortfoliosAddCustomFieldSettingRequest;
import com.konfigthis.client.model.PortfoliosAddCustomFieldSettingResponse;
import com.konfigthis.client.model.PortfoliosAddMembersToPortfolioRequest;
import com.konfigthis.client.model.PortfoliosAddMembersToPortfolioResponse;
import com.konfigthis.client.model.PortfoliosAddPortfolioItemRequest;
import com.konfigthis.client.model.PortfoliosAddPortfolioItemResponse;
import com.konfigthis.client.model.PortfoliosCreateNewPortfolioRecordRequest;
import com.konfigthis.client.model.PortfoliosCreateNewPortfolioRecordResponse;
import com.konfigthis.client.model.PortfoliosDeleteRecordResponse;
import com.konfigthis.client.model.PortfoliosGetItemsResponse;
import com.konfigthis.client.model.PortfoliosGetRecordResponse;
import com.konfigthis.client.model.PortfoliosListMultiplePortfoliosResponse;
import com.konfigthis.client.model.PortfoliosRemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.PortfoliosRemoveCustomFieldSettingResponse;
import com.konfigthis.client.model.PortfoliosRemoveItemFromPortfolioRequest;
import com.konfigthis.client.model.PortfoliosRemoveItemFromPortfolioResponse;
import com.konfigthis.client.model.PortfoliosRemoveMembersFromPortfolioRequest;
import com.konfigthis.client.model.PortfoliosRemoveMembersFromPortfolioResponse;
import com.konfigthis.client.model.PortfoliosUpdatePortfolioRecordRequest;
import com.konfigthis.client.model.PortfoliosUpdatePortfolioRecordResponse;
import com.konfigthis.client.model.RemoveCustomFieldSettingRequest;
import com.konfigthis.client.model.RemoveMembersRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PortfoliosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfoliosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PortfoliosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCustomFieldSettingCall(String portfolioGid, PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosAddCustomFieldSettingRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/addCustomFieldSetting"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomFieldSettingValidateBeforeCall(String portfolioGid, PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling addCustomFieldSetting(Async)");
        }

        // verify the required parameter 'portfoliosAddCustomFieldSettingRequest' is set
        if (portfoliosAddCustomFieldSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosAddCustomFieldSettingRequest' when calling addCustomFieldSetting(Async)");
        }

        return addCustomFieldSettingCall(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty, _callback);

    }


    private ApiResponse<PortfoliosAddCustomFieldSettingResponse> addCustomFieldSettingWithHttpInfo(String portfolioGid, PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = addCustomFieldSettingValidateBeforeCall(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<PortfoliosAddCustomFieldSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomFieldSettingAsync(String portfolioGid, PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest, Boolean optPretty, final ApiCallback<PortfoliosAddCustomFieldSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomFieldSettingValidateBeforeCall(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosAddCustomFieldSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomFieldSettingRequestBuilder {
        private final String portfolioGid;
        private AddCustomFieldSettingRequest data;
        private Boolean optPretty;

        private AddCustomFieldSettingRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddCustomFieldSettingRequestBuilder
         */
        public AddCustomFieldSettingRequestBuilder data(AddCustomFieldSettingRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddCustomFieldSettingRequestBuilder
         */
        public AddCustomFieldSettingRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for addCustomFieldSetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingCall(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty, _callback);
        }

        private PortfoliosAddCustomFieldSettingRequest buildBodyParams() {
            PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest = new PortfoliosAddCustomFieldSettingRequest();
            portfoliosAddCustomFieldSettingRequest.data(this.data);
            return portfoliosAddCustomFieldSettingRequest;
        }

        /**
         * Execute addCustomFieldSetting request
         * @return PortfoliosAddCustomFieldSettingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosAddCustomFieldSettingResponse execute() throws ApiException {
            PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest = buildBodyParams();
            ApiResponse<PortfoliosAddCustomFieldSettingResponse> localVarResp = addCustomFieldSettingWithHttpInfo(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomFieldSetting request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosAddCustomFieldSettingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosAddCustomFieldSettingResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingWithHttpInfo(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty);
        }

        /**
         * Execute addCustomFieldSetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the custom field to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosAddCustomFieldSettingResponse> _callback) throws ApiException {
            PortfoliosAddCustomFieldSettingRequest portfoliosAddCustomFieldSettingRequest = buildBodyParams();
            return addCustomFieldSettingAsync(portfolioGid, portfoliosAddCustomFieldSettingRequest, optPretty, _callback);
        }
    }

    /**
     * Add a custom field to a portfolio
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosAddCustomFieldSettingRequest Information about the custom field setting. (required)
     * @return AddCustomFieldSettingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the custom field to the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomFieldSettingRequestBuilder addCustomFieldSetting(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new AddCustomFieldSettingRequestBuilder(portfolioGid);
    }
    private okhttp3.Call addMembersToPortfolioCall(String portfolioGid, PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosAddMembersToPortfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/addMembers"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersToPortfolioValidateBeforeCall(String portfolioGid, PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling addMembersToPortfolio(Async)");
        }

        // verify the required parameter 'portfoliosAddMembersToPortfolioRequest' is set
        if (portfoliosAddMembersToPortfolioRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosAddMembersToPortfolioRequest' when calling addMembersToPortfolio(Async)");
        }

        return addMembersToPortfolioCall(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfoliosAddMembersToPortfolioResponse> addMembersToPortfolioWithHttpInfo(String portfolioGid, PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addMembersToPortfolioValidateBeforeCall(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosAddMembersToPortfolioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMembersToPortfolioAsync(String portfolioGid, PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback<PortfoliosAddMembersToPortfolioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersToPortfolioValidateBeforeCall(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosAddMembersToPortfolioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMembersToPortfolioRequestBuilder {
        private final String portfolioGid;
        private AddMembersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddMembersToPortfolioRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddMembersToPortfolioRequestBuilder
         */
        public AddMembersToPortfolioRequestBuilder data(AddMembersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddMembersToPortfolioRequestBuilder
         */
        public AddMembersToPortfolioRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddMembersToPortfolioRequestBuilder
         */
        public AddMembersToPortfolioRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addMembersToPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest = buildBodyParams();
            return addMembersToPortfolioCall(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields, _callback);
        }

        private PortfoliosAddMembersToPortfolioRequest buildBodyParams() {
            PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest = new PortfoliosAddMembersToPortfolioRequest();
            portfoliosAddMembersToPortfolioRequest.data(this.data);
            return portfoliosAddMembersToPortfolioRequest;
        }

        /**
         * Execute addMembersToPortfolio request
         * @return PortfoliosAddMembersToPortfolioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosAddMembersToPortfolioResponse execute() throws ApiException {
            PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest = buildBodyParams();
            ApiResponse<PortfoliosAddMembersToPortfolioResponse> localVarResp = addMembersToPortfolioWithHttpInfo(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMembersToPortfolio request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosAddMembersToPortfolioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosAddMembersToPortfolioResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest = buildBodyParams();
            return addMembersToPortfolioWithHttpInfo(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields);
        }

        /**
         * Execute addMembersToPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added members to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosAddMembersToPortfolioResponse> _callback) throws ApiException {
            PortfoliosAddMembersToPortfolioRequest portfoliosAddMembersToPortfolioRequest = buildBodyParams();
            return addMembersToPortfolioAsync(portfolioGid, portfoliosAddMembersToPortfolioRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add users to a portfolio
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosAddMembersToPortfolioRequest Information about the members being added. (required)
     * @return AddMembersToPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added members to the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersToPortfolioRequestBuilder addMembersToPortfolio(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new AddMembersToPortfolioRequestBuilder(portfolioGid);
    }
    private okhttp3.Call addPortfolioItemCall(String portfolioGid, PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosAddPortfolioItemRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/addItem"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPortfolioItemValidateBeforeCall(String portfolioGid, PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling addPortfolioItem(Async)");
        }

        // verify the required parameter 'portfoliosAddPortfolioItemRequest' is set
        if (portfoliosAddPortfolioItemRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosAddPortfolioItemRequest' when calling addPortfolioItem(Async)");
        }

        return addPortfolioItemCall(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty, _callback);

    }


    private ApiResponse<PortfoliosAddPortfolioItemResponse> addPortfolioItemWithHttpInfo(String portfolioGid, PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = addPortfolioItemValidateBeforeCall(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<PortfoliosAddPortfolioItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPortfolioItemAsync(String portfolioGid, PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest, Boolean optPretty, final ApiCallback<PortfoliosAddPortfolioItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPortfolioItemValidateBeforeCall(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosAddPortfolioItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPortfolioItemRequestBuilder {
        private final String portfolioGid;
        private PortfolioAddItemRequest data;
        private Boolean optPretty;

        private AddPortfolioItemRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddPortfolioItemRequestBuilder
         */
        public AddPortfolioItemRequestBuilder data(PortfolioAddItemRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddPortfolioItemRequestBuilder
         */
        public AddPortfolioItemRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for addPortfolioItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the item to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest = buildBodyParams();
            return addPortfolioItemCall(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty, _callback);
        }

        private PortfoliosAddPortfolioItemRequest buildBodyParams() {
            PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest = new PortfoliosAddPortfolioItemRequest();
            portfoliosAddPortfolioItemRequest.data(this.data);
            return portfoliosAddPortfolioItemRequest;
        }

        /**
         * Execute addPortfolioItem request
         * @return PortfoliosAddPortfolioItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the item to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosAddPortfolioItemResponse execute() throws ApiException {
            PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest = buildBodyParams();
            ApiResponse<PortfoliosAddPortfolioItemResponse> localVarResp = addPortfolioItemWithHttpInfo(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPortfolioItem request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosAddPortfolioItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the item to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosAddPortfolioItemResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest = buildBodyParams();
            return addPortfolioItemWithHttpInfo(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty);
        }

        /**
         * Execute addPortfolioItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added the item to the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosAddPortfolioItemResponse> _callback) throws ApiException {
            PortfoliosAddPortfolioItemRequest portfoliosAddPortfolioItemRequest = buildBodyParams();
            return addPortfolioItemAsync(portfolioGid, portfoliosAddPortfolioItemRequest, optPretty, _callback);
        }
    }

    /**
     * Add a portfolio item
     * Add an item to a portfolio. Returns an empty data block.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosAddPortfolioItemRequest Information about the item being inserted. (required)
     * @return AddPortfolioItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the item to the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public AddPortfolioItemRequestBuilder addPortfolioItem(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new AddPortfolioItemRequestBuilder(portfolioGid);
    }
    private okhttp3.Call createNewPortfolioRecordCall(PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosCreateNewPortfolioRecordRequest;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPortfolioRecordValidateBeforeCall(PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfoliosCreateNewPortfolioRecordRequest' is set
        if (portfoliosCreateNewPortfolioRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosCreateNewPortfolioRecordRequest' when calling createNewPortfolioRecord(Async)");
        }

        return createNewPortfolioRecordCall(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfoliosCreateNewPortfolioRecordResponse> createNewPortfolioRecordWithHttpInfo(PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewPortfolioRecordValidateBeforeCall(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosCreateNewPortfolioRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPortfolioRecordAsync(PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<PortfoliosCreateNewPortfolioRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPortfolioRecordValidateBeforeCall(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosCreateNewPortfolioRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPortfolioRecordRequestBuilder {
        private PortfolioRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewPortfolioRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewPortfolioRecordRequestBuilder
         */
        public CreateNewPortfolioRecordRequestBuilder data(PortfolioRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewPortfolioRecordRequestBuilder
         */
        public CreateNewPortfolioRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewPortfolioRecordRequestBuilder
         */
        public CreateNewPortfolioRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewPortfolioRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest = buildBodyParams();
            return createNewPortfolioRecordCall(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields, _callback);
        }

        private PortfoliosCreateNewPortfolioRecordRequest buildBodyParams() {
            PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest = new PortfoliosCreateNewPortfolioRecordRequest();
            portfoliosCreateNewPortfolioRecordRequest.data(this.data);
            return portfoliosCreateNewPortfolioRecordRequest;
        }

        /**
         * Execute createNewPortfolioRecord request
         * @return PortfoliosCreateNewPortfolioRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosCreateNewPortfolioRecordResponse execute() throws ApiException {
            PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest = buildBodyParams();
            ApiResponse<PortfoliosCreateNewPortfolioRecordResponse> localVarResp = createNewPortfolioRecordWithHttpInfo(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPortfolioRecord request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosCreateNewPortfolioRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosCreateNewPortfolioRecordResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest = buildBodyParams();
            return createNewPortfolioRecordWithHttpInfo(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewPortfolioRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosCreateNewPortfolioRecordResponse> _callback) throws ApiException {
            PortfoliosCreateNewPortfolioRecordRequest portfoliosCreateNewPortfolioRecordRequest = buildBodyParams();
            return createNewPortfolioRecordAsync(portfoliosCreateNewPortfolioRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a portfolio
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * @param portfoliosCreateNewPortfolioRecordRequest The portfolio to create. (required)
     * @return CreateNewPortfolioRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPortfolioRecordRequestBuilder createNewPortfolioRecord() throws IllegalArgumentException {
        return new CreateNewPortfolioRecordRequestBuilder();
    }
    private okhttp3.Call deleteRecordCall(String portfolioGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordValidateBeforeCall(String portfolioGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling deleteRecord(Async)");
        }

        return deleteRecordCall(portfolioGid, optPretty, _callback);

    }


    private ApiResponse<PortfoliosDeleteRecordResponse> deleteRecordWithHttpInfo(String portfolioGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(portfolioGid, optPretty, null);
        Type localVarReturnType = new TypeToken<PortfoliosDeleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRecordAsync(String portfolioGid, Boolean optPretty, final ApiCallback<PortfoliosDeleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(portfolioGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosDeleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRecordRequestBuilder {
        private final String portfolioGid;
        private Boolean optPretty;

        private DeleteRecordRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteRecordRequestBuilder
         */
        public DeleteRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRecordCall(portfolioGid, optPretty, _callback);
        }


        /**
         * Execute deleteRecord request
         * @return PortfoliosDeleteRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosDeleteRecordResponse execute() throws ApiException {
            ApiResponse<PortfoliosDeleteRecordResponse> localVarResp = deleteRecordWithHttpInfo(portfolioGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRecord request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosDeleteRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosDeleteRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteRecordWithHttpInfo(portfolioGid, optPretty);
        }

        /**
         * Execute deleteRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosDeleteRecordResponse> _callback) throws ApiException {
            return deleteRecordAsync(portfolioGid, optPretty, _callback);
        }
    }

    /**
     * Delete a portfolio
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @return DeleteRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRecordRequestBuilder deleteRecord(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new DeleteRecordRequestBuilder(portfolioGid);
    }
    private okhttp3.Call getItemsCall(String portfolioGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/items"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsValidateBeforeCall(String portfolioGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling getItems(Async)");
        }

        return getItemsCall(portfolioGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<PortfoliosGetItemsResponse> getItemsWithHttpInfo(String portfolioGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getItemsValidateBeforeCall(portfolioGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosGetItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getItemsAsync(String portfolioGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<PortfoliosGetItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsValidateBeforeCall(portfolioGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosGetItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetItemsRequestBuilder {
        private final String portfolioGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetItemsRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetItemsRequestBuilder
         */
        public GetItemsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetItemsRequestBuilder
         */
        public GetItemsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetItemsRequestBuilder
         */
        public GetItemsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetItemsRequestBuilder
         */
        public GetItemsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getItemsCall(portfolioGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getItems request
         * @return PortfoliosGetItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s items. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosGetItemsResponse execute() throws ApiException {
            ApiResponse<PortfoliosGetItemsResponse> localVarResp = getItemsWithHttpInfo(portfolioGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getItems request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosGetItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s items. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosGetItemsResponse> executeWithHttpInfo() throws ApiException {
            return getItemsWithHttpInfo(portfolioGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosGetItemsResponse> _callback) throws ApiException {
            return getItemsAsync(portfolioGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get portfolio items
     * Get a list of the items in compact form in a portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @return GetItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s items. </td><td>  -  </td></tr>
     </table>
     */
    public GetItemsRequestBuilder getItems(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new GetItemsRequestBuilder(portfolioGid);
    }
    private okhttp3.Call getRecordCall(String portfolioGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String portfolioGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling getRecord(Async)");
        }

        return getRecordCall(portfolioGid, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfoliosGetRecordResponse> getRecordWithHttpInfo(String portfolioGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(portfolioGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String portfolioGid, Boolean optPretty, List<String> optFields, final ApiCallback<PortfoliosGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(portfolioGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String portfolioGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(portfolioGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecord request
         * @return PortfoliosGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosGetRecordResponse execute() throws ApiException {
            ApiResponse<PortfoliosGetRecordResponse> localVarResp = getRecordWithHttpInfo(portfolioGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(portfolioGid, optPretty, optFields);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(portfolioGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a portfolio
     * Returns the complete portfolio record for a single portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new GetRecordRequestBuilder(portfolioGid);
    }
    private okhttp3.Call listMultiplePortfoliosCall(String workspace, Boolean optPretty, Integer limit, String offset, String owner, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultiplePortfoliosValidateBeforeCall(String workspace, Boolean optPretty, Integer limit, String offset, String owner, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listMultiplePortfolios(Async)");
        }

        return listMultiplePortfoliosCall(workspace, optPretty, limit, offset, owner, optFields, _callback);

    }


    private ApiResponse<PortfoliosListMultiplePortfoliosResponse> listMultiplePortfoliosWithHttpInfo(String workspace, Boolean optPretty, Integer limit, String offset, String owner, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultiplePortfoliosValidateBeforeCall(workspace, optPretty, limit, offset, owner, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosListMultiplePortfoliosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultiplePortfoliosAsync(String workspace, Boolean optPretty, Integer limit, String offset, String owner, List<String> optFields, final ApiCallback<PortfoliosListMultiplePortfoliosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultiplePortfoliosValidateBeforeCall(workspace, optPretty, limit, offset, owner, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosListMultiplePortfoliosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultiplePortfoliosRequestBuilder {
        private final String workspace;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String owner;
        private List<String> optFields;

        private ListMultiplePortfoliosRequestBuilder(String workspace) {
            this.workspace = workspace;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultiplePortfoliosRequestBuilder
         */
        public ListMultiplePortfoliosRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultiplePortfoliosRequestBuilder
         */
        public ListMultiplePortfoliosRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultiplePortfoliosRequestBuilder
         */
        public ListMultiplePortfoliosRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set owner
         * @param owner The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned. (optional)
         * @return ListMultiplePortfoliosRequestBuilder
         */
        public ListMultiplePortfoliosRequestBuilder owner(String owner) {
            this.owner = owner;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultiplePortfoliosRequestBuilder
         */
        public ListMultiplePortfoliosRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultiplePortfolios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolios. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultiplePortfoliosCall(workspace, optPretty, limit, offset, owner, optFields, _callback);
        }


        /**
         * Execute listMultiplePortfolios request
         * @return PortfoliosListMultiplePortfoliosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolios. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosListMultiplePortfoliosResponse execute() throws ApiException {
            ApiResponse<PortfoliosListMultiplePortfoliosResponse> localVarResp = listMultiplePortfoliosWithHttpInfo(workspace, optPretty, limit, offset, owner, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultiplePortfolios request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosListMultiplePortfoliosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolios. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosListMultiplePortfoliosResponse> executeWithHttpInfo() throws ApiException {
            return listMultiplePortfoliosWithHttpInfo(workspace, optPretty, limit, offset, owner, optFields);
        }

        /**
         * Execute listMultiplePortfolios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved portfolios. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosListMultiplePortfoliosResponse> _callback) throws ApiException {
            return listMultiplePortfoliosAsync(workspace, optPretty, limit, offset, owner, optFields, _callback);
        }
    }

    /**
     * Get multiple portfolios
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     * @param workspace The workspace or organization to filter portfolios on. (required)
     * @return ListMultiplePortfoliosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolios. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultiplePortfoliosRequestBuilder listMultiplePortfolios(String workspace) throws IllegalArgumentException {
        if (workspace == null) throw new IllegalArgumentException("\"workspace\" is required but got null");
            

        return new ListMultiplePortfoliosRequestBuilder(workspace);
    }
    private okhttp3.Call removeCustomFieldSettingCall(String portfolioGid, PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosRemoveCustomFieldSettingRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/removeCustomFieldSetting"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomFieldSettingValidateBeforeCall(String portfolioGid, PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling removeCustomFieldSetting(Async)");
        }

        // verify the required parameter 'portfoliosRemoveCustomFieldSettingRequest' is set
        if (portfoliosRemoveCustomFieldSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosRemoveCustomFieldSettingRequest' when calling removeCustomFieldSetting(Async)");
        }

        return removeCustomFieldSettingCall(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty, _callback);

    }


    private ApiResponse<PortfoliosRemoveCustomFieldSettingResponse> removeCustomFieldSettingWithHttpInfo(String portfolioGid, PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeCustomFieldSettingValidateBeforeCall(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveCustomFieldSettingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCustomFieldSettingAsync(String portfolioGid, PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest, Boolean optPretty, final ApiCallback<PortfoliosRemoveCustomFieldSettingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomFieldSettingValidateBeforeCall(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveCustomFieldSettingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCustomFieldSettingRequestBuilder {
        private final String portfolioGid;
        private RemoveCustomFieldSettingRequest data;
        private Boolean optPretty;

        private RemoveCustomFieldSettingRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveCustomFieldSettingRequestBuilder
         */
        public RemoveCustomFieldSettingRequestBuilder data(RemoveCustomFieldSettingRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveCustomFieldSettingRequestBuilder
         */
        public RemoveCustomFieldSettingRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeCustomFieldSetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest = buildBodyParams();
            return removeCustomFieldSettingCall(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty, _callback);
        }

        private PortfoliosRemoveCustomFieldSettingRequest buildBodyParams() {
            PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest = new PortfoliosRemoveCustomFieldSettingRequest();
            portfoliosRemoveCustomFieldSettingRequest.data(this.data);
            return portfoliosRemoveCustomFieldSettingRequest;
        }

        /**
         * Execute removeCustomFieldSetting request
         * @return PortfoliosRemoveCustomFieldSettingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosRemoveCustomFieldSettingResponse execute() throws ApiException {
            PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest = buildBodyParams();
            ApiResponse<PortfoliosRemoveCustomFieldSettingResponse> localVarResp = removeCustomFieldSettingWithHttpInfo(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCustomFieldSetting request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosRemoveCustomFieldSettingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosRemoveCustomFieldSettingResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest = buildBodyParams();
            return removeCustomFieldSettingWithHttpInfo(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty);
        }

        /**
         * Execute removeCustomFieldSetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the custom field from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosRemoveCustomFieldSettingResponse> _callback) throws ApiException {
            PortfoliosRemoveCustomFieldSettingRequest portfoliosRemoveCustomFieldSettingRequest = buildBodyParams();
            return removeCustomFieldSettingAsync(portfolioGid, portfoliosRemoveCustomFieldSettingRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a custom field from a portfolio
     * Removes a custom field setting from a portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosRemoveCustomFieldSettingRequest Information about the custom field setting being removed. (required)
     * @return RemoveCustomFieldSettingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the custom field from the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomFieldSettingRequestBuilder removeCustomFieldSetting(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new RemoveCustomFieldSettingRequestBuilder(portfolioGid);
    }
    private okhttp3.Call removeItemFromPortfolioCall(String portfolioGid, PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosRemoveItemFromPortfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/removeItem"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemFromPortfolioValidateBeforeCall(String portfolioGid, PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling removeItemFromPortfolio(Async)");
        }

        // verify the required parameter 'portfoliosRemoveItemFromPortfolioRequest' is set
        if (portfoliosRemoveItemFromPortfolioRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosRemoveItemFromPortfolioRequest' when calling removeItemFromPortfolio(Async)");
        }

        return removeItemFromPortfolioCall(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty, _callback);

    }


    private ApiResponse<PortfoliosRemoveItemFromPortfolioResponse> removeItemFromPortfolioWithHttpInfo(String portfolioGid, PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeItemFromPortfolioValidateBeforeCall(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveItemFromPortfolioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeItemFromPortfolioAsync(String portfolioGid, PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest, Boolean optPretty, final ApiCallback<PortfoliosRemoveItemFromPortfolioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemFromPortfolioValidateBeforeCall(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveItemFromPortfolioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveItemFromPortfolioRequestBuilder {
        private final String portfolioGid;
        private PortfolioRemoveItemRequest data;
        private Boolean optPretty;

        private RemoveItemFromPortfolioRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveItemFromPortfolioRequestBuilder
         */
        public RemoveItemFromPortfolioRequestBuilder data(PortfolioRemoveItemRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveItemFromPortfolioRequestBuilder
         */
        public RemoveItemFromPortfolioRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeItemFromPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the item from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest = buildBodyParams();
            return removeItemFromPortfolioCall(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty, _callback);
        }

        private PortfoliosRemoveItemFromPortfolioRequest buildBodyParams() {
            PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest = new PortfoliosRemoveItemFromPortfolioRequest();
            portfoliosRemoveItemFromPortfolioRequest.data(this.data);
            return portfoliosRemoveItemFromPortfolioRequest;
        }

        /**
         * Execute removeItemFromPortfolio request
         * @return PortfoliosRemoveItemFromPortfolioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the item from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosRemoveItemFromPortfolioResponse execute() throws ApiException {
            PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest = buildBodyParams();
            ApiResponse<PortfoliosRemoveItemFromPortfolioResponse> localVarResp = removeItemFromPortfolioWithHttpInfo(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeItemFromPortfolio request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosRemoveItemFromPortfolioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the item from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosRemoveItemFromPortfolioResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest = buildBodyParams();
            return removeItemFromPortfolioWithHttpInfo(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty);
        }

        /**
         * Execute removeItemFromPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the item from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosRemoveItemFromPortfolioResponse> _callback) throws ApiException {
            PortfoliosRemoveItemFromPortfolioRequest portfoliosRemoveItemFromPortfolioRequest = buildBodyParams();
            return removeItemFromPortfolioAsync(portfolioGid, portfoliosRemoveItemFromPortfolioRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a portfolio item
     * Remove an item from a portfolio. Returns an empty data block.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosRemoveItemFromPortfolioRequest Information about the item being removed. (required)
     * @return RemoveItemFromPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the item from the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveItemFromPortfolioRequestBuilder removeItemFromPortfolio(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new RemoveItemFromPortfolioRequestBuilder(portfolioGid);
    }
    private okhttp3.Call removeMembersFromPortfolioCall(String portfolioGid, PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosRemoveMembersFromPortfolioRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/removeMembers"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMembersFromPortfolioValidateBeforeCall(String portfolioGid, PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling removeMembersFromPortfolio(Async)");
        }

        // verify the required parameter 'portfoliosRemoveMembersFromPortfolioRequest' is set
        if (portfoliosRemoveMembersFromPortfolioRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosRemoveMembersFromPortfolioRequest' when calling removeMembersFromPortfolio(Async)");
        }

        return removeMembersFromPortfolioCall(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfoliosRemoveMembersFromPortfolioResponse> removeMembersFromPortfolioWithHttpInfo(String portfolioGid, PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeMembersFromPortfolioValidateBeforeCall(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveMembersFromPortfolioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMembersFromPortfolioAsync(String portfolioGid, PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest, Boolean optPretty, List<String> optFields, final ApiCallback<PortfoliosRemoveMembersFromPortfolioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMembersFromPortfolioValidateBeforeCall(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosRemoveMembersFromPortfolioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMembersFromPortfolioRequestBuilder {
        private final String portfolioGid;
        private RemoveMembersRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private RemoveMembersFromPortfolioRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveMembersFromPortfolioRequestBuilder
         */
        public RemoveMembersFromPortfolioRequestBuilder data(RemoveMembersRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveMembersFromPortfolioRequestBuilder
         */
        public RemoveMembersFromPortfolioRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return RemoveMembersFromPortfolioRequestBuilder
         */
        public RemoveMembersFromPortfolioRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for removeMembersFromPortfolio
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest = buildBodyParams();
            return removeMembersFromPortfolioCall(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields, _callback);
        }

        private PortfoliosRemoveMembersFromPortfolioRequest buildBodyParams() {
            PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest = new PortfoliosRemoveMembersFromPortfolioRequest();
            portfoliosRemoveMembersFromPortfolioRequest.data(this.data);
            return portfoliosRemoveMembersFromPortfolioRequest;
        }

        /**
         * Execute removeMembersFromPortfolio request
         * @return PortfoliosRemoveMembersFromPortfolioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosRemoveMembersFromPortfolioResponse execute() throws ApiException {
            PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest = buildBodyParams();
            ApiResponse<PortfoliosRemoveMembersFromPortfolioResponse> localVarResp = removeMembersFromPortfolioWithHttpInfo(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMembersFromPortfolio request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosRemoveMembersFromPortfolioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosRemoveMembersFromPortfolioResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest = buildBodyParams();
            return removeMembersFromPortfolioWithHttpInfo(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields);
        }

        /**
         * Execute removeMembersFromPortfolio request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully removed the members from the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosRemoveMembersFromPortfolioResponse> _callback) throws ApiException {
            PortfoliosRemoveMembersFromPortfolioRequest portfoliosRemoveMembersFromPortfolioRequest = buildBodyParams();
            return removeMembersFromPortfolioAsync(portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Remove users from a portfolio
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosRemoveMembersFromPortfolioRequest Information about the members being removed. (required)
     * @return RemoveMembersFromPortfolioRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the members from the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMembersFromPortfolioRequestBuilder removeMembersFromPortfolio(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new RemoveMembersFromPortfolioRequestBuilder(portfolioGid);
    }
    private okhttp3.Call updatePortfolioRecordCall(String portfolioGid, PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = portfoliosUpdatePortfolioRecordRequest;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePortfolioRecordValidateBeforeCall(String portfolioGid, PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling updatePortfolioRecord(Async)");
        }

        // verify the required parameter 'portfoliosUpdatePortfolioRecordRequest' is set
        if (portfoliosUpdatePortfolioRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'portfoliosUpdatePortfolioRecordRequest' when calling updatePortfolioRecord(Async)");
        }

        return updatePortfolioRecordCall(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<PortfoliosUpdatePortfolioRecordResponse> updatePortfolioRecordWithHttpInfo(String portfolioGid, PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updatePortfolioRecordValidateBeforeCall(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<PortfoliosUpdatePortfolioRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePortfolioRecordAsync(String portfolioGid, PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<PortfoliosUpdatePortfolioRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePortfolioRecordValidateBeforeCall(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<PortfoliosUpdatePortfolioRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePortfolioRecordRequestBuilder {
        private final String portfolioGid;
        private PortfolioRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdatePortfolioRecordRequestBuilder(String portfolioGid) {
            this.portfolioGid = portfolioGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdatePortfolioRecordRequestBuilder
         */
        public UpdatePortfolioRecordRequestBuilder data(PortfolioRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdatePortfolioRecordRequestBuilder
         */
        public UpdatePortfolioRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdatePortfolioRecordRequestBuilder
         */
        public UpdatePortfolioRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updatePortfolioRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest = buildBodyParams();
            return updatePortfolioRecordCall(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields, _callback);
        }

        private PortfoliosUpdatePortfolioRecordRequest buildBodyParams() {
            PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest = new PortfoliosUpdatePortfolioRecordRequest();
            portfoliosUpdatePortfolioRecordRequest.data(this.data);
            return portfoliosUpdatePortfolioRecordRequest;
        }

        /**
         * Execute updatePortfolioRecord request
         * @return PortfoliosUpdatePortfolioRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public PortfoliosUpdatePortfolioRecordResponse execute() throws ApiException {
            PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest = buildBodyParams();
            ApiResponse<PortfoliosUpdatePortfolioRecordResponse> localVarResp = updatePortfolioRecordWithHttpInfo(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePortfolioRecord request with HTTP info returned
         * @return ApiResponse&lt;PortfoliosUpdatePortfolioRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PortfoliosUpdatePortfolioRecordResponse> executeWithHttpInfo() throws ApiException {
            PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest = buildBodyParams();
            return updatePortfolioRecordWithHttpInfo(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updatePortfolioRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the portfolio. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PortfoliosUpdatePortfolioRecordResponse> _callback) throws ApiException {
            PortfoliosUpdatePortfolioRecordRequest portfoliosUpdatePortfolioRecordRequest = buildBodyParams();
            return updatePortfolioRecordAsync(portfolioGid, portfoliosUpdatePortfolioRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a portfolio
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param portfoliosUpdatePortfolioRecordRequest The updated fields for the portfolio. (required)
     * @return UpdatePortfolioRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the portfolio. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePortfolioRecordRequestBuilder updatePortfolioRecord(String portfolioGid) throws IllegalArgumentException {
        if (portfolioGid == null) throw new IllegalArgumentException("\"portfolioGid\" is required but got null");
            

        return new UpdatePortfolioRecordRequestBuilder(portfolioGid);
    }
}
