/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkspaceMembershipsGetRecordByIdResponse;
import com.konfigthis.client.model.WorkspaceMembershipsGetUserMembershipsResponse;
import com.konfigthis.client.model.WorkspaceMembershipsListForWorkspaceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkspaceMembershipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspaceMembershipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspaceMembershipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRecordByIdCall(String workspaceMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspace_memberships/{workspace_membership_gid}"
            .replace("{" + "workspace_membership_gid" + "}", localVarApiClient.escapeString(workspaceMembershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordByIdValidateBeforeCall(String workspaceMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceMembershipGid' is set
        if (workspaceMembershipGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceMembershipGid' when calling getRecordById(Async)");
        }

        return getRecordByIdCall(workspaceMembershipGid, optPretty, optFields, _callback);

    }


    private ApiResponse<WorkspaceMembershipsGetRecordByIdResponse> getRecordByIdWithHttpInfo(String workspaceMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(workspaceMembershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsGetRecordByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordByIdAsync(String workspaceMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<WorkspaceMembershipsGetRecordByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordByIdValidateBeforeCall(workspaceMembershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsGetRecordByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordByIdRequestBuilder {
        private final String workspaceMembershipGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetRecordByIdRequestBuilder(String workspaceMembershipGid) {
            this.workspaceMembershipGid = workspaceMembershipGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetRecordByIdRequestBuilder
         */
        public GetRecordByIdRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getRecordById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordByIdCall(workspaceMembershipGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getRecordById request
         * @return WorkspaceMembershipsGetRecordByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace membership. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceMembershipsGetRecordByIdResponse execute() throws ApiException {
            ApiResponse<WorkspaceMembershipsGetRecordByIdResponse> localVarResp = getRecordByIdWithHttpInfo(workspaceMembershipGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecordById request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceMembershipsGetRecordByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace membership. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceMembershipsGetRecordByIdResponse> executeWithHttpInfo() throws ApiException {
            return getRecordByIdWithHttpInfo(workspaceMembershipGid, optPretty, optFields);
        }

        /**
         * Execute getRecordById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace membership. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceMembershipsGetRecordByIdResponse> _callback) throws ApiException {
            return getRecordByIdAsync(workspaceMembershipGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a workspace membership
     * Returns the complete workspace record for a single workspace membership.
     * @param workspaceMembershipGid  (required)
     * @return GetRecordByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested workspace membership. </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordByIdRequestBuilder getRecordById(String workspaceMembershipGid) throws IllegalArgumentException {
        if (workspaceMembershipGid == null) throw new IllegalArgumentException("\"workspaceMembershipGid\" is required but got null");
            

        return new GetRecordByIdRequestBuilder(workspaceMembershipGid);
    }
    private okhttp3.Call getUserMembershipsCall(String userGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_gid}/workspace_memberships"
            .replace("{" + "user_gid" + "}", localVarApiClient.escapeString(userGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserMembershipsValidateBeforeCall(String userGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGid' is set
        if (userGid == null) {
            throw new ApiException("Missing the required parameter 'userGid' when calling getUserMemberships(Async)");
        }

        return getUserMembershipsCall(userGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<WorkspaceMembershipsGetUserMembershipsResponse> getUserMembershipsWithHttpInfo(String userGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(userGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsGetUserMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserMembershipsAsync(String userGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<WorkspaceMembershipsGetUserMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserMembershipsValidateBeforeCall(userGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsGetUserMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserMembershipsRequestBuilder {
        private final String userGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetUserMembershipsRequestBuilder(String userGid) {
            this.userGid = userGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetUserMembershipsRequestBuilder
         */
        public GetUserMembershipsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getUserMemberships
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested user&#39;s workspace memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserMembershipsCall(userGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getUserMemberships request
         * @return WorkspaceMembershipsGetUserMembershipsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested user&#39;s workspace memberships. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceMembershipsGetUserMembershipsResponse execute() throws ApiException {
            ApiResponse<WorkspaceMembershipsGetUserMembershipsResponse> localVarResp = getUserMembershipsWithHttpInfo(userGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserMemberships request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceMembershipsGetUserMembershipsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested user&#39;s workspace memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceMembershipsGetUserMembershipsResponse> executeWithHttpInfo() throws ApiException {
            return getUserMembershipsWithHttpInfo(userGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getUserMemberships request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested user&#39;s workspace memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceMembershipsGetUserMembershipsResponse> _callback) throws ApiException {
            return getUserMembershipsAsync(userGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get workspace memberships for a user
     * Returns the compact workspace membership records for the user.
     * @param userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (required)
     * @return GetUserMembershipsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested user&#39;s workspace memberships. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserMembershipsRequestBuilder getUserMemberships(String userGid) throws IllegalArgumentException {
        if (userGid == null) throw new IllegalArgumentException("\"userGid\" is required but got null");
            

        return new GetUserMembershipsRequestBuilder(userGid);
    }
    private okhttp3.Call listForWorkspaceCall(String workspaceGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/workspace_memberships"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForWorkspaceValidateBeforeCall(String workspaceGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling listForWorkspace(Async)");
        }

        return listForWorkspaceCall(workspaceGid, user, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<WorkspaceMembershipsListForWorkspaceResponse> listForWorkspaceWithHttpInfo(String workspaceGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listForWorkspaceValidateBeforeCall(workspaceGid, user, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsListForWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForWorkspaceAsync(String workspaceGid, String user, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<WorkspaceMembershipsListForWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForWorkspaceValidateBeforeCall(workspaceGid, user, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceMembershipsListForWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForWorkspaceRequestBuilder {
        private final String workspaceGid;
        private String user;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListForWorkspaceRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set user
         * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
         * @return ListForWorkspaceRequestBuilder
         */
        public ListForWorkspaceRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListForWorkspaceRequestBuilder
         */
        public ListForWorkspaceRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListForWorkspaceRequestBuilder
         */
        public ListForWorkspaceRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListForWorkspaceRequestBuilder
         */
        public ListForWorkspaceRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListForWorkspaceRequestBuilder
         */
        public ListForWorkspaceRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listForWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForWorkspaceCall(workspaceGid, user, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listForWorkspace request
         * @return WorkspaceMembershipsListForWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public WorkspaceMembershipsListForWorkspaceResponse execute() throws ApiException {
            ApiResponse<WorkspaceMembershipsListForWorkspaceResponse> localVarResp = listForWorkspaceWithHttpInfo(workspaceGid, user, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForWorkspace request with HTTP info returned
         * @return ApiResponse&lt;WorkspaceMembershipsListForWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkspaceMembershipsListForWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            return listForWorkspaceWithHttpInfo(workspaceGid, user, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listForWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s memberships. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkspaceMembershipsListForWorkspaceResponse> _callback) throws ApiException {
            return listForWorkspaceAsync(workspaceGid, user, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get the workspace memberships for a workspace
     * Returns the compact workspace membership records for the workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return ListForWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested workspace&#39;s memberships. </td><td>  -  </td></tr>
     </table>
     */
    public ListForWorkspaceRequestBuilder listForWorkspace(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new ListForWorkspaceRequestBuilder(workspaceGid);
    }
}
