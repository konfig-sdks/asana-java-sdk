/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TeamAddUserRequest;
import com.konfigthis.client.model.TeamRemoveUserRequest;
import com.konfigthis.client.model.TeamRequest;
import com.konfigthis.client.model.TeamsAddUserToTeamRequest;
import com.konfigthis.client.model.TeamsAddUserToTeamResponse;
import com.konfigthis.client.model.TeamsCreateTeamRecordRequest;
import com.konfigthis.client.model.TeamsCreateTeamRecordResponse;
import com.konfigthis.client.model.TeamsGetTeamRecordResponse;
import com.konfigthis.client.model.TeamsGetUserTeamsResponse;
import com.konfigthis.client.model.TeamsListWorkspaceTeamsResponse;
import com.konfigthis.client.model.TeamsRemoveUserFromTeamRequest;
import com.konfigthis.client.model.TeamsRemoveUserFromTeamResponse;
import com.konfigthis.client.model.TeamsUpdateTeamRecordRequest;
import com.konfigthis.client.model.TeamsUpdateTeamRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserToTeamCall(String teamGid, TeamsAddUserToTeamRequest teamsAddUserToTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddUserToTeamRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/addUser"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToTeamValidateBeforeCall(String teamGid, TeamsAddUserToTeamRequest teamsAddUserToTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling addUserToTeam(Async)");
        }

        // verify the required parameter 'teamsAddUserToTeamRequest' is set
        if (teamsAddUserToTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsAddUserToTeamRequest' when calling addUserToTeam(Async)");
        }

        return addUserToTeamCall(teamGid, teamsAddUserToTeamRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TeamsAddUserToTeamResponse> addUserToTeamWithHttpInfo(String teamGid, TeamsAddUserToTeamRequest teamsAddUserToTeamRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addUserToTeamValidateBeforeCall(teamGid, teamsAddUserToTeamRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsAddUserToTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserToTeamAsync(String teamGid, TeamsAddUserToTeamRequest teamsAddUserToTeamRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TeamsAddUserToTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToTeamValidateBeforeCall(teamGid, teamsAddUserToTeamRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsAddUserToTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserToTeamRequestBuilder {
        private final String teamGid;
        private TeamAddUserRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddUserToTeamRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddUserToTeamRequestBuilder
         */
        public AddUserToTeamRequestBuilder data(TeamAddUserRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddUserToTeamRequestBuilder
         */
        public AddUserToTeamRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddUserToTeamRequestBuilder
         */
        public AddUserToTeamRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addUserToTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added user to the team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsAddUserToTeamRequest teamsAddUserToTeamRequest = buildBodyParams();
            return addUserToTeamCall(teamGid, teamsAddUserToTeamRequest, optPretty, optFields, _callback);
        }

        private TeamsAddUserToTeamRequest buildBodyParams() {
            TeamsAddUserToTeamRequest teamsAddUserToTeamRequest = new TeamsAddUserToTeamRequest();
            teamsAddUserToTeamRequest.data(this.data);
            return teamsAddUserToTeamRequest;
        }

        /**
         * Execute addUserToTeam request
         * @return TeamsAddUserToTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added user to the team. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsAddUserToTeamResponse execute() throws ApiException {
            TeamsAddUserToTeamRequest teamsAddUserToTeamRequest = buildBodyParams();
            ApiResponse<TeamsAddUserToTeamResponse> localVarResp = addUserToTeamWithHttpInfo(teamGid, teamsAddUserToTeamRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUserToTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamsAddUserToTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added user to the team. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsAddUserToTeamResponse> executeWithHttpInfo() throws ApiException {
            TeamsAddUserToTeamRequest teamsAddUserToTeamRequest = buildBodyParams();
            return addUserToTeamWithHttpInfo(teamGid, teamsAddUserToTeamRequest, optPretty, optFields);
        }

        /**
         * Execute addUserToTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added user to the team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsAddUserToTeamResponse> _callback) throws ApiException {
            TeamsAddUserToTeamRequest teamsAddUserToTeamRequest = buildBodyParams();
            return addUserToTeamAsync(teamGid, teamsAddUserToTeamRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Add a user to a team
     * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
     * @param teamGid Globally unique identifier for the team. (required)
     * @param teamsAddUserToTeamRequest The user to add to the team. (required)
     * @return AddUserToTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added user to the team. </td><td>  -  </td></tr>
     </table>
     */
    public AddUserToTeamRequestBuilder addUserToTeam(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new AddUserToTeamRequestBuilder(teamGid);
    }
    private okhttp3.Call createTeamRecordCall(TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateTeamRecordRequest;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamRecordValidateBeforeCall(TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamsCreateTeamRecordRequest' is set
        if (teamsCreateTeamRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateTeamRecordRequest' when calling createTeamRecord(Async)");
        }

        return createTeamRecordCall(teamsCreateTeamRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TeamsCreateTeamRecordResponse> createTeamRecordWithHttpInfo(TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createTeamRecordValidateBeforeCall(teamsCreateTeamRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsCreateTeamRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamRecordAsync(TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TeamsCreateTeamRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamRecordValidateBeforeCall(teamsCreateTeamRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsCreateTeamRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamRecordRequestBuilder {
        private TeamRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateTeamRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateTeamRecordRequestBuilder
         */
        public CreateTeamRecordRequestBuilder data(TeamRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateTeamRecordRequestBuilder
         */
        public CreateTeamRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateTeamRecordRequestBuilder
         */
        public CreateTeamRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createTeamRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest = buildBodyParams();
            return createTeamRecordCall(teamsCreateTeamRecordRequest, optPretty, optFields, _callback);
        }

        private TeamsCreateTeamRecordRequest buildBodyParams() {
            TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest = new TeamsCreateTeamRecordRequest();
            teamsCreateTeamRecordRequest.data(this.data);
            return teamsCreateTeamRecordRequest;
        }

        /**
         * Execute createTeamRecord request
         * @return TeamsCreateTeamRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new team. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsCreateTeamRecordResponse execute() throws ApiException {
            TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest = buildBodyParams();
            ApiResponse<TeamsCreateTeamRecordResponse> localVarResp = createTeamRecordWithHttpInfo(teamsCreateTeamRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeamRecord request with HTTP info returned
         * @return ApiResponse&lt;TeamsCreateTeamRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new team. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsCreateTeamRecordResponse> executeWithHttpInfo() throws ApiException {
            TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest = buildBodyParams();
            return createTeamRecordWithHttpInfo(teamsCreateTeamRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createTeamRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsCreateTeamRecordResponse> _callback) throws ApiException {
            TeamsCreateTeamRecordRequest teamsCreateTeamRecordRequest = buildBodyParams();
            return createTeamRecordAsync(teamsCreateTeamRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a team
     * Creates a team within the current workspace.
     * @param teamsCreateTeamRecordRequest The team to create. (required)
     * @return CreateTeamRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new team. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamRecordRequestBuilder createTeamRecord() throws IllegalArgumentException {
        return new CreateTeamRecordRequestBuilder();
    }
    private okhttp3.Call getTeamRecordCall(String teamGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamRecordValidateBeforeCall(String teamGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling getTeamRecord(Async)");
        }

        return getTeamRecordCall(teamGid, optPretty, optFields, _callback);

    }


    private ApiResponse<TeamsGetTeamRecordResponse> getTeamRecordWithHttpInfo(String teamGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTeamRecordValidateBeforeCall(teamGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsGetTeamRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamRecordAsync(String teamGid, Boolean optPretty, List<String> optFields, final ApiCallback<TeamsGetTeamRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamRecordValidateBeforeCall(teamGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetTeamRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeamRecordRequestBuilder {
        private final String teamGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetTeamRecordRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTeamRecordRequestBuilder
         */
        public GetTeamRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTeamRecordRequestBuilder
         */
        public GetTeamRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTeamRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamRecordCall(teamGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getTeamRecord request
         * @return TeamsGetTeamRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single team. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsGetTeamRecordResponse execute() throws ApiException {
            ApiResponse<TeamsGetTeamRecordResponse> localVarResp = getTeamRecordWithHttpInfo(teamGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeamRecord request with HTTP info returned
         * @return ApiResponse&lt;TeamsGetTeamRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single team. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsGetTeamRecordResponse> executeWithHttpInfo() throws ApiException {
            return getTeamRecordWithHttpInfo(teamGid, optPretty, optFields);
        }

        /**
         * Execute getTeamRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsGetTeamRecordResponse> _callback) throws ApiException {
            return getTeamRecordAsync(teamGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a team
     * Returns the full record for a single team.
     * @param teamGid Globally unique identifier for the team. (required)
     * @return GetTeamRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single team. </td><td>  -  </td></tr>
     </table>
     */
    public GetTeamRecordRequestBuilder getTeamRecord(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new GetTeamRecordRequestBuilder(teamGid);
    }
    private okhttp3.Call getUserTeamsCall(String userGid, String organization, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_gid}/teams"
            .replace("{" + "user_gid" + "}", localVarApiClient.escapeString(userGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTeamsValidateBeforeCall(String userGid, String organization, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGid' is set
        if (userGid == null) {
            throw new ApiException("Missing the required parameter 'userGid' when calling getUserTeams(Async)");
        }

        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getUserTeams(Async)");
        }

        return getUserTeamsCall(userGid, organization, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TeamsGetUserTeamsResponse> getUserTeamsWithHttpInfo(String userGid, String organization, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getUserTeamsValidateBeforeCall(userGid, organization, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsGetUserTeamsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserTeamsAsync(String userGid, String organization, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TeamsGetUserTeamsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserTeamsValidateBeforeCall(userGid, organization, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetUserTeamsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserTeamsRequestBuilder {
        private final String userGid;
        private final String organization;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetUserTeamsRequestBuilder(String userGid, String organization) {
            this.userGid = userGid;
            this.organization = organization;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetUserTeamsRequestBuilder
         */
        public GetUserTeamsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetUserTeamsRequestBuilder
         */
        public GetUserTeamsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetUserTeamsRequestBuilder
         */
        public GetUserTeamsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetUserTeamsRequestBuilder
         */
        public GetUserTeamsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getUserTeams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace to which the given user is assigned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserTeamsCall(userGid, organization, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getUserTeams request
         * @return TeamsGetUserTeamsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace to which the given user is assigned. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsGetUserTeamsResponse execute() throws ApiException {
            ApiResponse<TeamsGetUserTeamsResponse> localVarResp = getUserTeamsWithHttpInfo(userGid, organization, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserTeams request with HTTP info returned
         * @return ApiResponse&lt;TeamsGetUserTeamsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace to which the given user is assigned. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsGetUserTeamsResponse> executeWithHttpInfo() throws ApiException {
            return getUserTeamsWithHttpInfo(userGid, organization, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getUserTeams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace to which the given user is assigned. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsGetUserTeamsResponse> _callback) throws ApiException {
            return getUserTeamsAsync(userGid, organization, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get teams for a user
     * Returns the compact records for all teams to which the given user is assigned.
     * @param userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (required)
     * @param organization The workspace or organization to filter teams on. (required)
     * @return GetUserTeamsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace to which the given user is assigned. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserTeamsRequestBuilder getUserTeams(String userGid, String organization) throws IllegalArgumentException {
        if (userGid == null) throw new IllegalArgumentException("\"userGid\" is required but got null");
            

        if (organization == null) throw new IllegalArgumentException("\"organization\" is required but got null");
            

        return new GetUserTeamsRequestBuilder(userGid, organization);
    }
    private okhttp3.Call listWorkspaceTeamsCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/teams"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceTeamsValidateBeforeCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling listWorkspaceTeams(Async)");
        }

        return listWorkspaceTeamsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<TeamsListWorkspaceTeamsResponse> listWorkspaceTeamsWithHttpInfo(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceTeamsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsListWorkspaceTeamsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspaceTeamsAsync(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<TeamsListWorkspaceTeamsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceTeamsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsListWorkspaceTeamsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkspaceTeamsRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListWorkspaceTeamsRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListWorkspaceTeamsRequestBuilder
         */
        public ListWorkspaceTeamsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListWorkspaceTeamsRequestBuilder
         */
        public ListWorkspaceTeamsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListWorkspaceTeamsRequestBuilder
         */
        public ListWorkspaceTeamsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListWorkspaceTeamsRequestBuilder
         */
        public ListWorkspaceTeamsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listWorkspaceTeams
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace accessible to the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspaceTeamsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listWorkspaceTeams request
         * @return TeamsListWorkspaceTeamsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace accessible to the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsListWorkspaceTeamsResponse execute() throws ApiException {
            ApiResponse<TeamsListWorkspaceTeamsResponse> localVarResp = listWorkspaceTeamsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkspaceTeams request with HTTP info returned
         * @return ApiResponse&lt;TeamsListWorkspaceTeamsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace accessible to the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsListWorkspaceTeamsResponse> executeWithHttpInfo() throws ApiException {
            return listWorkspaceTeamsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listWorkspaceTeams request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace accessible to the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsListWorkspaceTeamsResponse> _callback) throws ApiException {
            return listWorkspaceTeamsAsync(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get teams in a workspace
     * Returns the compact records for all teams in the workspace visible to the authorized user.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return ListWorkspaceTeamsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the team records for all teams in the organization or workspace accessible to the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkspaceTeamsRequestBuilder listWorkspaceTeams(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new ListWorkspaceTeamsRequestBuilder(workspaceGid);
    }
    private okhttp3.Call removeUserFromTeamCall(String teamGid, TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsRemoveUserFromTeamRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}/removeUser"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromTeamValidateBeforeCall(String teamGid, TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling removeUserFromTeam(Async)");
        }

        // verify the required parameter 'teamsRemoveUserFromTeamRequest' is set
        if (teamsRemoveUserFromTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsRemoveUserFromTeamRequest' when calling removeUserFromTeam(Async)");
        }

        return removeUserFromTeamCall(teamGid, teamsRemoveUserFromTeamRequest, optPretty, _callback);

    }


    private ApiResponse<TeamsRemoveUserFromTeamResponse> removeUserFromTeamWithHttpInfo(String teamGid, TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromTeamValidateBeforeCall(teamGid, teamsRemoveUserFromTeamRequest, optPretty, null);
        Type localVarReturnType = new TypeToken<TeamsRemoveUserFromTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserFromTeamAsync(String teamGid, TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest, Boolean optPretty, final ApiCallback<TeamsRemoveUserFromTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromTeamValidateBeforeCall(teamGid, teamsRemoveUserFromTeamRequest, optPretty, _callback);
        Type localVarReturnType = new TypeToken<TeamsRemoveUserFromTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserFromTeamRequestBuilder {
        private final String teamGid;
        private TeamRemoveUserRequest data;
        private Boolean optPretty;

        private RemoveUserFromTeamRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return RemoveUserFromTeamRequestBuilder
         */
        public RemoveUserFromTeamRequestBuilder data(TeamRemoveUserRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveUserFromTeamRequestBuilder
         */
        public RemoveUserFromTeamRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeUserFromTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty data record </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest = buildBodyParams();
            return removeUserFromTeamCall(teamGid, teamsRemoveUserFromTeamRequest, optPretty, _callback);
        }

        private TeamsRemoveUserFromTeamRequest buildBodyParams() {
            TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest = new TeamsRemoveUserFromTeamRequest();
            teamsRemoveUserFromTeamRequest.data(this.data);
            return teamsRemoveUserFromTeamRequest;
        }

        /**
         * Execute removeUserFromTeam request
         * @return TeamsRemoveUserFromTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty data record </td><td>  -  </td></tr>
         </table>
         */
        public TeamsRemoveUserFromTeamResponse execute() throws ApiException {
            TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest = buildBodyParams();
            ApiResponse<TeamsRemoveUserFromTeamResponse> localVarResp = removeUserFromTeamWithHttpInfo(teamGid, teamsRemoveUserFromTeamRequest, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUserFromTeam request with HTTP info returned
         * @return ApiResponse&lt;TeamsRemoveUserFromTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty data record </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsRemoveUserFromTeamResponse> executeWithHttpInfo() throws ApiException {
            TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest = buildBodyParams();
            return removeUserFromTeamWithHttpInfo(teamGid, teamsRemoveUserFromTeamRequest, optPretty);
        }

        /**
         * Execute removeUserFromTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Returns an empty data record </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsRemoveUserFromTeamResponse> _callback) throws ApiException {
            TeamsRemoveUserFromTeamRequest teamsRemoveUserFromTeamRequest = buildBodyParams();
            return removeUserFromTeamAsync(teamGid, teamsRemoveUserFromTeamRequest, optPretty, _callback);
        }
    }

    /**
     * Remove a user from a team
     * The user making this call must be a member of the team in order to remove themselves or others.
     * @param teamGid Globally unique identifier for the team. (required)
     * @param teamsRemoveUserFromTeamRequest The user to remove from the team. (required)
     * @return RemoveUserFromTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returns an empty data record </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserFromTeamRequestBuilder removeUserFromTeam(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new RemoveUserFromTeamRequestBuilder(teamGid);
    }
    private okhttp3.Call updateTeamRecordCall(String teamGid, TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateTeamRecordRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_gid}"
            .replace("{" + "team_gid" + "}", localVarApiClient.escapeString(teamGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamRecordValidateBeforeCall(String teamGid, TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamGid' is set
        if (teamGid == null) {
            throw new ApiException("Missing the required parameter 'teamGid' when calling updateTeamRecord(Async)");
        }

        // verify the required parameter 'teamsUpdateTeamRecordRequest' is set
        if (teamsUpdateTeamRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsUpdateTeamRecordRequest' when calling updateTeamRecord(Async)");
        }

        return updateTeamRecordCall(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<TeamsUpdateTeamRecordResponse> updateTeamRecordWithHttpInfo(String teamGid, TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateTeamRecordValidateBeforeCall(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<TeamsUpdateTeamRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTeamRecordAsync(String teamGid, TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<TeamsUpdateTeamRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamRecordValidateBeforeCall(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<TeamsUpdateTeamRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTeamRecordRequestBuilder {
        private final String teamGid;
        private TeamRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateTeamRecordRequestBuilder(String teamGid) {
            this.teamGid = teamGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateTeamRecordRequestBuilder
         */
        public UpdateTeamRecordRequestBuilder data(TeamRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateTeamRecordRequestBuilder
         */
        public UpdateTeamRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateTeamRecordRequestBuilder
         */
        public UpdateTeamRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateTeamRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest = buildBodyParams();
            return updateTeamRecordCall(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields, _callback);
        }

        private TeamsUpdateTeamRecordRequest buildBodyParams() {
            TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest = new TeamsUpdateTeamRecordRequest();
            teamsUpdateTeamRecordRequest.data(this.data);
            return teamsUpdateTeamRecordRequest;
        }

        /**
         * Execute updateTeamRecord request
         * @return TeamsUpdateTeamRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the team. </td><td>  -  </td></tr>
         </table>
         */
        public TeamsUpdateTeamRecordResponse execute() throws ApiException {
            TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest = buildBodyParams();
            ApiResponse<TeamsUpdateTeamRecordResponse> localVarResp = updateTeamRecordWithHttpInfo(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTeamRecord request with HTTP info returned
         * @return ApiResponse&lt;TeamsUpdateTeamRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the team. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamsUpdateTeamRecordResponse> executeWithHttpInfo() throws ApiException {
            TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest = buildBodyParams();
            return updateTeamRecordWithHttpInfo(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateTeamRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the team. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamsUpdateTeamRecordResponse> _callback) throws ApiException {
            TeamsUpdateTeamRecordRequest teamsUpdateTeamRecordRequest = buildBodyParams();
            return updateTeamRecordAsync(teamGid, teamsUpdateTeamRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a team
     * Updates a team within the current workspace.
     * @param teamGid Globally unique identifier for the team. (required)
     * @param teamsUpdateTeamRecordRequest The team to update. (required)
     * @return UpdateTeamRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the team. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeamRecordRequestBuilder updateTeamRecord(String teamGid) throws IllegalArgumentException {
        if (teamGid == null) throw new IllegalArgumentException("\"teamGid\" is required but got null");
            

        return new UpdateTeamRecordRequestBuilder(teamGid);
    }
}
