/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomFieldCompactAllOfDateValue;
import com.konfigthis.client.model.EnumOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomFieldCompact
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomFieldCompact {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
 public enum ResourceSubtypeEnum {
    TEXT("text"),
    
    ENUM("enum"),
    
    MULTI_ENUM("multi_enum"),
    
    NUMBER("number"),
    
    DATE("date"),
    
    PEOPLE("people");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSubtypeEnum fromValue(String value) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private ResourceSubtypeEnum resourceSubtype;

  /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    TEXT("text"),
    
    ENUM("enum"),
    
    MULTI_ENUM("multi_enum"),
    
    NUMBER("number"),
    
    DATE("date"),
    
    PEOPLE("people");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ENUM_OPTIONS = "enum_options";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTIONS)
  private List<EnumOption> enumOptions = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * This field tells the type of the custom field.
   */
  @JsonAdapter(RepresentationTypeEnum.Adapter.class)
 public enum RepresentationTypeEnum {
    TEXT("text"),
    
    ENUM("enum"),
    
    MULTI_ENUM("multi_enum"),
    
    NUMBER("number"),
    
    DATE("date"),
    
    PEOPLE("people"),
    
    FORMULA("formula"),
    
    CUSTOM_ID("custom_id");

    private String value;

    RepresentationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepresentationTypeEnum fromValue(String value) {
      for (RepresentationTypeEnum b : RepresentationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepresentationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepresentationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepresentationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepresentationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPRESENTATION_TYPE = "representation_type";
  @SerializedName(SERIALIZED_NAME_REPRESENTATION_TYPE)
  private RepresentationTypeEnum representationType;

  public static final String SERIALIZED_NAME_ID_PREFIX = "id_prefix";
  @SerializedName(SERIALIZED_NAME_ID_PREFIX)
  private String idPrefix;

  public static final String SERIALIZED_NAME_IS_FORMULA_FIELD = "is_formula_field";
  @SerializedName(SERIALIZED_NAME_IS_FORMULA_FIELD)
  private Boolean isFormulaField;

  public static final String SERIALIZED_NAME_DATE_VALUE = "date_value";
  @SerializedName(SERIALIZED_NAME_DATE_VALUE)
  private CustomFieldCompactAllOfDateValue dateValue;

  public static final String SERIALIZED_NAME_ENUM_VALUE = "enum_value";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUE)
  private EnumOption enumValue;

  public static final String SERIALIZED_NAME_MULTI_ENUM_VALUES = "multi_enum_values";
  @SerializedName(SERIALIZED_NAME_MULTI_ENUM_VALUES)
  private List<EnumOption> multiEnumValues = null;

  public static final String SERIALIZED_NAME_NUMBER_VALUE = "number_value";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE)
  private Double numberValue;

  public static final String SERIALIZED_NAME_TEXT_VALUE = "text_value";
  @SerializedName(SERIALIZED_NAME_TEXT_VALUE)
  private String textValue;

  public static final String SERIALIZED_NAME_DISPLAY_VALUE = "display_value";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VALUE)
  private String displayValue;

  public CustomFieldCompact() {
  }

  
  public CustomFieldCompact(
     String gid, 
     String resourceType, 
     ResourceSubtypeEnum resourceSubtype, 
     TypeEnum type, 
     Boolean enabled, 
     RepresentationTypeEnum representationType, 
     String displayValue
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.resourceSubtype = resourceSubtype;
    this.type = type;
    this.enabled = enabled;
    this.representationType = representationType;
    this.displayValue = displayValue;
  }

   /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "Globally unique identifier of the resource, as a string.")

  public String getGid() {
    return gid;
  }




   /**
   * The base type of this resource.
   * @return resourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "task", value = "The base type of this resource.")

  public String getResourceType() {
    return resourceType;
  }




  public CustomFieldCompact name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the custom field.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Status", value = "The name of the custom field.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


   /**
   * The type of the custom field. Must be one of the given values. 
   * @return resourceSubtype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TEXT", value = "The type of the custom field. Must be one of the given values. ")

  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }




   /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. ")

  public TypeEnum getType() {
    return type;
  }




  public CustomFieldCompact enumOptions(List<EnumOption> enumOptions) {
    
    
    
    
    this.enumOptions = enumOptions;
    return this;
  }

  public CustomFieldCompact addEnumOptionsItem(EnumOption enumOptionsItem) {
    if (this.enumOptions == null) {
      this.enumOptions = new ArrayList<>();
    }
    this.enumOptions.add(enumOptionsItem);
    return this;
  }

   /**
   * *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](https://raw.githubusercontent.com).
   * @return enumOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](https://raw.githubusercontent.com).")

  public List<EnumOption> getEnumOptions() {
    return enumOptions;
  }


  public void setEnumOptions(List<EnumOption> enumOptions) {
    
    
    
    this.enumOptions = enumOptions;
  }


   /**
   * *Conditional*. Determines if the custom field is enabled or not.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "*Conditional*. Determines if the custom field is enabled or not.")

  public Boolean getEnabled() {
    return enabled;
  }




   /**
   * This field tells the type of the custom field.
   * @return representationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NUMBER", value = "This field tells the type of the custom field.")

  public RepresentationTypeEnum getRepresentationType() {
    return representationType;
  }




  public CustomFieldCompact idPrefix(String idPrefix) {
    
    
    
    
    this.idPrefix = idPrefix;
    return this;
  }

   /**
   * This field is the unique custom ID string for the custom field.
   * @return idPrefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ID", value = "This field is the unique custom ID string for the custom field.")

  public String getIdPrefix() {
    return idPrefix;
  }


  public void setIdPrefix(String idPrefix) {
    
    
    
    this.idPrefix = idPrefix;
  }


  public CustomFieldCompact isFormulaField(Boolean isFormulaField) {
    
    
    
    
    this.isFormulaField = isFormulaField;
    return this;
  }

   /**
   * *Conditional*. This flag describes whether a custom field is a formula custom field.
   * @return isFormulaField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "*Conditional*. This flag describes whether a custom field is a formula custom field.")

  public Boolean getIsFormulaField() {
    return isFormulaField;
  }


  public void setIsFormulaField(Boolean isFormulaField) {
    
    
    
    this.isFormulaField = isFormulaField;
  }


  public CustomFieldCompact dateValue(CustomFieldCompactAllOfDateValue dateValue) {
    
    
    
    
    this.dateValue = dateValue;
    return this;
  }

   /**
   * Get dateValue
   * @return dateValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomFieldCompactAllOfDateValue getDateValue() {
    return dateValue;
  }


  public void setDateValue(CustomFieldCompactAllOfDateValue dateValue) {
    
    
    
    this.dateValue = dateValue;
  }


  public CustomFieldCompact enumValue(EnumOption enumValue) {
    
    
    
    
    this.enumValue = enumValue;
    return this;
  }

   /**
   * Get enumValue
   * @return enumValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumOption getEnumValue() {
    return enumValue;
  }


  public void setEnumValue(EnumOption enumValue) {
    
    
    
    this.enumValue = enumValue;
  }


  public CustomFieldCompact multiEnumValues(List<EnumOption> multiEnumValues) {
    
    
    
    
    this.multiEnumValues = multiEnumValues;
    return this;
  }

  public CustomFieldCompact addMultiEnumValuesItem(EnumOption multiEnumValuesItem) {
    if (this.multiEnumValues == null) {
      this.multiEnumValues = new ArrayList<>();
    }
    this.multiEnumValues.add(multiEnumValuesItem);
    return this;
  }

   /**
   * *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
   * @return multiEnumValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "*Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.")

  public List<EnumOption> getMultiEnumValues() {
    return multiEnumValues;
  }


  public void setMultiEnumValues(List<EnumOption> multiEnumValues) {
    
    
    
    this.multiEnumValues = multiEnumValues;
  }


  public CustomFieldCompact numberValue(Double numberValue) {
    
    
    
    
    this.numberValue = numberValue;
    return this;
  }

  public CustomFieldCompact numberValue(Integer numberValue) {
    
    
    
    
    this.numberValue = numberValue.doubleValue();
    return this;
  }

   /**
   * *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
   * @return numberValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.2", value = "*Conditional*. This number is the value of a `number` custom field.")

  public Double getNumberValue() {
    return numberValue;
  }


  public void setNumberValue(Double numberValue) {
    
    
    
    this.numberValue = numberValue;
  }


  public CustomFieldCompact textValue(String textValue) {
    
    
    
    
    this.textValue = textValue;
    return this;
  }

   /**
   * *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
   * @return textValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Some Value", value = "*Conditional*. This string is the value of a `text` custom field.")

  public String getTextValue() {
    return textValue;
  }


  public void setTextValue(String textValue) {
    
    
    
    this.textValue = textValue;
  }


   /**
   * A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
   * @return displayValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "blue", value = "A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.")

  public String getDisplayValue() {
    return displayValue;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomFieldCompact instance itself
   */
  public CustomFieldCompact putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFieldCompact customFieldCompact = (CustomFieldCompact) o;
    return Objects.equals(this.gid, customFieldCompact.gid) &&
        Objects.equals(this.resourceType, customFieldCompact.resourceType) &&
        Objects.equals(this.name, customFieldCompact.name) &&
        Objects.equals(this.resourceSubtype, customFieldCompact.resourceSubtype) &&
        Objects.equals(this.type, customFieldCompact.type) &&
        Objects.equals(this.enumOptions, customFieldCompact.enumOptions) &&
        Objects.equals(this.enabled, customFieldCompact.enabled) &&
        Objects.equals(this.representationType, customFieldCompact.representationType) &&
        Objects.equals(this.idPrefix, customFieldCompact.idPrefix) &&
        Objects.equals(this.isFormulaField, customFieldCompact.isFormulaField) &&
        Objects.equals(this.dateValue, customFieldCompact.dateValue) &&
        Objects.equals(this.enumValue, customFieldCompact.enumValue) &&
        Objects.equals(this.multiEnumValues, customFieldCompact.multiEnumValues) &&
        Objects.equals(this.numberValue, customFieldCompact.numberValue) &&
        Objects.equals(this.textValue, customFieldCompact.textValue) &&
        Objects.equals(this.displayValue, customFieldCompact.displayValue)&&
        Objects.equals(this.additionalProperties, customFieldCompact.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, name, resourceSubtype, type, enumOptions, enabled, representationType, idPrefix, isFormulaField, dateValue, enumValue, multiEnumValues, numberValue, textValue, displayValue, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFieldCompact {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enumOptions: ").append(toIndentedString(enumOptions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    representationType: ").append(toIndentedString(representationType)).append("\n");
    sb.append("    idPrefix: ").append(toIndentedString(idPrefix)).append("\n");
    sb.append("    isFormulaField: ").append(toIndentedString(isFormulaField)).append("\n");
    sb.append("    dateValue: ").append(toIndentedString(dateValue)).append("\n");
    sb.append("    enumValue: ").append(toIndentedString(enumValue)).append("\n");
    sb.append("    multiEnumValues: ").append(toIndentedString(multiEnumValues)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    displayValue: ").append(toIndentedString(displayValue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("name");
    openapiFields.add("resource_subtype");
    openapiFields.add("type");
    openapiFields.add("enum_options");
    openapiFields.add("enabled");
    openapiFields.add("representation_type");
    openapiFields.add("id_prefix");
    openapiFields.add("is_formula_field");
    openapiFields.add("date_value");
    openapiFields.add("enum_value");
    openapiFields.add("multi_enum_values");
    openapiFields.add("number_value");
    openapiFields.add("text_value");
    openapiFields.add("display_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomFieldCompact
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomFieldCompact.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomFieldCompact is not found in the empty JSON string", CustomFieldCompact.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("enum_options") != null && !jsonObj.get("enum_options").isJsonNull()) {
        JsonArray jsonArrayenumOptions = jsonObj.getAsJsonArray("enum_options");
        if (jsonArrayenumOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enum_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enum_options` to be an array in the JSON string but got `%s`", jsonObj.get("enum_options").toString()));
          }

          // validate the optional field `enum_options` (array)
          for (int i = 0; i < jsonArrayenumOptions.size(); i++) {
            EnumOption.validateJsonObject(jsonArrayenumOptions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("representation_type") != null && !jsonObj.get("representation_type").isJsonNull()) && !jsonObj.get("representation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `representation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("representation_type").toString()));
      }
      if (!jsonObj.get("id_prefix").isJsonNull() && (jsonObj.get("id_prefix") != null && !jsonObj.get("id_prefix").isJsonNull()) && !jsonObj.get("id_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_prefix").toString()));
      }
      // validate the optional field `date_value`
      if (jsonObj.get("date_value") != null && !jsonObj.get("date_value").isJsonNull()) {
        CustomFieldCompactAllOfDateValue.validateJsonObject(jsonObj.getAsJsonObject("date_value"));
      }
      // validate the optional field `enum_value`
      if (jsonObj.get("enum_value") != null && !jsonObj.get("enum_value").isJsonNull()) {
        EnumOption.validateJsonObject(jsonObj.getAsJsonObject("enum_value"));
      }
      if (jsonObj.get("multi_enum_values") != null && !jsonObj.get("multi_enum_values").isJsonNull()) {
        JsonArray jsonArraymultiEnumValues = jsonObj.getAsJsonArray("multi_enum_values");
        if (jsonArraymultiEnumValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multi_enum_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multi_enum_values` to be an array in the JSON string but got `%s`", jsonObj.get("multi_enum_values").toString()));
          }

          // validate the optional field `multi_enum_values` (array)
          for (int i = 0; i < jsonArraymultiEnumValues.size(); i++) {
            EnumOption.validateJsonObject(jsonArraymultiEnumValues.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("text_value").isJsonNull() && (jsonObj.get("text_value") != null && !jsonObj.get("text_value").isJsonNull()) && !jsonObj.get("text_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_value").toString()));
      }
      if (!jsonObj.get("display_value").isJsonNull() && (jsonObj.get("display_value") != null && !jsonObj.get("display_value").isJsonNull()) && !jsonObj.get("display_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomFieldCompact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomFieldCompact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomFieldCompact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomFieldCompact.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomFieldCompact>() {
           @Override
           public void write(JsonWriter out, CustomFieldCompact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomFieldCompact read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomFieldCompact instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomFieldCompact given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomFieldCompact
  * @throws IOException if the JSON string is invalid with respect to CustomFieldCompact
  */
  public static CustomFieldCompact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomFieldCompact.class);
  }

 /**
  * Convert an instance of CustomFieldCompact to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

