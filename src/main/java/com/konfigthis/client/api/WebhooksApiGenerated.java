/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WebhookRequest;
import com.konfigthis.client.model.WebhookUpdateRequest;
import com.konfigthis.client.model.WebhooksEstablishWebhookRequest;
import com.konfigthis.client.model.WebhooksEstablishWebhookResponse;
import com.konfigthis.client.model.WebhooksGetWebhookRecordResponse;
import com.konfigthis.client.model.WebhooksListMultipleWebhooksResponse;
import com.konfigthis.client.model.WebhooksRemoveWebhookResponse;
import com.konfigthis.client.model.WebhooksUpdateWebhookFiltersRequest;
import com.konfigthis.client.model.WebhooksUpdateWebhookFiltersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call establishWebhookCall(WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksEstablishWebhookRequest;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call establishWebhookValidateBeforeCall(WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhooksEstablishWebhookRequest' is set
        if (webhooksEstablishWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksEstablishWebhookRequest' when calling establishWebhook(Async)");
        }

        return establishWebhookCall(webhooksEstablishWebhookRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<WebhooksEstablishWebhookResponse> establishWebhookWithHttpInfo(WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = establishWebhookValidateBeforeCall(webhooksEstablishWebhookRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WebhooksEstablishWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call establishWebhookAsync(WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest, Boolean optPretty, List<String> optFields, final ApiCallback<WebhooksEstablishWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = establishWebhookValidateBeforeCall(webhooksEstablishWebhookRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WebhooksEstablishWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EstablishWebhookRequestBuilder {
        private WebhookRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private EstablishWebhookRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return EstablishWebhookRequestBuilder
         */
        public EstablishWebhookRequestBuilder data(WebhookRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return EstablishWebhookRequestBuilder
         */
        public EstablishWebhookRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return EstablishWebhookRequestBuilder
         */
        public EstablishWebhookRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for establishWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest = buildBodyParams();
            return establishWebhookCall(webhooksEstablishWebhookRequest, optPretty, optFields, _callback);
        }

        private WebhooksEstablishWebhookRequest buildBodyParams() {
            WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest = new WebhooksEstablishWebhookRequest();
            webhooksEstablishWebhookRequest.data(this.data);
            return webhooksEstablishWebhookRequest;
        }

        /**
         * Execute establishWebhook request
         * @return WebhooksEstablishWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksEstablishWebhookResponse execute() throws ApiException {
            WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest = buildBodyParams();
            ApiResponse<WebhooksEstablishWebhookResponse> localVarResp = establishWebhookWithHttpInfo(webhooksEstablishWebhookRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute establishWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhooksEstablishWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksEstablishWebhookResponse> executeWithHttpInfo() throws ApiException {
            WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest = buildBodyParams();
            return establishWebhookWithHttpInfo(webhooksEstablishWebhookRequest, optPretty, optFields);
        }

        /**
         * Execute establishWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksEstablishWebhookResponse> _callback) throws ApiException {
            WebhooksEstablishWebhookRequest webhooksEstablishWebhookRequest = buildBodyParams();
            return establishWebhookAsync(webhooksEstablishWebhookRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Establish a webhook
     * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an &#x60;X-Hook-Secret&#x60; header. The target must respond with a &#x60;200 OK&#x60; or &#x60;204 No Content&#x60; and a matching &#x60;X-Hook-Secret&#x60; header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  &#x60;&#x60;&#x60; # Request curl -H \&quot;Authorization: Bearer &lt;personal_access_token&gt;\&quot; \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \&quot;resource&#x3D;8675309\&quot; \\ -d \&quot;target&#x3D;https://example.com/receive-webhook/7654\&quot; &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Response HTTP/1.1 201 {   \&quot;data\&quot;: {     \&quot;gid\&quot;: \&quot;43214\&quot;,     \&quot;resource\&quot;: {       \&quot;gid\&quot;: \&quot;8675309\&quot;,       \&quot;name\&quot;: \&quot;Bugs\&quot;     },     \&quot;target\&quot;: \&quot;https://example.com/receive-webhook/7654\&quot;,     \&quot;active\&quot;: false,     \&quot;last_success_at\&quot;: null,     \&quot;last_failure_at\&quot;: null,     \&quot;last_failure_content\&quot;: null   } } &#x60;&#x60;&#x60;
     * @param webhooksEstablishWebhookRequest The webhook workspace and target. (required)
     * @return EstablishWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the requested webhook. </td><td>  -  </td></tr>
     </table>
     */
    public EstablishWebhookRequestBuilder establishWebhook() throws IllegalArgumentException {
        return new EstablishWebhookRequestBuilder();
    }
    private okhttp3.Call getWebhookRecordCall(String webhookGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_gid}"
            .replace("{" + "webhook_gid" + "}", localVarApiClient.escapeString(webhookGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookRecordValidateBeforeCall(String webhookGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookGid' is set
        if (webhookGid == null) {
            throw new ApiException("Missing the required parameter 'webhookGid' when calling getWebhookRecord(Async)");
        }

        return getWebhookRecordCall(webhookGid, optPretty, optFields, _callback);

    }


    private ApiResponse<WebhooksGetWebhookRecordResponse> getWebhookRecordWithHttpInfo(String webhookGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getWebhookRecordValidateBeforeCall(webhookGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WebhooksGetWebhookRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookRecordAsync(String webhookGid, Boolean optPretty, List<String> optFields, final ApiCallback<WebhooksGetWebhookRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookRecordValidateBeforeCall(webhookGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WebhooksGetWebhookRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebhookRecordRequestBuilder {
        private final String webhookGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetWebhookRecordRequestBuilder(String webhookGid) {
            this.webhookGid = webhookGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetWebhookRecordRequestBuilder
         */
        public GetWebhookRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetWebhookRecordRequestBuilder
         */
        public GetWebhookRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getWebhookRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookRecordCall(webhookGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getWebhookRecord request
         * @return WebhooksGetWebhookRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksGetWebhookRecordResponse execute() throws ApiException {
            ApiResponse<WebhooksGetWebhookRecordResponse> localVarResp = getWebhookRecordWithHttpInfo(webhookGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebhookRecord request with HTTP info returned
         * @return ApiResponse&lt;WebhooksGetWebhookRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksGetWebhookRecordResponse> executeWithHttpInfo() throws ApiException {
            return getWebhookRecordWithHttpInfo(webhookGid, optPretty, optFields);
        }

        /**
         * Execute getWebhookRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksGetWebhookRecordResponse> _callback) throws ApiException {
            return getWebhookRecordAsync(webhookGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a webhook
     * Returns the full record for the given webhook.
     * @param webhookGid Globally unique identifier for the webhook. (required)
     * @return GetWebhookRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
     </table>
     */
    public GetWebhookRecordRequestBuilder getWebhookRecord(String webhookGid) throws IllegalArgumentException {
        if (webhookGid == null) throw new IllegalArgumentException("\"webhookGid\" is required but got null");
            

        return new GetWebhookRecordRequestBuilder(webhookGid);
    }
    private okhttp3.Call listMultipleWebhooksCall(String workspace, Boolean optPretty, Integer limit, String offset, String resource, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMultipleWebhooksValidateBeforeCall(String workspace, Boolean optPretty, Integer limit, String offset, String resource, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listMultipleWebhooks(Async)");
        }

        return listMultipleWebhooksCall(workspace, optPretty, limit, offset, resource, optFields, _callback);

    }


    private ApiResponse<WebhooksListMultipleWebhooksResponse> listMultipleWebhooksWithHttpInfo(String workspace, Boolean optPretty, Integer limit, String offset, String resource, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listMultipleWebhooksValidateBeforeCall(workspace, optPretty, limit, offset, resource, optFields, null);
        Type localVarReturnType = new TypeToken<WebhooksListMultipleWebhooksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMultipleWebhooksAsync(String workspace, Boolean optPretty, Integer limit, String offset, String resource, List<String> optFields, final ApiCallback<WebhooksListMultipleWebhooksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMultipleWebhooksValidateBeforeCall(workspace, optPretty, limit, offset, resource, optFields, _callback);
        Type localVarReturnType = new TypeToken<WebhooksListMultipleWebhooksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMultipleWebhooksRequestBuilder {
        private final String workspace;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private String resource;
        private List<String> optFields;

        private ListMultipleWebhooksRequestBuilder(String workspace) {
            this.workspace = workspace;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListMultipleWebhooksRequestBuilder
         */
        public ListMultipleWebhooksRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListMultipleWebhooksRequestBuilder
         */
        public ListMultipleWebhooksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListMultipleWebhooksRequestBuilder
         */
        public ListMultipleWebhooksRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set resource
         * @param resource Only return webhooks for the given resource. (optional)
         * @return ListMultipleWebhooksRequestBuilder
         */
        public ListMultipleWebhooksRequestBuilder resource(String resource) {
            this.resource = resource;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListMultipleWebhooksRequestBuilder
         */
        public ListMultipleWebhooksRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listMultipleWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhooks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMultipleWebhooksCall(workspace, optPretty, limit, offset, resource, optFields, _callback);
        }


        /**
         * Execute listMultipleWebhooks request
         * @return WebhooksListMultipleWebhooksResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhooks. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksListMultipleWebhooksResponse execute() throws ApiException {
            ApiResponse<WebhooksListMultipleWebhooksResponse> localVarResp = listMultipleWebhooksWithHttpInfo(workspace, optPretty, limit, offset, resource, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMultipleWebhooks request with HTTP info returned
         * @return ApiResponse&lt;WebhooksListMultipleWebhooksResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhooks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksListMultipleWebhooksResponse> executeWithHttpInfo() throws ApiException {
            return listMultipleWebhooksWithHttpInfo(workspace, optPretty, limit, offset, resource, optFields);
        }

        /**
         * Execute listMultipleWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhooks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksListMultipleWebhooksResponse> _callback) throws ApiException {
            return listMultipleWebhooksAsync(workspace, optPretty, limit, offset, resource, optFields, _callback);
        }
    }

    /**
     * Get multiple webhooks
     * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     * @param workspace The workspace to query for webhooks in. (required)
     * @return ListMultipleWebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested webhooks. </td><td>  -  </td></tr>
     </table>
     */
    public ListMultipleWebhooksRequestBuilder listMultipleWebhooks(String workspace) throws IllegalArgumentException {
        if (workspace == null) throw new IllegalArgumentException("\"workspace\" is required but got null");
            

        return new ListMultipleWebhooksRequestBuilder(workspace);
    }
    private okhttp3.Call removeWebhookCall(String webhookGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_gid}"
            .replace("{" + "webhook_gid" + "}", localVarApiClient.escapeString(webhookGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebhookValidateBeforeCall(String webhookGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookGid' is set
        if (webhookGid == null) {
            throw new ApiException("Missing the required parameter 'webhookGid' when calling removeWebhook(Async)");
        }

        return removeWebhookCall(webhookGid, optPretty, _callback);

    }


    private ApiResponse<WebhooksRemoveWebhookResponse> removeWebhookWithHttpInfo(String webhookGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeWebhookValidateBeforeCall(webhookGid, optPretty, null);
        Type localVarReturnType = new TypeToken<WebhooksRemoveWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeWebhookAsync(String webhookGid, Boolean optPretty, final ApiCallback<WebhooksRemoveWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebhookValidateBeforeCall(webhookGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<WebhooksRemoveWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveWebhookRequestBuilder {
        private final String webhookGid;
        private Boolean optPretty;

        private RemoveWebhookRequestBuilder(String webhookGid) {
            this.webhookGid = webhookGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveWebhookRequestBuilder
         */
        public RemoveWebhookRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWebhookCall(webhookGid, optPretty, _callback);
        }


        /**
         * Execute removeWebhook request
         * @return WebhooksRemoveWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksRemoveWebhookResponse execute() throws ApiException {
            ApiResponse<WebhooksRemoveWebhookResponse> localVarResp = removeWebhookWithHttpInfo(webhookGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhooksRemoveWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksRemoveWebhookResponse> executeWithHttpInfo() throws ApiException {
            return removeWebhookWithHttpInfo(webhookGid, optPretty);
        }

        /**
         * Execute removeWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksRemoveWebhookResponse> _callback) throws ApiException {
            return removeWebhookAsync(webhookGid, optPretty, _callback);
        }
    }

    /**
     * Delete a webhook
     * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     * @param webhookGid Globally unique identifier for the webhook. (required)
     * @return RemoveWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested webhook. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWebhookRequestBuilder removeWebhook(String webhookGid) throws IllegalArgumentException {
        if (webhookGid == null) throw new IllegalArgumentException("\"webhookGid\" is required but got null");
            

        return new RemoveWebhookRequestBuilder(webhookGid);
    }
    private okhttp3.Call updateWebhookFiltersCall(String webhookGid, WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksUpdateWebhookFiltersRequest;

        // create path and map variables
        String localVarPath = "/webhooks/{webhook_gid}"
            .replace("{" + "webhook_gid" + "}", localVarApiClient.escapeString(webhookGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookFiltersValidateBeforeCall(String webhookGid, WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookGid' is set
        if (webhookGid == null) {
            throw new ApiException("Missing the required parameter 'webhookGid' when calling updateWebhookFilters(Async)");
        }

        // verify the required parameter 'webhooksUpdateWebhookFiltersRequest' is set
        if (webhooksUpdateWebhookFiltersRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksUpdateWebhookFiltersRequest' when calling updateWebhookFilters(Async)");
        }

        return updateWebhookFiltersCall(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<WebhooksUpdateWebhookFiltersResponse> updateWebhookFiltersWithHttpInfo(String webhookGid, WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookFiltersValidateBeforeCall(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<WebhooksUpdateWebhookFiltersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookFiltersAsync(String webhookGid, WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest, Boolean optPretty, List<String> optFields, final ApiCallback<WebhooksUpdateWebhookFiltersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookFiltersValidateBeforeCall(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<WebhooksUpdateWebhookFiltersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebhookFiltersRequestBuilder {
        private final String webhookGid;
        private WebhookUpdateRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateWebhookFiltersRequestBuilder(String webhookGid) {
            this.webhookGid = webhookGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateWebhookFiltersRequestBuilder
         */
        public UpdateWebhookFiltersRequestBuilder data(WebhookUpdateRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateWebhookFiltersRequestBuilder
         */
        public UpdateWebhookFiltersRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateWebhookFiltersRequestBuilder
         */
        public UpdateWebhookFiltersRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateWebhookFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest = buildBodyParams();
            return updateWebhookFiltersCall(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields, _callback);
        }

        private WebhooksUpdateWebhookFiltersRequest buildBodyParams() {
            WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest = new WebhooksUpdateWebhookFiltersRequest();
            webhooksUpdateWebhookFiltersRequest.data(this.data);
            return webhooksUpdateWebhookFiltersRequest;
        }

        /**
         * Execute updateWebhookFilters request
         * @return WebhooksUpdateWebhookFiltersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the webhook. </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksUpdateWebhookFiltersResponse execute() throws ApiException {
            WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest = buildBodyParams();
            ApiResponse<WebhooksUpdateWebhookFiltersResponse> localVarResp = updateWebhookFiltersWithHttpInfo(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebhookFilters request with HTTP info returned
         * @return ApiResponse&lt;WebhooksUpdateWebhookFiltersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the webhook. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksUpdateWebhookFiltersResponse> executeWithHttpInfo() throws ApiException {
            WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest = buildBodyParams();
            return updateWebhookFiltersWithHttpInfo(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields);
        }

        /**
         * Execute updateWebhookFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the webhook. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksUpdateWebhookFiltersResponse> _callback) throws ApiException {
            WebhooksUpdateWebhookFiltersRequest webhooksUpdateWebhookFiltersRequest = buildBodyParams();
            return updateWebhookFiltersAsync(webhookGid, webhooksUpdateWebhookFiltersRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a webhook
     * An existing webhook&#39;s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook&#39;s previous &#x60;filters&#x60; array will be completely overwritten by the &#x60;filters&#x60; sent in the PUT request.
     * @param webhookGid Globally unique identifier for the webhook. (required)
     * @param webhooksUpdateWebhookFiltersRequest The updated filters for the webhook. (required)
     * @return UpdateWebhookFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the webhook. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebhookFiltersRequestBuilder updateWebhookFilters(String webhookGid) throws IllegalArgumentException {
        if (webhookGid == null) throw new IllegalArgumentException("\"webhookGid\" is required but got null");
            

        return new UpdateWebhookFiltersRequestBuilder(webhookGid);
    }
}
