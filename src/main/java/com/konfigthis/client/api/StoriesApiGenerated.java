/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.StoriesCreateCommentRequest;
import com.konfigthis.client.model.StoriesCreateCommentResponse;
import com.konfigthis.client.model.StoriesDeleteStoryRecordResponse;
import com.konfigthis.client.model.StoriesGetFullRecordResponse;
import com.konfigthis.client.model.StoriesGetTaskStoriesResponse;
import com.konfigthis.client.model.StoriesUpdateFullRecordRequest;
import com.konfigthis.client.model.StoriesUpdateFullRecordResponse;
import com.konfigthis.client.model.StoryBase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCommentCall(String taskGid, StoriesCreateCommentRequest storiesCreateCommentRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storiesCreateCommentRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/stories"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentValidateBeforeCall(String taskGid, StoriesCreateCommentRequest storiesCreateCommentRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling createComment(Async)");
        }

        // verify the required parameter 'storiesCreateCommentRequest' is set
        if (storiesCreateCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'storiesCreateCommentRequest' when calling createComment(Async)");
        }

        return createCommentCall(taskGid, storiesCreateCommentRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<StoriesCreateCommentResponse> createCommentWithHttpInfo(String taskGid, StoriesCreateCommentRequest storiesCreateCommentRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createCommentValidateBeforeCall(taskGid, storiesCreateCommentRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<StoriesCreateCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCommentAsync(String taskGid, StoriesCreateCommentRequest storiesCreateCommentRequest, Boolean optPretty, List<String> optFields, final ApiCallback<StoriesCreateCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentValidateBeforeCall(taskGid, storiesCreateCommentRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<StoriesCreateCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCommentRequestBuilder {
        private final String taskGid;
        private StoryBase data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateCommentRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder data(StoryBase data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateCommentRequestBuilder
         */
        public CreateCommentRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StoriesCreateCommentRequest storiesCreateCommentRequest = buildBodyParams();
            return createCommentCall(taskGid, storiesCreateCommentRequest, optPretty, optFields, _callback);
        }

        private StoriesCreateCommentRequest buildBodyParams() {
            StoriesCreateCommentRequest storiesCreateCommentRequest = new StoriesCreateCommentRequest();
            storiesCreateCommentRequest.data(this.data);
            return storiesCreateCommentRequest;
        }

        /**
         * Execute createComment request
         * @return StoriesCreateCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public StoriesCreateCommentResponse execute() throws ApiException {
            StoriesCreateCommentRequest storiesCreateCommentRequest = buildBodyParams();
            ApiResponse<StoriesCreateCommentResponse> localVarResp = createCommentWithHttpInfo(taskGid, storiesCreateCommentRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createComment request with HTTP info returned
         * @return ApiResponse&lt;StoriesCreateCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoriesCreateCommentResponse> executeWithHttpInfo() throws ApiException {
            StoriesCreateCommentRequest storiesCreateCommentRequest = buildBodyParams();
            return createCommentWithHttpInfo(taskGid, storiesCreateCommentRequest, optPretty, optFields);
        }

        /**
         * Execute createComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoriesCreateCommentResponse> _callback) throws ApiException {
            StoriesCreateCommentRequest storiesCreateCommentRequest = buildBodyParams();
            return createCommentAsync(taskGid, storiesCreateCommentRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a story on a task
     * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     * @param taskGid The task to operate on. (required)
     * @param storiesCreateCommentRequest The story to create. (required)
     * @return CreateCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new story. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCommentRequestBuilder createComment(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new CreateCommentRequestBuilder(taskGid);
    }
    private okhttp3.Call deleteStoryRecordCall(String storyGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stories/{story_gid}"
            .replace("{" + "story_gid" + "}", localVarApiClient.escapeString(storyGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoryRecordValidateBeforeCall(String storyGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyGid' is set
        if (storyGid == null) {
            throw new ApiException("Missing the required parameter 'storyGid' when calling deleteStoryRecord(Async)");
        }

        return deleteStoryRecordCall(storyGid, optPretty, _callback);

    }


    private ApiResponse<StoriesDeleteStoryRecordResponse> deleteStoryRecordWithHttpInfo(String storyGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteStoryRecordValidateBeforeCall(storyGid, optPretty, null);
        Type localVarReturnType = new TypeToken<StoriesDeleteStoryRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteStoryRecordAsync(String storyGid, Boolean optPretty, final ApiCallback<StoriesDeleteStoryRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoryRecordValidateBeforeCall(storyGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<StoriesDeleteStoryRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteStoryRecordRequestBuilder {
        private final String storyGid;
        private Boolean optPretty;

        private DeleteStoryRecordRequestBuilder(String storyGid) {
            this.storyGid = storyGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteStoryRecordRequestBuilder
         */
        public DeleteStoryRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteStoryRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteStoryRecordCall(storyGid, optPretty, _callback);
        }


        /**
         * Execute deleteStoryRecord request
         * @return StoriesDeleteStoryRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public StoriesDeleteStoryRecordResponse execute() throws ApiException {
            ApiResponse<StoriesDeleteStoryRecordResponse> localVarResp = deleteStoryRecordWithHttpInfo(storyGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteStoryRecord request with HTTP info returned
         * @return ApiResponse&lt;StoriesDeleteStoryRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoriesDeleteStoryRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteStoryRecordWithHttpInfo(storyGid, optPretty);
        }

        /**
         * Execute deleteStoryRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoriesDeleteStoryRecordResponse> _callback) throws ApiException {
            return deleteStoryRecordAsync(storyGid, optPretty, _callback);
        }
    }

    /**
     * Delete a story
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * @param storyGid Globally unique identifier for the story. (required)
     * @return DeleteStoryRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified story. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStoryRecordRequestBuilder deleteStoryRecord(String storyGid) throws IllegalArgumentException {
        if (storyGid == null) throw new IllegalArgumentException("\"storyGid\" is required but got null");
            

        return new DeleteStoryRecordRequestBuilder(storyGid);
    }
    private okhttp3.Call getFullRecordCall(String storyGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stories/{story_gid}"
            .replace("{" + "story_gid" + "}", localVarApiClient.escapeString(storyGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFullRecordValidateBeforeCall(String storyGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyGid' is set
        if (storyGid == null) {
            throw new ApiException("Missing the required parameter 'storyGid' when calling getFullRecord(Async)");
        }

        return getFullRecordCall(storyGid, optPretty, optFields, _callback);

    }


    private ApiResponse<StoriesGetFullRecordResponse> getFullRecordWithHttpInfo(String storyGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(storyGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<StoriesGetFullRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFullRecordAsync(String storyGid, Boolean optPretty, List<String> optFields, final ApiCallback<StoriesGetFullRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(storyGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<StoriesGetFullRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFullRecordRequestBuilder {
        private final String storyGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetFullRecordRequestBuilder(String storyGid) {
            this.storyGid = storyGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getFullRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFullRecordCall(storyGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getFullRecord request
         * @return StoriesGetFullRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public StoriesGetFullRecordResponse execute() throws ApiException {
            ApiResponse<StoriesGetFullRecordResponse> localVarResp = getFullRecordWithHttpInfo(storyGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFullRecord request with HTTP info returned
         * @return ApiResponse&lt;StoriesGetFullRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoriesGetFullRecordResponse> executeWithHttpInfo() throws ApiException {
            return getFullRecordWithHttpInfo(storyGid, optPretty, optFields);
        }

        /**
         * Execute getFullRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoriesGetFullRecordResponse> _callback) throws ApiException {
            return getFullRecordAsync(storyGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a story
     * Returns the full record for a single story.
     * @param storyGid Globally unique identifier for the story. (required)
     * @return GetFullRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
     </table>
     */
    public GetFullRecordRequestBuilder getFullRecord(String storyGid) throws IllegalArgumentException {
        if (storyGid == null) throw new IllegalArgumentException("\"storyGid\" is required but got null");
            

        return new GetFullRecordRequestBuilder(storyGid);
    }
    private okhttp3.Call getTaskStoriesCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/stories"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskStoriesValidateBeforeCall(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getTaskStories(Async)");
        }

        return getTaskStoriesCall(taskGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<StoriesGetTaskStoriesResponse> getTaskStoriesWithHttpInfo(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTaskStoriesValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<StoriesGetTaskStoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskStoriesAsync(String taskGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<StoriesGetTaskStoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskStoriesValidateBeforeCall(taskGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<StoriesGetTaskStoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskStoriesRequestBuilder {
        private final String taskGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetTaskStoriesRequestBuilder(String taskGid) {
            this.taskGid = taskGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetTaskStoriesRequestBuilder
         */
        public GetTaskStoriesRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetTaskStoriesRequestBuilder
         */
        public GetTaskStoriesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetTaskStoriesRequestBuilder
         */
        public GetTaskStoriesRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetTaskStoriesRequestBuilder
         */
        public GetTaskStoriesRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getTaskStories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s stories. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskStoriesCall(taskGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getTaskStories request
         * @return StoriesGetTaskStoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s stories. </td><td>  -  </td></tr>
         </table>
         */
        public StoriesGetTaskStoriesResponse execute() throws ApiException {
            ApiResponse<StoriesGetTaskStoriesResponse> localVarResp = getTaskStoriesWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskStories request with HTTP info returned
         * @return ApiResponse&lt;StoriesGetTaskStoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s stories. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoriesGetTaskStoriesResponse> executeWithHttpInfo() throws ApiException {
            return getTaskStoriesWithHttpInfo(taskGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getTaskStories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s stories. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoriesGetTaskStoriesResponse> _callback) throws ApiException {
            return getTaskStoriesAsync(taskGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get stories from a task
     * Returns the compact records for all stories on the task.
     * @param taskGid The task to operate on. (required)
     * @return GetTaskStoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s stories. </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskStoriesRequestBuilder getTaskStories(String taskGid) throws IllegalArgumentException {
        if (taskGid == null) throw new IllegalArgumentException("\"taskGid\" is required but got null");
            

        return new GetTaskStoriesRequestBuilder(taskGid);
    }
    private okhttp3.Call updateFullRecordCall(String storyGid, StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storiesUpdateFullRecordRequest;

        // create path and map variables
        String localVarPath = "/stories/{story_gid}"
            .replace("{" + "story_gid" + "}", localVarApiClient.escapeString(storyGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFullRecordValidateBeforeCall(String storyGid, StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyGid' is set
        if (storyGid == null) {
            throw new ApiException("Missing the required parameter 'storyGid' when calling updateFullRecord(Async)");
        }

        // verify the required parameter 'storiesUpdateFullRecordRequest' is set
        if (storiesUpdateFullRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'storiesUpdateFullRecordRequest' when calling updateFullRecord(Async)");
        }

        return updateFullRecordCall(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<StoriesUpdateFullRecordResponse> updateFullRecordWithHttpInfo(String storyGid, StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateFullRecordValidateBeforeCall(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<StoriesUpdateFullRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFullRecordAsync(String storyGid, StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<StoriesUpdateFullRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFullRecordValidateBeforeCall(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<StoriesUpdateFullRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFullRecordRequestBuilder {
        private final String storyGid;
        private StoryBase data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateFullRecordRequestBuilder(String storyGid) {
            this.storyGid = storyGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateFullRecordRequestBuilder
         */
        public UpdateFullRecordRequestBuilder data(StoryBase data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateFullRecordRequestBuilder
         */
        public UpdateFullRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateFullRecordRequestBuilder
         */
        public UpdateFullRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateFullRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest = buildBodyParams();
            return updateFullRecordCall(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields, _callback);
        }

        private StoriesUpdateFullRecordRequest buildBodyParams() {
            StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest = new StoriesUpdateFullRecordRequest();
            storiesUpdateFullRecordRequest.data(this.data);
            return storiesUpdateFullRecordRequest;
        }

        /**
         * Execute updateFullRecord request
         * @return StoriesUpdateFullRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public StoriesUpdateFullRecordResponse execute() throws ApiException {
            StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest = buildBodyParams();
            ApiResponse<StoriesUpdateFullRecordResponse> localVarResp = updateFullRecordWithHttpInfo(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFullRecord request with HTTP info returned
         * @return ApiResponse&lt;StoriesUpdateFullRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StoriesUpdateFullRecordResponse> executeWithHttpInfo() throws ApiException {
            StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest = buildBodyParams();
            return updateFullRecordWithHttpInfo(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateFullRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StoriesUpdateFullRecordResponse> _callback) throws ApiException {
            StoriesUpdateFullRecordRequest storiesUpdateFullRecordRequest = buildBodyParams();
            return updateFullRecordAsync(storyGid, storiesUpdateFullRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a story
     * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of &#x60;text&#x60; and &#x60;html_text&#x60; can be specified.
     * @param storyGid Globally unique identifier for the story. (required)
     * @param storiesUpdateFullRecordRequest The comment story to update. (required)
     * @return UpdateFullRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified story. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFullRecordRequestBuilder updateFullRecord(String storyGid) throws IllegalArgumentException {
        if (storyGid == null) throw new IllegalArgumentException("\"storyGid\" is required but got null");
            

        return new UpdateFullRecordRequestBuilder(storyGid);
    }
}
