/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AttachmentRequest;
import com.konfigthis.client.model.AttachmentsDeleteSpecificResponse;
import com.konfigthis.client.model.AttachmentsGetAllForObjectResponse;
import com.konfigthis.client.model.AttachmentsGetAttachmentRecordResponse;
import com.konfigthis.client.model.AttachmentsUploadAttachmentResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AttachmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteSpecificCall(String attachmentGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachment_gid}"
            .replace("{" + "attachment_gid" + "}", localVarApiClient.escapeString(attachmentGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificValidateBeforeCall(String attachmentGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentGid' is set
        if (attachmentGid == null) {
            throw new ApiException("Missing the required parameter 'attachmentGid' when calling deleteSpecific(Async)");
        }

        return deleteSpecificCall(attachmentGid, optPretty, _callback);

    }


    private ApiResponse<AttachmentsDeleteSpecificResponse> deleteSpecificWithHttpInfo(String attachmentGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificValidateBeforeCall(attachmentGid, optPretty, null);
        Type localVarReturnType = new TypeToken<AttachmentsDeleteSpecificResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSpecificAsync(String attachmentGid, Boolean optPretty, final ApiCallback<AttachmentsDeleteSpecificResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificValidateBeforeCall(attachmentGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<AttachmentsDeleteSpecificResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSpecificRequestBuilder {
        private final String attachmentGid;
        private Boolean optPretty;

        private DeleteSpecificRequestBuilder(String attachmentGid) {
            this.attachmentGid = attachmentGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteSpecificRequestBuilder
         */
        public DeleteSpecificRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteSpecific
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified attachment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificCall(attachmentGid, optPretty, _callback);
        }


        /**
         * Execute deleteSpecific request
         * @return AttachmentsDeleteSpecificResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified attachment. </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentsDeleteSpecificResponse execute() throws ApiException {
            ApiResponse<AttachmentsDeleteSpecificResponse> localVarResp = deleteSpecificWithHttpInfo(attachmentGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSpecific request with HTTP info returned
         * @return ApiResponse&lt;AttachmentsDeleteSpecificResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified attachment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentsDeleteSpecificResponse> executeWithHttpInfo() throws ApiException {
            return deleteSpecificWithHttpInfo(attachmentGid, optPretty);
        }

        /**
         * Execute deleteSpecific request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified attachment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentsDeleteSpecificResponse> _callback) throws ApiException {
            return deleteSpecificAsync(attachmentGid, optPretty, _callback);
        }
    }

    /**
     * Delete an attachment
     * Deletes a specific, existing attachment.  Returns an empty data record.
     * @param attachmentGid Globally unique identifier for the attachment. (required)
     * @return DeleteSpecificRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified attachment. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificRequestBuilder deleteSpecific(String attachmentGid) throws IllegalArgumentException {
        if (attachmentGid == null) throw new IllegalArgumentException("\"attachmentGid\" is required but got null");
            

        return new DeleteSpecificRequestBuilder(attachmentGid);
    }
    private okhttp3.Call getAllForObjectCall(String parent, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForObjectValidateBeforeCall(String parent, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling getAllForObject(Async)");
        }

        return getAllForObjectCall(parent, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<AttachmentsGetAllForObjectResponse> getAllForObjectWithHttpInfo(String parent, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getAllForObjectValidateBeforeCall(parent, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<AttachmentsGetAllForObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForObjectAsync(String parent, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<AttachmentsGetAllForObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForObjectValidateBeforeCall(parent, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<AttachmentsGetAllForObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForObjectRequestBuilder {
        private final String parent;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private GetAllForObjectRequestBuilder(String parent) {
            this.parent = parent;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetAllForObjectRequestBuilder
         */
        public GetAllForObjectRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return GetAllForObjectRequestBuilder
         */
        public GetAllForObjectRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return GetAllForObjectRequestBuilder
         */
        public GetAllForObjectRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetAllForObjectRequestBuilder
         */
        public GetAllForObjectRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getAllForObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s attachments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForObjectCall(parent, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute getAllForObject request
         * @return AttachmentsGetAllForObjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s attachments. </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentsGetAllForObjectResponse execute() throws ApiException {
            ApiResponse<AttachmentsGetAllForObjectResponse> localVarResp = getAllForObjectWithHttpInfo(parent, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForObject request with HTTP info returned
         * @return ApiResponse&lt;AttachmentsGetAllForObjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s attachments. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentsGetAllForObjectResponse> executeWithHttpInfo() throws ApiException {
            return getAllForObjectWithHttpInfo(parent, optPretty, limit, offset, optFields);
        }

        /**
         * Execute getAllForObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s attachments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentsGetAllForObjectResponse> _callback) throws ApiException {
            return getAllForObjectAsync(parent, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get attachments from an object
     * Returns the compact records for all attachments on the object.  There are three possible &#x60;parent&#x60; values for this request: &#x60;project&#x60;, &#x60;project_brief&#x60;, and &#x60;task&#x60;. For a project, an attachment refers to a file uploaded to the \&quot;Key resources\&quot; section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to &#x60;GET /attachments&#x60; for a task will return all of the images in the task, including inline images.
     * @param parent Globally unique identifier for object to fetch statuses from. Must be a GID for a &#x60;project&#x60;, &#x60;project_brief&#x60;, or &#x60;task&#x60;. (required)
     * @return GetAllForObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified object&#39;s attachments. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForObjectRequestBuilder getAllForObject(String parent) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
            

        return new GetAllForObjectRequestBuilder(parent);
    }
    private okhttp3.Call getAttachmentRecordCall(String attachmentGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachment_gid}"
            .replace("{" + "attachment_gid" + "}", localVarApiClient.escapeString(attachmentGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentRecordValidateBeforeCall(String attachmentGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentGid' is set
        if (attachmentGid == null) {
            throw new ApiException("Missing the required parameter 'attachmentGid' when calling getAttachmentRecord(Async)");
        }

        return getAttachmentRecordCall(attachmentGid, optPretty, optFields, _callback);

    }


    private ApiResponse<AttachmentsGetAttachmentRecordResponse> getAttachmentRecordWithHttpInfo(String attachmentGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentRecordValidateBeforeCall(attachmentGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<AttachmentsGetAttachmentRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentRecordAsync(String attachmentGid, Boolean optPretty, List<String> optFields, final ApiCallback<AttachmentsGetAttachmentRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentRecordValidateBeforeCall(attachmentGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<AttachmentsGetAttachmentRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttachmentRecordRequestBuilder {
        private final String attachmentGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetAttachmentRecordRequestBuilder(String attachmentGid) {
            this.attachmentGid = attachmentGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetAttachmentRecordRequestBuilder
         */
        public GetAttachmentRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetAttachmentRecordRequestBuilder
         */
        public GetAttachmentRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getAttachmentRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single attachment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentRecordCall(attachmentGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getAttachmentRecord request
         * @return AttachmentsGetAttachmentRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single attachment. </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentsGetAttachmentRecordResponse execute() throws ApiException {
            ApiResponse<AttachmentsGetAttachmentRecordResponse> localVarResp = getAttachmentRecordWithHttpInfo(attachmentGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttachmentRecord request with HTTP info returned
         * @return ApiResponse&lt;AttachmentsGetAttachmentRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single attachment. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentsGetAttachmentRecordResponse> executeWithHttpInfo() throws ApiException {
            return getAttachmentRecordWithHttpInfo(attachmentGid, optPretty, optFields);
        }

        /**
         * Execute getAttachmentRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a single attachment. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentsGetAttachmentRecordResponse> _callback) throws ApiException {
            return getAttachmentRecordAsync(attachmentGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get an attachment
     * Get the full record for a single attachment.
     * @param attachmentGid Globally unique identifier for the attachment. (required)
     * @return GetAttachmentRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single attachment. </td><td>  -  </td></tr>
     </table>
     */
    public GetAttachmentRecordRequestBuilder getAttachmentRecord(String attachmentGid) throws IllegalArgumentException {
        if (attachmentGid == null) throw new IllegalArgumentException("\"attachmentGid\" is required but got null");
            

        return new GetAttachmentRecordRequestBuilder(attachmentGid);
    }
    private okhttp3.Call uploadAttachmentCall(String parent, Boolean optPretty, List<String> optFields, String resourceSubtype, File _file, String url, String name, Boolean connectToApp, AttachmentRequest attachmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachmentRequest;

        // create path and map variables
        String localVarPath = "/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceSubtype != null) {
            localVarFormParams.put("resource_subtype", resourceSubtype);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (parent != null) {
            localVarFormParams.put("parent", parent);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (connectToApp != null) {
            localVarFormParams.put("connect_to_app", connectToApp);
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAttachmentValidateBeforeCall(String parent, Boolean optPretty, List<String> optFields, String resourceSubtype, File _file, String url, String name, Boolean connectToApp, AttachmentRequest attachmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling uploadAttachment(Async)");
        }

        return uploadAttachmentCall(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest, _callback);

    }


    private ApiResponse<AttachmentsUploadAttachmentResponse> uploadAttachmentWithHttpInfo(String parent, Boolean optPretty, List<String> optFields, String resourceSubtype, File _file, String url, String name, Boolean connectToApp, AttachmentRequest attachmentRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest, null);
        Type localVarReturnType = new TypeToken<AttachmentsUploadAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAttachmentAsync(String parent, Boolean optPretty, List<String> optFields, String resourceSubtype, File _file, String url, String name, Boolean connectToApp, AttachmentRequest attachmentRequest, final ApiCallback<AttachmentsUploadAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest, _callback);
        Type localVarReturnType = new TypeToken<AttachmentsUploadAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadAttachmentRequestBuilder {
        private final String parent;
        private Boolean optPretty;
        private List<String> optFields;
        private String resourceSubtype;
        private File _file;
        private String url;
        private String name;
        private Boolean connectToApp;

        private UploadAttachmentRequestBuilder(String parent) {
            this.parent = parent;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Set resourceSubtype
         * @param resourceSubtype The type of the attachment. Must be one of the given values. If not specified, a file attachment of type &#x60;asana&#x60; will be assumed. Note that if the value of &#x60;resource_subtype&#x60; is &#x60;external&#x60;, a &#x60;parent&#x60;, &#x60;name&#x60;, and &#x60;url&#x60; must also be provided.  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder resourceSubtype(String resourceSubtype) {
            this.resourceSubtype = resourceSubtype;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Required for &#x60;asana&#x60; attachments.  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set url
         * @param url The URL of the external resource being attached. Required for attachments of type &#x60;external&#x60;.  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the external resource being attached. Required for attachments of type &#x60;external&#x60;.  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set connectToApp
         * @param connectToApp *Optional*. Only relevant for external attachments with a parent task. A boolean indicating whether the current app should be connected with the attachment for the purposes of showing an app components widget. Requires the app to have been added to a project the parent task is in.  (optional)
         * @return UploadAttachmentRequestBuilder
         */
        public UploadAttachmentRequestBuilder connectToApp(Boolean connectToApp) {
            this.connectToApp = connectToApp;
            return this;
        }
        
        /**
         * Build call for uploadAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully uploaded the attachment to the parent object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttachmentRequest attachmentRequest = buildBodyParams();
            return uploadAttachmentCall(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest, _callback);
        }

        private AttachmentRequest buildBodyParams() {
            AttachmentRequest attachmentRequest = new AttachmentRequest();
            if (this.resourceSubtype != null)
            attachmentRequest.resourceSubtype(AttachmentRequest.ResourceSubtypeEnum.fromValue(this.resourceSubtype));
            attachmentRequest._file(this._file);
            attachmentRequest.parent(this.parent);
            attachmentRequest.url(this.url);
            attachmentRequest.name(this.name);
            attachmentRequest.connectToApp(this.connectToApp);
            return attachmentRequest;
        }

        /**
         * Execute uploadAttachment request
         * @return AttachmentsUploadAttachmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully uploaded the attachment to the parent object. </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentsUploadAttachmentResponse execute() throws ApiException {
            AttachmentRequest attachmentRequest = buildBodyParams();
            ApiResponse<AttachmentsUploadAttachmentResponse> localVarResp = uploadAttachmentWithHttpInfo(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadAttachment request with HTTP info returned
         * @return ApiResponse&lt;AttachmentsUploadAttachmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully uploaded the attachment to the parent object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentsUploadAttachmentResponse> executeWithHttpInfo() throws ApiException {
            AttachmentRequest attachmentRequest = buildBodyParams();
            return uploadAttachmentWithHttpInfo(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest);
        }

        /**
         * Execute uploadAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully uploaded the attachment to the parent object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentsUploadAttachmentResponse> _callback) throws ApiException {
            AttachmentRequest attachmentRequest = buildBodyParams();
            return uploadAttachmentAsync(parent, optPretty, optFields, resourceSubtype, _file, url, name, connectToApp, attachmentRequest, _callback);
        }
    }

    /**
     * Upload an attachment
     * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo &amp; Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form &#x60;CRLF&#x60; or &#x60;\\r\\n&#x60; outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
     * @param parent Required identifier of the parent task, project, or project_brief, as a string.  (required)
     * @return UploadAttachmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully uploaded the attachment to the parent object. </td><td>  -  </td></tr>
     </table>
     */
    public UploadAttachmentRequestBuilder uploadAttachment(String parent) throws IllegalArgumentException {
        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
            

        return new UploadAttachmentRequestBuilder(parent);
    }
}
