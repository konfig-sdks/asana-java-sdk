/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TeamMembershipsGetCompactRecordsResponse;
import com.konfigthis.client.model.TeamMembershipsGetCompactResponse;
import com.konfigthis.client.model.TeamMembershipsGetRecordByIdResponse;
import com.konfigthis.client.model.TeamMembershipsGetUserCompactResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamMembershipsApi
 */
@Disabled
public class TeamMembershipsApiTest {

    private static TeamMembershipsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TeamMembershipsApi(apiClient);
    }

    /**
     * Get memberships from a team
     *
     * Returns the compact team memberships for the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompactTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        TeamMembershipsGetCompactResponse response = api.getCompact(teamGid)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get team memberships
     *
     * Returns compact team membership records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompactRecordsTest() throws ApiException {
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        String team = null;
        String user = null;
        String workspace = null;
        List<String> optFields = null;
        TeamMembershipsGetCompactRecordsResponse response = api.getCompactRecords()
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .team(team)
                .user(user)
                .workspace(workspace)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a team membership
     *
     * Returns the complete team membership record for a single team membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordByIdTest() throws ApiException {
        String teamMembershipGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        TeamMembershipsGetRecordByIdResponse response = api.getRecordById(teamMembershipGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get memberships from a user
     *
     * Returns the compact team membership records for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserCompactTest() throws ApiException {
        String userGid = null;
        String workspace = null;
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        TeamMembershipsGetUserCompactResponse response = api.getUserCompact(userGid, workspace)
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
