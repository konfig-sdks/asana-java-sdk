/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.WorkspaceAddUserRequest;
import com.konfigthis.client.model.WorkspaceCompact;
import com.konfigthis.client.model.WorkspaceRemoveUserRequest;
import com.konfigthis.client.model.WorkspacesAddUserToWorkspaceRequest;
import com.konfigthis.client.model.WorkspacesAddUserToWorkspaceResponse;
import com.konfigthis.client.model.WorkspacesGetWorkspaceRecordResponse;
import com.konfigthis.client.model.WorkspacesListMultipleResponse;
import com.konfigthis.client.model.WorkspacesRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.WorkspacesRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.WorkspacesUpdateWorkspaceRecordRequest;
import com.konfigthis.client.model.WorkspacesUpdateWorkspaceRecordResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkspacesApi
 */
@Disabled
public class WorkspacesApiTest {

    private static WorkspacesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WorkspacesApi(apiClient);
    }

    /**
     * Add a user to a workspace or organization
     *
     * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        WorkspaceAddUserRequest data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        WorkspacesAddUserToWorkspaceResponse response = api.addUserToWorkspace(workspaceGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a workspace
     *
     * Returns the full workspace record for a single workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkspaceRecordTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        WorkspacesGetWorkspaceRecordResponse response = api.getWorkspaceRecord(workspaceGid)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple workspaces
     *
     * Returns the compact records for all workspaces visible to the authorized user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultipleTest() throws ApiException {
        Boolean optPretty = null;
        Integer limit = null;
        String offset = null;
        List<String> optFields = null;
        WorkspacesListMultipleResponse response = api.listMultiple()
                .optPretty(optPretty)
                .limit(limit)
                .offset(offset)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a user from a workspace or organization
     *
     * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        WorkspaceRemoveUserRequest data = null;
        Boolean optPretty = null;
        WorkspacesRemoveUserFromWorkspaceResponse response = api.removeUserFromWorkspace(workspaceGid)
                .data(data)
                .optPretty(optPretty)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a workspace
     *
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceRecordTest() throws ApiException {
        String workspaceGid = null;
        WorkspaceCompact data = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        WorkspacesUpdateWorkspaceRecordResponse response = api.updateWorkspaceRecord(workspaceGid)
                .data(data)
                .optPretty(optPretty)
                .optFields(optFields)
                .execute();
        // TODO: test validations
    }

}
