/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectBriefRequest;
import com.konfigthis.client.model.ProjectBriefsCreateNewRecordRequest;
import com.konfigthis.client.model.ProjectBriefsCreateNewRecordResponse;
import com.konfigthis.client.model.ProjectBriefsGetFullRecordResponse;
import com.konfigthis.client.model.ProjectBriefsRemoveBriefResponse;
import com.konfigthis.client.model.ProjectBriefsUpdateBriefRecordRequest;
import com.konfigthis.client.model.ProjectBriefsUpdateBriefRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectBriefsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectBriefsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectBriefsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRecordCall(String projectGid, ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectBriefsCreateNewRecordRequest;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/project_briefs"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRecordValidateBeforeCall(String projectGid, ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling createNewRecord(Async)");
        }

        // verify the required parameter 'projectBriefsCreateNewRecordRequest' is set
        if (projectBriefsCreateNewRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'projectBriefsCreateNewRecordRequest' when calling createNewRecord(Async)");
        }

        return createNewRecordCall(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectBriefsCreateNewRecordResponse> createNewRecordWithHttpInfo(String projectGid, ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectBriefsCreateNewRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewRecordAsync(String projectGid, ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectBriefsCreateNewRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectBriefsCreateNewRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRecordRequestBuilder {
        private final String projectGid;
        private ProjectBriefRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewRecordRequestBuilder(String projectGid) {
            this.projectGid = projectGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder data(ProjectBriefRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordCall(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields, _callback);
        }

        private ProjectBriefsCreateNewRecordRequest buildBodyParams() {
            ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest = new ProjectBriefsCreateNewRecordRequest();
            projectBriefsCreateNewRecordRequest.data(this.data);
            return projectBriefsCreateNewRecordRequest;
        }

        /**
         * Execute createNewRecord request
         * @return ProjectBriefsCreateNewRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectBriefsCreateNewRecordResponse execute() throws ApiException {
            ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest = buildBodyParams();
            ApiResponse<ProjectBriefsCreateNewRecordResponse> localVarResp = createNewRecordWithHttpInfo(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectBriefsCreateNewRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectBriefsCreateNewRecordResponse> executeWithHttpInfo() throws ApiException {
            ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordWithHttpInfo(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectBriefsCreateNewRecordResponse> _callback) throws ApiException {
            ProjectBriefsCreateNewRecordRequest projectBriefsCreateNewRecordRequest = buildBodyParams();
            return createNewRecordAsync(projectGid, projectBriefsCreateNewRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a project brief
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param projectBriefsCreateNewRecordRequest The project brief to create. (required)
     * @return CreateNewRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new project brief. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRecordRequestBuilder createNewRecord(String projectGid) throws IllegalArgumentException {
        if (projectGid == null) throw new IllegalArgumentException("\"projectGid\" is required but got null");
            

        return new CreateNewRecordRequestBuilder(projectGid);
    }
    private okhttp3.Call getFullRecordCall(String projectBriefGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_briefs/{project_brief_gid}"
            .replace("{" + "project_brief_gid" + "}", localVarApiClient.escapeString(projectBriefGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFullRecordValidateBeforeCall(String projectBriefGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectBriefGid' is set
        if (projectBriefGid == null) {
            throw new ApiException("Missing the required parameter 'projectBriefGid' when calling getFullRecord(Async)");
        }

        return getFullRecordCall(projectBriefGid, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectBriefsGetFullRecordResponse> getFullRecordWithHttpInfo(String projectBriefGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(projectBriefGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectBriefsGetFullRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFullRecordAsync(String projectBriefGid, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectBriefsGetFullRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFullRecordValidateBeforeCall(projectBriefGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectBriefsGetFullRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFullRecordRequestBuilder {
        private final String projectBriefGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetFullRecordRequestBuilder(String projectBriefGid) {
            this.projectBriefGid = projectBriefGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetFullRecordRequestBuilder
         */
        public GetFullRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getFullRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFullRecordCall(projectBriefGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getFullRecord request
         * @return ProjectBriefsGetFullRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectBriefsGetFullRecordResponse execute() throws ApiException {
            ApiResponse<ProjectBriefsGetFullRecordResponse> localVarResp = getFullRecordWithHttpInfo(projectBriefGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFullRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectBriefsGetFullRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectBriefsGetFullRecordResponse> executeWithHttpInfo() throws ApiException {
            return getFullRecordWithHttpInfo(projectBriefGid, optPretty, optFields);
        }

        /**
         * Execute getFullRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the record for a project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectBriefsGetFullRecordResponse> _callback) throws ApiException {
            return getFullRecordAsync(projectBriefGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a project brief
     * Get the full record for a project brief.
     * @param projectBriefGid Globally unique identifier for the project brief. (required)
     * @return GetFullRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a project brief. </td><td>  -  </td></tr>
     </table>
     */
    public GetFullRecordRequestBuilder getFullRecord(String projectBriefGid) throws IllegalArgumentException {
        if (projectBriefGid == null) throw new IllegalArgumentException("\"projectBriefGid\" is required but got null");
            

        return new GetFullRecordRequestBuilder(projectBriefGid);
    }
    private okhttp3.Call removeBriefCall(String projectBriefGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project_briefs/{project_brief_gid}"
            .replace("{" + "project_brief_gid" + "}", localVarApiClient.escapeString(projectBriefGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBriefValidateBeforeCall(String projectBriefGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectBriefGid' is set
        if (projectBriefGid == null) {
            throw new ApiException("Missing the required parameter 'projectBriefGid' when calling removeBrief(Async)");
        }

        return removeBriefCall(projectBriefGid, optPretty, _callback);

    }


    private ApiResponse<ProjectBriefsRemoveBriefResponse> removeBriefWithHttpInfo(String projectBriefGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = removeBriefValidateBeforeCall(projectBriefGid, optPretty, null);
        Type localVarReturnType = new TypeToken<ProjectBriefsRemoveBriefResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeBriefAsync(String projectBriefGid, Boolean optPretty, final ApiCallback<ProjectBriefsRemoveBriefResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBriefValidateBeforeCall(projectBriefGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<ProjectBriefsRemoveBriefResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveBriefRequestBuilder {
        private final String projectBriefGid;
        private Boolean optPretty;

        private RemoveBriefRequestBuilder(String projectBriefGid) {
            this.projectBriefGid = projectBriefGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return RemoveBriefRequestBuilder
         */
        public RemoveBriefRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for removeBrief
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeBriefCall(projectBriefGid, optPretty, _callback);
        }


        /**
         * Execute removeBrief request
         * @return ProjectBriefsRemoveBriefResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectBriefsRemoveBriefResponse execute() throws ApiException {
            ApiResponse<ProjectBriefsRemoveBriefResponse> localVarResp = removeBriefWithHttpInfo(projectBriefGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeBrief request with HTTP info returned
         * @return ApiResponse&lt;ProjectBriefsRemoveBriefResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectBriefsRemoveBriefResponse> executeWithHttpInfo() throws ApiException {
            return removeBriefWithHttpInfo(projectBriefGid, optPretty);
        }

        /**
         * Execute removeBrief request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted the specified project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectBriefsRemoveBriefResponse> _callback) throws ApiException {
            return removeBriefAsync(projectBriefGid, optPretty, _callback);
        }
    }

    /**
     * Delete a project brief
     * Deletes a specific, existing project brief.  Returns an empty data record.
     * @param projectBriefGid Globally unique identifier for the project brief. (required)
     * @return RemoveBriefRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified project brief. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBriefRequestBuilder removeBrief(String projectBriefGid) throws IllegalArgumentException {
        if (projectBriefGid == null) throw new IllegalArgumentException("\"projectBriefGid\" is required but got null");
            

        return new RemoveBriefRequestBuilder(projectBriefGid);
    }
    private okhttp3.Call updateBriefRecordCall(String projectBriefGid, ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectBriefsUpdateBriefRecordRequest;

        // create path and map variables
        String localVarPath = "/project_briefs/{project_brief_gid}"
            .replace("{" + "project_brief_gid" + "}", localVarApiClient.escapeString(projectBriefGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBriefRecordValidateBeforeCall(String projectBriefGid, ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectBriefGid' is set
        if (projectBriefGid == null) {
            throw new ApiException("Missing the required parameter 'projectBriefGid' when calling updateBriefRecord(Async)");
        }

        // verify the required parameter 'projectBriefsUpdateBriefRecordRequest' is set
        if (projectBriefsUpdateBriefRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'projectBriefsUpdateBriefRecordRequest' when calling updateBriefRecord(Async)");
        }

        return updateBriefRecordCall(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<ProjectBriefsUpdateBriefRecordResponse> updateBriefRecordWithHttpInfo(String projectBriefGid, ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateBriefRecordValidateBeforeCall(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<ProjectBriefsUpdateBriefRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBriefRecordAsync(String projectBriefGid, ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<ProjectBriefsUpdateBriefRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBriefRecordValidateBeforeCall(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<ProjectBriefsUpdateBriefRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBriefRecordRequestBuilder {
        private final String projectBriefGid;
        private ProjectBriefRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateBriefRecordRequestBuilder(String projectBriefGid) {
            this.projectBriefGid = projectBriefGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateBriefRecordRequestBuilder
         */
        public UpdateBriefRecordRequestBuilder data(ProjectBriefRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateBriefRecordRequestBuilder
         */
        public UpdateBriefRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateBriefRecordRequestBuilder
         */
        public UpdateBriefRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateBriefRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest = buildBodyParams();
            return updateBriefRecordCall(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields, _callback);
        }

        private ProjectBriefsUpdateBriefRecordRequest buildBodyParams() {
            ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest = new ProjectBriefsUpdateBriefRecordRequest();
            projectBriefsUpdateBriefRecordRequest.data(this.data);
            return projectBriefsUpdateBriefRecordRequest;
        }

        /**
         * Execute updateBriefRecord request
         * @return ProjectBriefsUpdateBriefRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ProjectBriefsUpdateBriefRecordResponse execute() throws ApiException {
            ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest = buildBodyParams();
            ApiResponse<ProjectBriefsUpdateBriefRecordResponse> localVarResp = updateBriefRecordWithHttpInfo(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBriefRecord request with HTTP info returned
         * @return ApiResponse&lt;ProjectBriefsUpdateBriefRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project brief. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectBriefsUpdateBriefRecordResponse> executeWithHttpInfo() throws ApiException {
            ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest = buildBodyParams();
            return updateBriefRecordWithHttpInfo(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields);
        }

        /**
         * Execute updateBriefRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the project brief. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectBriefsUpdateBriefRecordResponse> _callback) throws ApiException {
            ProjectBriefsUpdateBriefRecordRequest projectBriefsUpdateBriefRecordRequest = buildBodyParams();
            return updateBriefRecordAsync(projectBriefGid, projectBriefsUpdateBriefRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Update a project brief
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     * @param projectBriefGid Globally unique identifier for the project brief. (required)
     * @param projectBriefsUpdateBriefRecordRequest The updated fields for the project brief. (required)
     * @return UpdateBriefRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the project brief. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBriefRecordRequestBuilder updateBriefRecord(String projectBriefGid) throws IllegalArgumentException {
        if (projectBriefGid == null) throw new IllegalArgumentException("\"projectBriefGid\" is required but got null");
            

        return new UpdateBriefRecordRequestBuilder(projectBriefGid);
    }
}
