/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldRequest;
import com.konfigthis.client.model.CustomFieldsAddEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsAddEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsCreateNewFieldRecordRequest;
import com.konfigthis.client.model.CustomFieldsCreateNewFieldRecordResponse;
import com.konfigthis.client.model.CustomFieldsDeleteFieldRecordResponse;
import com.konfigthis.client.model.CustomFieldsGetMetadataResponse;
import com.konfigthis.client.model.CustomFieldsListWorkspaceCustomFieldsResponse;
import com.konfigthis.client.model.CustomFieldsReorderEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsReorderEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsUpdateEnumOptionRequest;
import com.konfigthis.client.model.CustomFieldsUpdateEnumOptionResponse;
import com.konfigthis.client.model.CustomFieldsUpdateFieldRecordRequest;
import com.konfigthis.client.model.CustomFieldsUpdateFieldRecordResponse;
import com.konfigthis.client.model.EnumOption;
import com.konfigthis.client.model.EnumOptionInsertRequest;
import com.konfigthis.client.model.EnumOptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEnumOptionCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsAddEnumOptionRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}/enum_options"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEnumOptionValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling addEnumOption(Async)");
        }

        return addEnumOptionCall(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest, _callback);

    }


    private ApiResponse<CustomFieldsAddEnumOptionResponse> addEnumOptionWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest) throws ApiException {
        okhttp3.Call localVarCall = addEnumOptionValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsAddEnumOptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEnumOptionAsync(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest, final ApiCallback<CustomFieldsAddEnumOptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEnumOptionValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsAddEnumOptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEnumOptionRequestBuilder {
        private final String customFieldGid;
        private EnumOptionRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private AddEnumOptionRequestBuilder(String customFieldGid) {
            this.customFieldGid = customFieldGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return AddEnumOptionRequestBuilder
         */
        public AddEnumOptionRequestBuilder data(EnumOptionRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return AddEnumOptionRequestBuilder
         */
        public AddEnumOptionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return AddEnumOptionRequestBuilder
         */
        public AddEnumOptionRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for addEnumOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest = buildBodyParams();
            return addEnumOptionCall(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest, _callback);
        }

        private CustomFieldsAddEnumOptionRequest buildBodyParams() {
            CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest = new CustomFieldsAddEnumOptionRequest();
            customFieldsAddEnumOptionRequest.data(this.data);
            return customFieldsAddEnumOptionRequest;
        }

        /**
         * Execute addEnumOption request
         * @return CustomFieldsAddEnumOptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsAddEnumOptionResponse execute() throws ApiException {
            CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest = buildBodyParams();
            ApiResponse<CustomFieldsAddEnumOptionResponse> localVarResp = addEnumOptionWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEnumOption request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsAddEnumOptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsAddEnumOptionResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest = buildBodyParams();
            return addEnumOptionWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest);
        }

        /**
         * Execute addEnumOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsAddEnumOptionResponse> _callback) throws ApiException {
            CustomFieldsAddEnumOptionRequest customFieldsAddEnumOptionRequest = buildBodyParams();
            return addEnumOptionAsync(customFieldGid, optPretty, optFields, customFieldsAddEnumOptionRequest, _callback);
        }
    }

    /**
     * Create an enum option
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @return AddEnumOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public AddEnumOptionRequestBuilder addEnumOption(String customFieldGid) throws IllegalArgumentException {
        if (customFieldGid == null) throw new IllegalArgumentException("\"customFieldGid\" is required but got null");
            

        return new AddEnumOptionRequestBuilder(customFieldGid);
    }
    private okhttp3.Call createNewFieldRecordCall(CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsCreateNewFieldRecordRequest;

        // create path and map variables
        String localVarPath = "/custom_fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFieldRecordValidateBeforeCall(CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldsCreateNewFieldRecordRequest' is set
        if (customFieldsCreateNewFieldRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldsCreateNewFieldRecordRequest' when calling createNewFieldRecord(Async)");
        }

        return createNewFieldRecordCall(customFieldsCreateNewFieldRecordRequest, optPretty, optFields, _callback);

    }


    private ApiResponse<CustomFieldsCreateNewFieldRecordResponse> createNewFieldRecordWithHttpInfo(CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createNewFieldRecordValidateBeforeCall(customFieldsCreateNewFieldRecordRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCreateNewFieldRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFieldRecordAsync(CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CustomFieldsCreateNewFieldRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFieldRecordValidateBeforeCall(customFieldsCreateNewFieldRecordRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCreateNewFieldRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFieldRecordRequestBuilder {
        private CustomFieldRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private CreateNewFieldRecordRequestBuilder() {
        }

        /**
         * Set data
         * @param data  (optional)
         * @return CreateNewFieldRecordRequestBuilder
         */
        public CreateNewFieldRecordRequestBuilder data(CustomFieldRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return CreateNewFieldRecordRequestBuilder
         */
        public CreateNewFieldRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return CreateNewFieldRecordRequestBuilder
         */
        public CreateNewFieldRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for createNewFieldRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest = buildBodyParams();
            return createNewFieldRecordCall(customFieldsCreateNewFieldRecordRequest, optPretty, optFields, _callback);
        }

        private CustomFieldsCreateNewFieldRecordRequest buildBodyParams() {
            CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest = new CustomFieldsCreateNewFieldRecordRequest();
            customFieldsCreateNewFieldRecordRequest.data(this.data);
            return customFieldsCreateNewFieldRecordRequest;
        }

        /**
         * Execute createNewFieldRecord request
         * @return CustomFieldsCreateNewFieldRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCreateNewFieldRecordResponse execute() throws ApiException {
            CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest = buildBodyParams();
            ApiResponse<CustomFieldsCreateNewFieldRecordResponse> localVarResp = createNewFieldRecordWithHttpInfo(customFieldsCreateNewFieldRecordRequest, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFieldRecord request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCreateNewFieldRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCreateNewFieldRecordResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest = buildBodyParams();
            return createNewFieldRecordWithHttpInfo(customFieldsCreateNewFieldRecordRequest, optPretty, optFields);
        }

        /**
         * Execute createNewFieldRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCreateNewFieldRecordResponse> _callback) throws ApiException {
            CustomFieldsCreateNewFieldRecordRequest customFieldsCreateNewFieldRecordRequest = buildBodyParams();
            return createNewFieldRecordAsync(customFieldsCreateNewFieldRecordRequest, optPretty, optFields, _callback);
        }
    }

    /**
     * Create a custom field
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as &#x60;Due Date&#x60; or &#x60;Assignee&#x60;. A custom field’s type must be one of &#x60;text&#x60;, &#x60;enum&#x60;, &#x60;multi_enum&#x60;, &#x60;number&#x60;, &#x60;date&#x60;, or &#x60;people&#x60;.  Returns the full record of the newly created custom field.
     * @param customFieldsCreateNewFieldRecordRequest The custom field object to create. (required)
     * @return CreateNewFieldRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFieldRecordRequestBuilder createNewFieldRecord() throws IllegalArgumentException {
        return new CreateNewFieldRecordRequestBuilder();
    }
    private okhttp3.Call deleteFieldRecordCall(String customFieldGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldRecordValidateBeforeCall(String customFieldGid, Boolean optPretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling deleteFieldRecord(Async)");
        }

        return deleteFieldRecordCall(customFieldGid, optPretty, _callback);

    }


    private ApiResponse<CustomFieldsDeleteFieldRecordResponse> deleteFieldRecordWithHttpInfo(String customFieldGid, Boolean optPretty) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldRecordValidateBeforeCall(customFieldGid, optPretty, null);
        Type localVarReturnType = new TypeToken<CustomFieldsDeleteFieldRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFieldRecordAsync(String customFieldGid, Boolean optPretty, final ApiCallback<CustomFieldsDeleteFieldRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldRecordValidateBeforeCall(customFieldGid, optPretty, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsDeleteFieldRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFieldRecordRequestBuilder {
        private final String customFieldGid;
        private Boolean optPretty;

        private DeleteFieldRecordRequestBuilder(String customFieldGid) {
            this.customFieldGid = customFieldGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return DeleteFieldRecordRequestBuilder
         */
        public DeleteFieldRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Build call for deleteFieldRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldRecordCall(customFieldGid, optPretty, _callback);
        }


        /**
         * Execute deleteFieldRecord request
         * @return CustomFieldsDeleteFieldRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsDeleteFieldRecordResponse execute() throws ApiException {
            ApiResponse<CustomFieldsDeleteFieldRecordResponse> localVarResp = deleteFieldRecordWithHttpInfo(customFieldGid, optPretty);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFieldRecord request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsDeleteFieldRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsDeleteFieldRecordResponse> executeWithHttpInfo() throws ApiException {
            return deleteFieldRecordWithHttpInfo(customFieldGid, optPretty);
        }

        /**
         * Execute deleteFieldRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsDeleteFieldRecordResponse> _callback) throws ApiException {
            return deleteFieldRecordAsync(customFieldGid, optPretty, _callback);
        }
    }

    /**
     * Delete a custom field
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @return DeleteFieldRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFieldRecordRequestBuilder deleteFieldRecord(String customFieldGid) throws IllegalArgumentException {
        if (customFieldGid == null) throw new IllegalArgumentException("\"customFieldGid\" is required but got null");
            

        return new DeleteFieldRecordRequestBuilder(customFieldGid);
    }
    private okhttp3.Call getMetadataCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling getMetadata(Async)");
        }

        return getMetadataCall(customFieldGid, optPretty, optFields, _callback);

    }


    private ApiResponse<CustomFieldsGetMetadataResponse> getMetadataWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(customFieldGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CustomFieldsGetMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataAsync(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback<CustomFieldsGetMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(customFieldGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsGetMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataRequestBuilder {
        private final String customFieldGid;
        private Boolean optPretty;
        private List<String> optFields;

        private GetMetadataRequestBuilder(String customFieldGid) {
            this.customFieldGid = customFieldGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for getMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataCall(customFieldGid, optPretty, optFields, _callback);
        }


        /**
         * Execute getMetadata request
         * @return CustomFieldsGetMetadataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsGetMetadataResponse execute() throws ApiException {
            ApiResponse<CustomFieldsGetMetadataResponse> localVarResp = getMetadataWithHttpInfo(customFieldGid, optPretty, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsGetMetadataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsGetMetadataResponse> executeWithHttpInfo() throws ApiException {
            return getMetadataWithHttpInfo(customFieldGid, optPretty, optFields);
        }

        /**
         * Execute getMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsGetMetadataResponse> _callback) throws ApiException {
            return getMetadataAsync(customFieldGid, optPretty, optFields, _callback);
        }
    }

    /**
     * Get a custom field
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @return GetMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataRequestBuilder getMetadata(String customFieldGid) throws IllegalArgumentException {
        if (customFieldGid == null) throw new IllegalArgumentException("\"customFieldGid\" is required but got null");
            

        return new GetMetadataRequestBuilder(customFieldGid);
    }
    private okhttp3.Call listWorkspaceCustomFieldsCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/custom_fields"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceCustomFieldsValidateBeforeCall(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling listWorkspaceCustomFields(Async)");
        }

        return listWorkspaceCustomFieldsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);

    }


    private ApiResponse<CustomFieldsListWorkspaceCustomFieldsResponse> listWorkspaceCustomFieldsWithHttpInfo(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceCustomFieldsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, null);
        Type localVarReturnType = new TypeToken<CustomFieldsListWorkspaceCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspaceCustomFieldsAsync(String workspaceGid, Boolean optPretty, Integer limit, String offset, List<String> optFields, final ApiCallback<CustomFieldsListWorkspaceCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceCustomFieldsValidateBeforeCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsListWorkspaceCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkspaceCustomFieldsRequestBuilder {
        private final String workspaceGid;
        private Boolean optPretty;
        private Integer limit;
        private String offset;
        private List<String> optFields;

        private ListWorkspaceCustomFieldsRequestBuilder(String workspaceGid) {
            this.workspaceGid = workspaceGid;
        }

        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ListWorkspaceCustomFieldsRequestBuilder
         */
        public ListWorkspaceCustomFieldsRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
         * @return ListWorkspaceCustomFieldsRequestBuilder
         */
        public ListWorkspaceCustomFieldsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
         * @return ListWorkspaceCustomFieldsRequestBuilder
         */
        public ListWorkspaceCustomFieldsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ListWorkspaceCustomFieldsRequestBuilder
         */
        public ListWorkspaceCustomFieldsRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for listWorkspaceCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspaceCustomFieldsCall(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }


        /**
         * Execute listWorkspaceCustomFields request
         * @return CustomFieldsListWorkspaceCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsListWorkspaceCustomFieldsResponse execute() throws ApiException {
            ApiResponse<CustomFieldsListWorkspaceCustomFieldsResponse> localVarResp = listWorkspaceCustomFieldsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkspaceCustomFields request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsListWorkspaceCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsListWorkspaceCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return listWorkspaceCustomFieldsWithHttpInfo(workspaceGid, optPretty, limit, offset, optFields);
        }

        /**
         * Execute listWorkspaceCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsListWorkspaceCustomFieldsResponse> _callback) throws ApiException {
            return listWorkspaceCustomFieldsAsync(workspaceGid, optPretty, limit, offset, optFields, _callback);
        }
    }

    /**
     * Get a workspace&#39;s custom fields
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @return ListWorkspaceCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkspaceCustomFieldsRequestBuilder listWorkspaceCustomFields(String workspaceGid) throws IllegalArgumentException {
        if (workspaceGid == null) throw new IllegalArgumentException("\"workspaceGid\" is required but got null");
            

        return new ListWorkspaceCustomFieldsRequestBuilder(workspaceGid);
    }
    private okhttp3.Call reorderEnumOptionCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsReorderEnumOptionRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}/enum_options/insert"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reorderEnumOptionValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling reorderEnumOption(Async)");
        }

        return reorderEnumOptionCall(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest, _callback);

    }


    private ApiResponse<CustomFieldsReorderEnumOptionResponse> reorderEnumOptionWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest) throws ApiException {
        okhttp3.Call localVarCall = reorderEnumOptionValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsReorderEnumOptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reorderEnumOptionAsync(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest, final ApiCallback<CustomFieldsReorderEnumOptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reorderEnumOptionValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsReorderEnumOptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReorderEnumOptionRequestBuilder {
        private final String customFieldGid;
        private EnumOptionInsertRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private ReorderEnumOptionRequestBuilder(String customFieldGid) {
            this.customFieldGid = customFieldGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return ReorderEnumOptionRequestBuilder
         */
        public ReorderEnumOptionRequestBuilder data(EnumOptionInsertRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return ReorderEnumOptionRequestBuilder
         */
        public ReorderEnumOptionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return ReorderEnumOptionRequestBuilder
         */
        public ReorderEnumOptionRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for reorderEnumOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest = buildBodyParams();
            return reorderEnumOptionCall(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest, _callback);
        }

        private CustomFieldsReorderEnumOptionRequest buildBodyParams() {
            CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest = new CustomFieldsReorderEnumOptionRequest();
            customFieldsReorderEnumOptionRequest.data(this.data);
            return customFieldsReorderEnumOptionRequest;
        }

        /**
         * Execute reorderEnumOption request
         * @return CustomFieldsReorderEnumOptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsReorderEnumOptionResponse execute() throws ApiException {
            CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest = buildBodyParams();
            ApiResponse<CustomFieldsReorderEnumOptionResponse> localVarResp = reorderEnumOptionWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reorderEnumOption request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsReorderEnumOptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsReorderEnumOptionResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest = buildBodyParams();
            return reorderEnumOptionWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest);
        }

        /**
         * Execute reorderEnumOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsReorderEnumOptionResponse> _callback) throws ApiException {
            CustomFieldsReorderEnumOptionRequest customFieldsReorderEnumOptionRequest = buildBodyParams();
            return reorderEnumOptionAsync(customFieldGid, optPretty, optFields, customFieldsReorderEnumOptionRequest, _callback);
        }
    }

    /**
     * Reorder a custom field&#39;s enum
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @return ReorderEnumOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
     </table>
     */
    public ReorderEnumOptionRequestBuilder reorderEnumOption(String customFieldGid) throws IllegalArgumentException {
        if (customFieldGid == null) throw new IllegalArgumentException("\"customFieldGid\" is required but got null");
            

        return new ReorderEnumOptionRequestBuilder(customFieldGid);
    }
    private okhttp3.Call updateEnumOptionCall(String enumOptionGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsUpdateEnumOptionRequest;

        // create path and map variables
        String localVarPath = "/enum_options/{enum_option_gid}"
            .replace("{" + "enum_option_gid" + "}", localVarApiClient.escapeString(enumOptionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnumOptionValidateBeforeCall(String enumOptionGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enumOptionGid' is set
        if (enumOptionGid == null) {
            throw new ApiException("Missing the required parameter 'enumOptionGid' when calling updateEnumOption(Async)");
        }

        return updateEnumOptionCall(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest, _callback);

    }


    private ApiResponse<CustomFieldsUpdateEnumOptionResponse> updateEnumOptionWithHttpInfo(String enumOptionGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEnumOptionValidateBeforeCall(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateEnumOptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEnumOptionAsync(String enumOptionGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest, final ApiCallback<CustomFieldsUpdateEnumOptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnumOptionValidateBeforeCall(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateEnumOptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEnumOptionRequestBuilder {
        private final String enumOptionGid;
        private EnumOption data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateEnumOptionRequestBuilder(String enumOptionGid) {
            this.enumOptionGid = enumOptionGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateEnumOptionRequestBuilder
         */
        public UpdateEnumOptionRequestBuilder data(EnumOption data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateEnumOptionRequestBuilder
         */
        public UpdateEnumOptionRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateEnumOptionRequestBuilder
         */
        public UpdateEnumOptionRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateEnumOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest = buildBodyParams();
            return updateEnumOptionCall(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest, _callback);
        }

        private CustomFieldsUpdateEnumOptionRequest buildBodyParams() {
            CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest = new CustomFieldsUpdateEnumOptionRequest();
            customFieldsUpdateEnumOptionRequest.data(this.data);
            return customFieldsUpdateEnumOptionRequest;
        }

        /**
         * Execute updateEnumOption request
         * @return CustomFieldsUpdateEnumOptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsUpdateEnumOptionResponse execute() throws ApiException {
            CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest = buildBodyParams();
            ApiResponse<CustomFieldsUpdateEnumOptionResponse> localVarResp = updateEnumOptionWithHttpInfo(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEnumOption request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsUpdateEnumOptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsUpdateEnumOptionResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest = buildBodyParams();
            return updateEnumOptionWithHttpInfo(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest);
        }

        /**
         * Execute updateEnumOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsUpdateEnumOptionResponse> _callback) throws ApiException {
            CustomFieldsUpdateEnumOptionRequest customFieldsUpdateEnumOptionRequest = buildBodyParams();
            return updateEnumOptionAsync(enumOptionGid, optPretty, optFields, customFieldsUpdateEnumOptionRequest, _callback);
        }
    }

    /**
     * Update an enum option
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @param enumOptionGid Globally unique identifier for the enum option. (required)
     * @return UpdateEnumOptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEnumOptionRequestBuilder updateEnumOption(String enumOptionGid) throws IllegalArgumentException {
        if (enumOptionGid == null) throw new IllegalArgumentException("\"enumOptionGid\" is required but got null");
            

        return new UpdateEnumOptionRequestBuilder(enumOptionGid);
    }
    private okhttp3.Call updateFieldRecordCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsUpdateFieldRecordRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "personalAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldRecordValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling updateFieldRecord(Async)");
        }

        return updateFieldRecordCall(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest, _callback);

    }


    private ApiResponse<CustomFieldsUpdateFieldRecordResponse> updateFieldRecordWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFieldRecordValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateFieldRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFieldRecordAsync(String customFieldGid, Boolean optPretty, List<String> optFields, CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest, final ApiCallback<CustomFieldsUpdateFieldRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldRecordValidateBeforeCall(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateFieldRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFieldRecordRequestBuilder {
        private final String customFieldGid;
        private CustomFieldRequest data;
        private Boolean optPretty;
        private List<String> optFields;

        private UpdateFieldRecordRequestBuilder(String customFieldGid) {
            this.customFieldGid = customFieldGid;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateFieldRecordRequestBuilder
         */
        public UpdateFieldRecordRequestBuilder data(CustomFieldRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set optPretty
         * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
         * @return UpdateFieldRecordRequestBuilder
         */
        public UpdateFieldRecordRequestBuilder optPretty(Boolean optPretty) {
            this.optPretty = optPretty;
            return this;
        }
        
        /**
         * Set optFields
         * @param optFields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. (optional)
         * @return UpdateFieldRecordRequestBuilder
         */
        public UpdateFieldRecordRequestBuilder optFields(List<String> optFields) {
            this.optFields = optFields;
            return this;
        }
        
        /**
         * Build call for updateFieldRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest = buildBodyParams();
            return updateFieldRecordCall(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest, _callback);
        }

        private CustomFieldsUpdateFieldRecordRequest buildBodyParams() {
            CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest = new CustomFieldsUpdateFieldRecordRequest();
            customFieldsUpdateFieldRecordRequest.data(this.data);
            return customFieldsUpdateFieldRecordRequest;
        }

        /**
         * Execute updateFieldRecord request
         * @return CustomFieldsUpdateFieldRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsUpdateFieldRecordResponse execute() throws ApiException {
            CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest = buildBodyParams();
            ApiResponse<CustomFieldsUpdateFieldRecordResponse> localVarResp = updateFieldRecordWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFieldRecord request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsUpdateFieldRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsUpdateFieldRecordResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest = buildBodyParams();
            return updateFieldRecordWithHttpInfo(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest);
        }

        /**
         * Execute updateFieldRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsUpdateFieldRecordResponse> _callback) throws ApiException {
            CustomFieldsUpdateFieldRecordRequest customFieldsUpdateFieldRecordRequest = buildBodyParams();
            return updateFieldRecordAsync(customFieldGid, optPretty, optFields, customFieldsUpdateFieldRecordRequest, _callback);
        }
    }

    /**
     * Update a custom field
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @return UpdateFieldRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldRecordRequestBuilder updateFieldRecord(String customFieldGid) throws IllegalArgumentException {
        if (customFieldGid == null) throw new IllegalArgumentException("\"customFieldGid\" is required but got null");
            

        return new UpdateFieldRecordRequestBuilder(customFieldGid);
    }
}
